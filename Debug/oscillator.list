
oscillator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000720c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080073e8  080073e8  000173e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007470  08007470  00022084  2**0
                  CONTENTS
  4 .ARM          00000008  08007470  08007470  00017470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007478  08007478  00022084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007478  08007478  00017478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800747c  0800747c  0001747c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002084  20000000  08007480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20002084  08009504  00022084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002228  08009504  00022228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00022084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b892  00000000  00000000  000220b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031bc  00000000  00000000  0003d946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  00040b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c0  00000000  00000000  00042118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021ce1  00000000  00000000  000435d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d1c  00000000  00000000  000652b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1702  00000000  00000000  0007cfd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015e6d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006260  00000000  00000000  0015e72c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20002084 	.word	0x20002084
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080073cc 	.word	0x080073cc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20002088 	.word	0x20002088
 8000214:	080073cc 	.word	0x080073cc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b96e 	b.w	8000ec4 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	468c      	mov	ip, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f040 8083 	bne.w	8000d16 <__udivmoddi4+0x116>
 8000c10:	428a      	cmp	r2, r1
 8000c12:	4617      	mov	r7, r2
 8000c14:	d947      	bls.n	8000ca6 <__udivmoddi4+0xa6>
 8000c16:	fab2 f282 	clz	r2, r2
 8000c1a:	b142      	cbz	r2, 8000c2e <__udivmoddi4+0x2e>
 8000c1c:	f1c2 0020 	rsb	r0, r2, #32
 8000c20:	fa24 f000 	lsr.w	r0, r4, r0
 8000c24:	4091      	lsls	r1, r2
 8000c26:	4097      	lsls	r7, r2
 8000c28:	ea40 0c01 	orr.w	ip, r0, r1
 8000c2c:	4094      	lsls	r4, r2
 8000c2e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fbbc f6f8 	udiv	r6, ip, r8
 8000c38:	fa1f fe87 	uxth.w	lr, r7
 8000c3c:	fb08 c116 	mls	r1, r8, r6, ip
 8000c40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c44:	fb06 f10e 	mul.w	r1, r6, lr
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	d909      	bls.n	8000c60 <__udivmoddi4+0x60>
 8000c4c:	18fb      	adds	r3, r7, r3
 8000c4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c52:	f080 8119 	bcs.w	8000e88 <__udivmoddi4+0x288>
 8000c56:	4299      	cmp	r1, r3
 8000c58:	f240 8116 	bls.w	8000e88 <__udivmoddi4+0x288>
 8000c5c:	3e02      	subs	r6, #2
 8000c5e:	443b      	add	r3, r7
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c68:	fb08 3310 	mls	r3, r8, r0, r3
 8000c6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c74:	45a6      	cmp	lr, r4
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x8c>
 8000c78:	193c      	adds	r4, r7, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	f080 8105 	bcs.w	8000e8c <__udivmoddi4+0x28c>
 8000c82:	45a6      	cmp	lr, r4
 8000c84:	f240 8102 	bls.w	8000e8c <__udivmoddi4+0x28c>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	443c      	add	r4, r7
 8000c8c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c90:	eba4 040e 	sub.w	r4, r4, lr
 8000c94:	2600      	movs	r6, #0
 8000c96:	b11d      	cbz	r5, 8000ca0 <__udivmoddi4+0xa0>
 8000c98:	40d4      	lsrs	r4, r2
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	b902      	cbnz	r2, 8000caa <__udivmoddi4+0xaa>
 8000ca8:	deff      	udf	#255	; 0xff
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	2a00      	cmp	r2, #0
 8000cb0:	d150      	bne.n	8000d54 <__udivmoddi4+0x154>
 8000cb2:	1bcb      	subs	r3, r1, r7
 8000cb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb8:	fa1f f887 	uxth.w	r8, r7
 8000cbc:	2601      	movs	r6, #1
 8000cbe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cc2:	0c21      	lsrs	r1, r4, #16
 8000cc4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ccc:	fb08 f30c 	mul.w	r3, r8, ip
 8000cd0:	428b      	cmp	r3, r1
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0xe4>
 8000cd4:	1879      	adds	r1, r7, r1
 8000cd6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0xe2>
 8000cdc:	428b      	cmp	r3, r1
 8000cde:	f200 80e9 	bhi.w	8000eb4 <__udivmoddi4+0x2b4>
 8000ce2:	4684      	mov	ip, r0
 8000ce4:	1ac9      	subs	r1, r1, r3
 8000ce6:	b2a3      	uxth	r3, r4
 8000ce8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cec:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cf4:	fb08 f800 	mul.w	r8, r8, r0
 8000cf8:	45a0      	cmp	r8, r4
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x10c>
 8000cfc:	193c      	adds	r4, r7, r4
 8000cfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x10a>
 8000d04:	45a0      	cmp	r8, r4
 8000d06:	f200 80d9 	bhi.w	8000ebc <__udivmoddi4+0x2bc>
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	eba4 0408 	sub.w	r4, r4, r8
 8000d10:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d14:	e7bf      	b.n	8000c96 <__udivmoddi4+0x96>
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d909      	bls.n	8000d2e <__udivmoddi4+0x12e>
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	f000 80b1 	beq.w	8000e82 <__udivmoddi4+0x282>
 8000d20:	2600      	movs	r6, #0
 8000d22:	e9c5 0100 	strd	r0, r1, [r5]
 8000d26:	4630      	mov	r0, r6
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	fab3 f683 	clz	r6, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d14a      	bne.n	8000dcc <__udivmoddi4+0x1cc>
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0x140>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 80b8 	bhi.w	8000eb0 <__udivmoddi4+0x2b0>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb61 0103 	sbc.w	r1, r1, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	468c      	mov	ip, r1
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0a8      	beq.n	8000ca0 <__udivmoddi4+0xa0>
 8000d4e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d52:	e7a5      	b.n	8000ca0 <__udivmoddi4+0xa0>
 8000d54:	f1c2 0320 	rsb	r3, r2, #32
 8000d58:	fa20 f603 	lsr.w	r6, r0, r3
 8000d5c:	4097      	lsls	r7, r2
 8000d5e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d62:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d66:	40d9      	lsrs	r1, r3
 8000d68:	4330      	orrs	r0, r6
 8000d6a:	0c03      	lsrs	r3, r0, #16
 8000d6c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7c:	fb06 f108 	mul.w	r1, r6, r8
 8000d80:	4299      	cmp	r1, r3
 8000d82:	fa04 f402 	lsl.w	r4, r4, r2
 8000d86:	d909      	bls.n	8000d9c <__udivmoddi4+0x19c>
 8000d88:	18fb      	adds	r3, r7, r3
 8000d8a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d8e:	f080 808d 	bcs.w	8000eac <__udivmoddi4+0x2ac>
 8000d92:	4299      	cmp	r1, r3
 8000d94:	f240 808a 	bls.w	8000eac <__udivmoddi4+0x2ac>
 8000d98:	3e02      	subs	r6, #2
 8000d9a:	443b      	add	r3, r7
 8000d9c:	1a5b      	subs	r3, r3, r1
 8000d9e:	b281      	uxth	r1, r0
 8000da0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000da4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dac:	fb00 f308 	mul.w	r3, r0, r8
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x1c4>
 8000db4:	1879      	adds	r1, r7, r1
 8000db6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dba:	d273      	bcs.n	8000ea4 <__udivmoddi4+0x2a4>
 8000dbc:	428b      	cmp	r3, r1
 8000dbe:	d971      	bls.n	8000ea4 <__udivmoddi4+0x2a4>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	4439      	add	r1, r7
 8000dc4:	1acb      	subs	r3, r1, r3
 8000dc6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dca:	e778      	b.n	8000cbe <__udivmoddi4+0xbe>
 8000dcc:	f1c6 0c20 	rsb	ip, r6, #32
 8000dd0:	fa03 f406 	lsl.w	r4, r3, r6
 8000dd4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd8:	431c      	orrs	r4, r3
 8000dda:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dde:	fa01 f306 	lsl.w	r3, r1, r6
 8000de2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000de6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dea:	431f      	orrs	r7, r3
 8000dec:	0c3b      	lsrs	r3, r7, #16
 8000dee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df2:	fa1f f884 	uxth.w	r8, r4
 8000df6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dfa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dfe:	fb09 fa08 	mul.w	sl, r9, r8
 8000e02:	458a      	cmp	sl, r1
 8000e04:	fa02 f206 	lsl.w	r2, r2, r6
 8000e08:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x220>
 8000e0e:	1861      	adds	r1, r4, r1
 8000e10:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e14:	d248      	bcs.n	8000ea8 <__udivmoddi4+0x2a8>
 8000e16:	458a      	cmp	sl, r1
 8000e18:	d946      	bls.n	8000ea8 <__udivmoddi4+0x2a8>
 8000e1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e1e:	4421      	add	r1, r4
 8000e20:	eba1 010a 	sub.w	r1, r1, sl
 8000e24:	b2bf      	uxth	r7, r7
 8000e26:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e2a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e2e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e32:	fb00 f808 	mul.w	r8, r0, r8
 8000e36:	45b8      	cmp	r8, r7
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x24a>
 8000e3a:	19e7      	adds	r7, r4, r7
 8000e3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e40:	d22e      	bcs.n	8000ea0 <__udivmoddi4+0x2a0>
 8000e42:	45b8      	cmp	r8, r7
 8000e44:	d92c      	bls.n	8000ea0 <__udivmoddi4+0x2a0>
 8000e46:	3802      	subs	r0, #2
 8000e48:	4427      	add	r7, r4
 8000e4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e4e:	eba7 0708 	sub.w	r7, r7, r8
 8000e52:	fba0 8902 	umull	r8, r9, r0, r2
 8000e56:	454f      	cmp	r7, r9
 8000e58:	46c6      	mov	lr, r8
 8000e5a:	4649      	mov	r1, r9
 8000e5c:	d31a      	bcc.n	8000e94 <__udivmoddi4+0x294>
 8000e5e:	d017      	beq.n	8000e90 <__udivmoddi4+0x290>
 8000e60:	b15d      	cbz	r5, 8000e7a <__udivmoddi4+0x27a>
 8000e62:	ebb3 020e 	subs.w	r2, r3, lr
 8000e66:	eb67 0701 	sbc.w	r7, r7, r1
 8000e6a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e6e:	40f2      	lsrs	r2, r6
 8000e70:	ea4c 0202 	orr.w	r2, ip, r2
 8000e74:	40f7      	lsrs	r7, r6
 8000e76:	e9c5 2700 	strd	r2, r7, [r5]
 8000e7a:	2600      	movs	r6, #0
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	462e      	mov	r6, r5
 8000e84:	4628      	mov	r0, r5
 8000e86:	e70b      	b.n	8000ca0 <__udivmoddi4+0xa0>
 8000e88:	4606      	mov	r6, r0
 8000e8a:	e6e9      	b.n	8000c60 <__udivmoddi4+0x60>
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	e6fd      	b.n	8000c8c <__udivmoddi4+0x8c>
 8000e90:	4543      	cmp	r3, r8
 8000e92:	d2e5      	bcs.n	8000e60 <__udivmoddi4+0x260>
 8000e94:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e98:	eb69 0104 	sbc.w	r1, r9, r4
 8000e9c:	3801      	subs	r0, #1
 8000e9e:	e7df      	b.n	8000e60 <__udivmoddi4+0x260>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e7d2      	b.n	8000e4a <__udivmoddi4+0x24a>
 8000ea4:	4660      	mov	r0, ip
 8000ea6:	e78d      	b.n	8000dc4 <__udivmoddi4+0x1c4>
 8000ea8:	4681      	mov	r9, r0
 8000eaa:	e7b9      	b.n	8000e20 <__udivmoddi4+0x220>
 8000eac:	4666      	mov	r6, ip
 8000eae:	e775      	b.n	8000d9c <__udivmoddi4+0x19c>
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	e74a      	b.n	8000d4a <__udivmoddi4+0x14a>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	4439      	add	r1, r7
 8000eba:	e713      	b.n	8000ce4 <__udivmoddi4+0xe4>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	443c      	add	r4, r7
 8000ec0:	e724      	b.n	8000d0c <__udivmoddi4+0x10c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <HAL_ADC_ConvCpltCallback>:

#include <math.h>
#include "adc.h"
#include "dac.h"

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ed8:	d13f      	bne.n	8000f5a <HAL_ADC_ConvCpltCallback+0x92>
		float note_number = (float)HAL_ADC_GetValue(hadc) / 32.0f;
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f001 fb74 	bl	80025c8 <HAL_ADC_GetValue>
 8000ee0:	ee07 0a90 	vmov	s15, r0
 8000ee4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ee8:	eddf 6a29 	vldr	s13, [pc, #164]	; 8000f90 <HAL_ADC_ConvCpltCallback+0xc8>
 8000eec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ef0:	edc7 7a03 	vstr	s15, [r7, #12]
		float target_frequency = 440.0f * pow(2.0f, (note_number - 69.0f) / 12.0f);
 8000ef4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ef8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000f94 <HAL_ADC_ConvCpltCallback+0xcc>
 8000efc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f00:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000f04:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000f08:	ee16 0a90 	vmov	r0, s13
 8000f0c:	f7ff fae8 	bl	80004e0 <__aeabi_f2d>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	ec43 2b11 	vmov	d1, r2, r3
 8000f18:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8000f88 <HAL_ADC_ConvCpltCallback+0xc0>
 8000f1c:	f005 faa0 	bl	8006460 <pow>
 8000f20:	ec51 0b10 	vmov	r0, r1, d0
 8000f24:	f04f 0200 	mov.w	r2, #0
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <HAL_ADC_ConvCpltCallback+0xd0>)
 8000f2a:	f7ff fb31 	bl	8000590 <__aeabi_dmul>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	4610      	mov	r0, r2
 8000f34:	4619      	mov	r1, r3
 8000f36:	f7ff fdfb 	bl	8000b30 <__aeabi_d2f>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	60bb      	str	r3, [r7, #8]
		dac_phase_delta = (DAC_OUTPUT_MAX + 1.0f) * target_frequency / SAMPLE_RATE;
 8000f3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f42:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000f9c <HAL_ADC_ConvCpltCallback+0xd4>
 8000f46:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f4a:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000fa0 <HAL_ADC_ConvCpltCallback+0xd8>
 8000f4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f52:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000f54:	edc3 7a00 	vstr	s15, [r3]
	} else if (hadc->Instance == ADC2) {
		pulse_width = HAL_ADC_GetValue(hadc) / DAC_OUTPUT_MAX;
	}
}
 8000f58:	e012      	b.n	8000f80 <HAL_ADC_ConvCpltCallback+0xb8>
	} else if (hadc->Instance == ADC2) {
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d10d      	bne.n	8000f80 <HAL_ADC_ConvCpltCallback+0xb8>
		pulse_width = HAL_ADC_GetValue(hadc) / DAC_OUTPUT_MAX;
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f001 fb2f 	bl	80025c8 <HAL_ADC_GetValue>
 8000f6a:	ee07 0a90 	vmov	s15, r0
 8000f6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f72:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000fac <HAL_ADC_ConvCpltCallback+0xe4>
 8000f76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000f7c:	edc3 7a00 	vstr	s15, [r3]
}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	00000000 	.word	0x00000000
 8000f8c:	40000000 	.word	0x40000000
 8000f90:	42000000 	.word	0x42000000
 8000f94:	428a0000 	.word	0x428a0000
 8000f98:	407b8000 	.word	0x407b8000
 8000f9c:	45800000 	.word	0x45800000
 8000fa0:	473b8000 	.word	0x473b8000
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	50000100 	.word	0x50000100
 8000fac:	457ff000 	.word	0x457ff000
 8000fb0:	2000000c 	.word	0x2000000c

08000fb4 <HAL_COMP_TriggerCallback>:
 */

#include "comp.h"
#include "dac.h"

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	if (HAL_COMP_GetOutputLevel(hcomp) == COMP_OUTPUT_LEVEL_LOW) {
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f002 fc63 	bl	8003888 <HAL_COMP_GetOutputLevel>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d117      	bne.n	8000ff8 <HAL_COMP_TriggerCallback+0x44>
		if (sync_type == Hard_Sync_Both || sync_type == Hard_Sync_Falling) {
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <HAL_COMP_TriggerCallback+0x7c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d003      	beq.n	8000fd8 <HAL_COMP_TriggerCallback+0x24>
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <HAL_COMP_TriggerCallback+0x7c>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d103      	bne.n	8000fe0 <HAL_COMP_TriggerCallback+0x2c>
			hard_sync(&dac_phase_increment);
 8000fd8:	4816      	ldr	r0, [pc, #88]	; (8001034 <HAL_COMP_TriggerCallback+0x80>)
 8000fda:	f000 f82d 	bl	8001038 <hard_sync>
 8000fde:	e023      	b.n	8001028 <HAL_COMP_TriggerCallback+0x74>
		} else if (sync_type == Soft_Sync_Both || sync_type == Soft_Sync_Falling) {
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <HAL_COMP_TriggerCallback+0x7c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b05      	cmp	r3, #5
 8000fe6:	d003      	beq.n	8000ff0 <HAL_COMP_TriggerCallback+0x3c>
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <HAL_COMP_TriggerCallback+0x7c>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b04      	cmp	r3, #4
 8000fee:	d11b      	bne.n	8001028 <HAL_COMP_TriggerCallback+0x74>
			soft_sync(&dac_phase_increment);
 8000ff0:	4810      	ldr	r0, [pc, #64]	; (8001034 <HAL_COMP_TriggerCallback+0x80>)
 8000ff2:	f000 f82b 	bl	800104c <soft_sync>
			hard_sync(&dac_phase_increment);
		} else if (sync_type == Soft_Sync_Both || sync_type == Soft_Sync_Rising) {
			soft_sync(&dac_phase_increment);
		}
	}
}
 8000ff6:	e017      	b.n	8001028 <HAL_COMP_TriggerCallback+0x74>
		if (sync_type == Hard_Sync_Both || sync_type == Hard_Sync_Rising) {
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <HAL_COMP_TriggerCallback+0x7c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d003      	beq.n	8001008 <HAL_COMP_TriggerCallback+0x54>
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <HAL_COMP_TriggerCallback+0x7c>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d103      	bne.n	8001010 <HAL_COMP_TriggerCallback+0x5c>
			hard_sync(&dac_phase_increment);
 8001008:	480a      	ldr	r0, [pc, #40]	; (8001034 <HAL_COMP_TriggerCallback+0x80>)
 800100a:	f000 f815 	bl	8001038 <hard_sync>
 800100e:	e00b      	b.n	8001028 <HAL_COMP_TriggerCallback+0x74>
		} else if (sync_type == Soft_Sync_Both || sync_type == Soft_Sync_Rising) {
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <HAL_COMP_TriggerCallback+0x7c>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b05      	cmp	r3, #5
 8001016:	d003      	beq.n	8001020 <HAL_COMP_TriggerCallback+0x6c>
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_COMP_TriggerCallback+0x7c>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b03      	cmp	r3, #3
 800101e:	d103      	bne.n	8001028 <HAL_COMP_TriggerCallback+0x74>
			soft_sync(&dac_phase_increment);
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <HAL_COMP_TriggerCallback+0x80>)
 8001022:	f000 f813 	bl	800104c <soft_sync>
}
 8001026:	e7ff      	b.n	8001028 <HAL_COMP_TriggerCallback+0x74>
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000001 	.word	0x20000001
 8001034:	20000004 	.word	0x20000004

08001038 <hard_sync>:

// Reset the phase increment back to the "zero"-crossing point.
void hard_sync(float* phase_inc) {
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	// *phase_inc = (DAC_OUTPUT_MAX + 1.0f) / 2.0f;
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <soft_sync>:

// "Reverse" the phase of the wave, or in other terms, mirror the position
// around the "zero"-crossing point.
void soft_sync(float* phase_inc) {
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	// *phase_inc = DAC_OUTPUT_MAX - *phase_inc;
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <render_waves>:
// Start at the "zero" crossing point, rather than the bottom.
float dac_phase_increment = (DAC_OUTPUT_MAX + 1.0f) / 2.0f;
float dac_phase_delta = 1;
float pulse_width = 0.5;

void render_waves() {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	render_wave(&hdac1, DAC_CHANNEL_1, dac1_wave_type, dac_phase_increment, dac_phase_delta);
 8001064:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <render_waves+0x94>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4a23      	ldr	r2, [pc, #140]	; (80010f8 <render_waves+0x98>)
 800106a:	edd2 7a00 	vldr	s15, [r2]
 800106e:	4a23      	ldr	r2, [pc, #140]	; (80010fc <render_waves+0x9c>)
 8001070:	ed92 7a00 	vldr	s14, [r2]
 8001074:	eef0 0a47 	vmov.f32	s1, s14
 8001078:	eeb0 0a67 	vmov.f32	s0, s15
 800107c:	461a      	mov	r2, r3
 800107e:	2100      	movs	r1, #0
 8001080:	481f      	ldr	r0, [pc, #124]	; (8001100 <render_waves+0xa0>)
 8001082:	f000 f843 	bl	800110c <render_wave>
	render_wave(&hdac1, DAC_CHANNEL_2, dac2_wave_type, dac_phase_increment, dac_phase_delta);
 8001086:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <render_waves+0xa4>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <render_waves+0x98>)
 800108c:	edd2 7a00 	vldr	s15, [r2]
 8001090:	4a1a      	ldr	r2, [pc, #104]	; (80010fc <render_waves+0x9c>)
 8001092:	ed92 7a00 	vldr	s14, [r2]
 8001096:	eef0 0a47 	vmov.f32	s1, s14
 800109a:	eeb0 0a67 	vmov.f32	s0, s15
 800109e:	461a      	mov	r2, r3
 80010a0:	2110      	movs	r1, #16
 80010a2:	4817      	ldr	r0, [pc, #92]	; (8001100 <render_waves+0xa0>)
 80010a4:	f000 f832 	bl	800110c <render_wave>
	render_pulse(GPIOA, GPIO_PIN_6, dac_phase_increment);
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <render_waves+0x98>)
 80010aa:	edd3 7a00 	vldr	s15, [r3]
 80010ae:	eeb0 0a67 	vmov.f32	s0, s15
 80010b2:	2140      	movs	r1, #64	; 0x40
 80010b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b8:	f000 f8a0 	bl	80011fc <render_pulse>

	dac_phase_increment += dac_phase_delta;
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <render_waves+0x98>)
 80010be:	ed93 7a00 	vldr	s14, [r3]
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <render_waves+0x9c>)
 80010c4:	edd3 7a00 	vldr	s15, [r3]
 80010c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <render_waves+0x98>)
 80010ce:	edc3 7a00 	vstr	s15, [r3]
	if (dac_phase_increment > DAC_OUTPUT_MAX) {
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <render_waves+0x98>)
 80010d4:	edd3 7a00 	vldr	s15, [r3]
 80010d8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001108 <render_waves+0xa8>
 80010dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	dc00      	bgt.n	80010e8 <render_waves+0x88>
		dac_phase_increment = 0.0f;
	}
}
 80010e6:	e003      	b.n	80010f0 <render_waves+0x90>
		dac_phase_increment = 0.0f;
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <render_waves+0x98>)
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200020a0 	.word	0x200020a0
 80010f8:	20000004 	.word	0x20000004
 80010fc:	20000008 	.word	0x20000008
 8001100:	200020a4 	.word	0x200020a4
 8001104:	20000000 	.word	0x20000000
 8001108:	457ff000 	.word	0x457ff000

0800110c <render_wave>:

void render_wave(DAC_HandleTypeDef* dac, uint8_t channel, WaveType wave_type, float phase_inc, float phase_delta) {
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b087      	sub	sp, #28
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	460b      	mov	r3, r1
 8001116:	ed87 0a01 	vstr	s0, [r7, #4]
 800111a:	edc7 0a00 	vstr	s1, [r7]
 800111e:	72fb      	strb	r3, [r7, #11]
 8001120:	4613      	mov	r3, r2
 8001122:	72bb      	strb	r3, [r7, #10]
	float out;

	if (wave_type == Triangle_Wave) {
 8001124:	7abb      	ldrb	r3, [r7, #10]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d11e      	bne.n	8001168 <render_wave+0x5c>
		if (phase_inc < (DAC_OUTPUT_MAX + 1.0f) / 2.0f) {
 800112a:	edd7 7a01 	vldr	s15, [r7, #4]
 800112e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80011ec <render_wave+0xe0>
 8001132:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113a:	d506      	bpl.n	800114a <render_wave+0x3e>
			out = phase_inc * 2.0f;
 800113c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001140:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001144:	edc7 7a05 	vstr	s15, [r7, #20]
 8001148:	e034      	b.n	80011b4 <render_wave+0xa8>
		} else {
			out = DAC_OUTPUT_MAX - (phase_inc - DAC_OUTPUT_MAX / 2.0f) * 2.0f;
 800114a:	edd7 7a01 	vldr	s15, [r7, #4]
 800114e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80011f0 <render_wave+0xe4>
 8001152:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001156:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800115a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80011f4 <render_wave+0xe8>
 800115e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001162:	edc7 7a05 	vstr	s15, [r7, #20]
 8001166:	e025      	b.n	80011b4 <render_wave+0xa8>
		}
	} else if (wave_type == Sawtooth_Down_Wave) {
 8001168:	7abb      	ldrb	r3, [r7, #10]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d108      	bne.n	8001180 <render_wave+0x74>
		out = DAC_OUTPUT_MAX - phase_inc;
 800116e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80011f4 <render_wave+0xe8>
 8001172:	edd7 7a01 	vldr	s15, [r7, #4]
 8001176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800117a:	edc7 7a05 	vstr	s15, [r7, #20]
 800117e:	e019      	b.n	80011b4 <render_wave+0xa8>
	} else if (wave_type == Sawtooth_Up_Wave) {
 8001180:	7abb      	ldrb	r3, [r7, #10]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d102      	bne.n	800118c <render_wave+0x80>
		out = phase_inc;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	e013      	b.n	80011b4 <render_wave+0xa8>
	} else if (wave_type == Sine_Wave) {
 800118c:	7abb      	ldrb	r3, [r7, #10]
 800118e:	2b03      	cmp	r3, #3
 8001190:	d110      	bne.n	80011b4 <render_wave+0xa8>
		out = sine_lut[(uint16_t)phase_inc];
 8001192:	edd7 7a01 	vldr	s15, [r7, #4]
 8001196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800119a:	ee17 3a90 	vmov	r3, s15
 800119e:	b29b      	uxth	r3, r3
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <render_wave+0xec>)
 80011a4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80011a8:	ee07 3a90 	vmov	s15, r3
 80011ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011b0:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	HAL_DAC_SetValue(dac, channel, DAC_ALIGN_12B_R, (uint16_t)round(out));
 80011b4:	7afc      	ldrb	r4, [r7, #11]
 80011b6:	6978      	ldr	r0, [r7, #20]
 80011b8:	f7ff f992 	bl	80004e0 <__aeabi_f2d>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	ec43 2b10 	vmov	d0, r2, r3
 80011c4:	f005 f906 	bl	80063d4 <round>
 80011c8:	ec53 2b10 	vmov	r2, r3, d0
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fc8e 	bl	8000af0 <__aeabi_d2uiz>
 80011d4:	4603      	mov	r3, r0
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	2200      	movs	r2, #0
 80011da:	4621      	mov	r1, r4
 80011dc:	68f8      	ldr	r0, [r7, #12]
 80011de:	f002 fce7 	bl	8003bb0 <HAL_DAC_SetValue>
}
 80011e2:	bf00      	nop
 80011e4:	371c      	adds	r7, #28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd90      	pop	{r4, r7, pc}
 80011ea:	bf00      	nop
 80011ec:	45000000 	.word	0x45000000
 80011f0:	44fff000 	.word	0x44fff000
 80011f4:	457ff000 	.word	0x457ff000
 80011f8:	20000010 	.word	0x20000010

080011fc <render_pulse>:

void render_pulse(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, float value) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	460b      	mov	r3, r1
 8001206:	ed87 0a01 	vstr	s0, [r7, #4]
 800120a:	817b      	strh	r3, [r7, #10]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, value / DAC_OUTPUT_MAX < pulse_width);
 800120c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001210:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001244 <render_pulse+0x48>
 8001214:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <render_pulse+0x4c>)
 800121a:	edd3 7a00 	vldr	s15, [r3]
 800121e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001226:	bf4c      	ite	mi
 8001228:	2301      	movmi	r3, #1
 800122a:	2300      	movpl	r3, #0
 800122c:	b2db      	uxtb	r3, r3
 800122e:	461a      	mov	r2, r3
 8001230:	897b      	ldrh	r3, [r7, #10]
 8001232:	4619      	mov	r1, r3
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f003 f80d 	bl	8004254 <HAL_GPIO_WritePin>
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	457ff000 	.word	0x457ff000
 8001248:	2000000c 	.word	0x2000000c

0800124c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001250:	f000 fc2b 	bl	8001aaa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001254:	f000 f822 	bl	800129c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001258:	f000 f9e0 	bl	800161c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800125c:	f000 f992 	bl	8001584 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001260:	f000 f886 	bl	8001370 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001264:	f000 f924 	bl	80014b0 <MX_DAC1_Init>
  MX_TIM16_Init();
 8001268:	f000 f966 	bl	8001538 <MX_TIM16_Init>
  MX_COMP1_Init();
 800126c:	f000 f8f8 	bl	8001460 <MX_COMP1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8001270:	4807      	ldr	r0, [pc, #28]	; (8001290 <main+0x44>)
 8001272:	f001 f877 	bl	8002364 <HAL_ADC_Start_IT>
  // HAL_ADC_Start_IT(&hadc2);

  // HAL_COMP_Start(&hcomp1);

  HAL_TIM_Base_Start_IT(&htim16);
 8001276:	4807      	ldr	r0, [pc, #28]	; (8001294 <main+0x48>)
 8001278:	f004 f834 	bl	80052e4 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800127c:	2100      	movs	r1, #0
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <main+0x4c>)
 8001280:	f002 fc43 	bl	8003b0a <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8001284:	2110      	movs	r1, #16
 8001286:	4804      	ldr	r0, [pc, #16]	; (8001298 <main+0x4c>)
 8001288:	f002 fc3f 	bl	8003b0a <HAL_DAC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800128c:	e7fe      	b.n	800128c <main+0x40>
 800128e:	bf00      	nop
 8001290:	200020dc 	.word	0x200020dc
 8001294:	200021d8 	.word	0x200021d8
 8001298:	200020a4 	.word	0x200020a4

0800129c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b0a4      	sub	sp, #144	; 0x90
 80012a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012a6:	2238      	movs	r2, #56	; 0x38
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f005 f88a 	bl	80063c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c0:	463b      	mov	r3, r7
 80012c2:	2244      	movs	r2, #68	; 0x44
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f005 f87c 	bl	80063c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012d0:	f002 ffd8 	bl	8004284 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d4:	2302      	movs	r3, #2
 80012d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012de:	2340      	movs	r3, #64	; 0x40
 80012e0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e2:	2302      	movs	r3, #2
 80012e4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e6:	2302      	movs	r3, #2
 80012e8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80012ea:	2301      	movs	r3, #1
 80012ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80012ee:	230c      	movs	r3, #12
 80012f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012fa:	2302      	movs	r3, #2
 80012fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001300:	2302      	movs	r3, #2
 8001302:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001306:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800130a:	4618      	mov	r0, r3
 800130c:	f003 f86e 	bl	80043ec <HAL_RCC_OscConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001316:	f000 f9e5 	bl	80016e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800131a:	230f      	movs	r3, #15
 800131c:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800131e:	2303      	movs	r3, #3
 8001320:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800132a:	2300      	movs	r3, #0
 800132c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800132e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001332:	2102      	movs	r1, #2
 8001334:	4618      	mov	r0, r3
 8001336:	f003 fb71 	bl	8004a1c <HAL_RCC_ClockConfig>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001340:	f000 f9d0 	bl	80016e4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8001344:	f248 0302 	movw	r3, #32770	; 0x8002
 8001348:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800134e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001352:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001354:	463b      	mov	r3, r7
 8001356:	4618      	mov	r0, r3
 8001358:	f003 fd7c 	bl	8004e54 <HAL_RCCEx_PeriphCLKConfig>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001362:	f000 f9bf 	bl	80016e4 <Error_Handler>
  }
}
 8001366:	bf00      	nop
 8001368:	3790      	adds	r7, #144	; 0x90
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08c      	sub	sp, #48	; 0x30
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2220      	movs	r2, #32
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f005 f81b 	bl	80063c4 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800138e:	4b32      	ldr	r3, [pc, #200]	; (8001458 <MX_ADC1_Init+0xe8>)
 8001390:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001394:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001396:	4b30      	ldr	r3, [pc, #192]	; (8001458 <MX_ADC1_Init+0xe8>)
 8001398:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 800139c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800139e:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <MX_ADC1_Init+0xe8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013a4:	4b2c      	ldr	r3, [pc, #176]	; (8001458 <MX_ADC1_Init+0xe8>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80013aa:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <MX_ADC1_Init+0xe8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013b0:	4b29      	ldr	r3, [pc, #164]	; (8001458 <MX_ADC1_Init+0xe8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013b6:	4b28      	ldr	r3, [pc, #160]	; (8001458 <MX_ADC1_Init+0xe8>)
 80013b8:	2204      	movs	r2, #4
 80013ba:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013bc:	4b26      	ldr	r3, [pc, #152]	; (8001458 <MX_ADC1_Init+0xe8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013c2:	4b25      	ldr	r3, [pc, #148]	; (8001458 <MX_ADC1_Init+0xe8>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <MX_ADC1_Init+0xe8>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013ce:	4b22      	ldr	r3, [pc, #136]	; (8001458 <MX_ADC1_Init+0xe8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <MX_ADC1_Init+0xe8>)
 80013d8:	2200      	movs	r2, #0
 80013da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013dc:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <MX_ADC1_Init+0xe8>)
 80013de:	2200      	movs	r2, #0
 80013e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <MX_ADC1_Init+0xe8>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013ea:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <MX_ADC1_Init+0xe8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <MX_ADC1_Init+0xe8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013f8:	4817      	ldr	r0, [pc, #92]	; (8001458 <MX_ADC1_Init+0xe8>)
 80013fa:	f000 fe29 	bl	8002050 <HAL_ADC_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001404:	f000 f96e 	bl	80016e4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800140c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001410:	4619      	mov	r1, r3
 8001412:	4811      	ldr	r0, [pc, #68]	; (8001458 <MX_ADC1_Init+0xe8>)
 8001414:	f001 ffbe 	bl	8003394 <HAL_ADCEx_MultiModeConfigChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800141e:	f000 f961 	bl	80016e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_ADC1_Init+0xec>)
 8001424:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001426:	2306      	movs	r3, #6
 8001428:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800142e:	237f      	movs	r3, #127	; 0x7f
 8001430:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001432:	2304      	movs	r3, #4
 8001434:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	4619      	mov	r1, r3
 800143e:	4806      	ldr	r0, [pc, #24]	; (8001458 <MX_ADC1_Init+0xe8>)
 8001440:	f001 fafe 	bl	8002a40 <HAL_ADC_ConfigChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800144a:	f000 f94b 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	3730      	adds	r7, #48	; 0x30
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200020dc 	.word	0x200020dc
 800145c:	04300002 	.word	0x04300002

08001460 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_COMP1_Init+0x44>)
 8001466:	4a10      	ldr	r2, [pc, #64]	; (80014a8 <MX_COMP1_Init+0x48>)
 8001468:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_COMP1_Init+0x44>)
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_2VREFINT;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_COMP1_Init+0x44>)
 8001472:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <MX_COMP1_Init+0x4c>)
 8001474:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <MX_COMP1_Init+0x44>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_COMP1_Init+0x44>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <MX_COMP1_Init+0x44>)
 8001484:	2200      	movs	r2, #0
 8001486:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_COMP1_Init+0x44>)
 800148a:	2231      	movs	r2, #49	; 0x31
 800148c:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_COMP1_Init+0x44>)
 8001490:	f002 f8e2 	bl	8003658 <HAL_COMP_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 800149a:	f000 f923 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200020b8 	.word	0x200020b8
 80014a8:	40010200 	.word	0x40010200
 80014ac:	00c00010 	.word	0x00c00010

080014b0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	; 0x30
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014b6:	463b      	mov	r3, r7
 80014b8:	2230      	movs	r2, #48	; 0x30
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f004 ff81 	bl	80063c4 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80014c2:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <MX_DAC1_Init+0x80>)
 80014c4:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <MX_DAC1_Init+0x84>)
 80014c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014c8:	4819      	ldr	r0, [pc, #100]	; (8001530 <MX_DAC1_Init+0x80>)
 80014ca:	f002 fafc 	bl	8003ac6 <HAL_DAC_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80014d4:	f000 f906 	bl	80016e4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80014d8:	2302      	movs	r3, #2
 80014da:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80014f4:	2301      	movs	r3, #1
 80014f6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014fc:	463b      	mov	r3, r7
 80014fe:	2200      	movs	r2, #0
 8001500:	4619      	mov	r1, r3
 8001502:	480b      	ldr	r0, [pc, #44]	; (8001530 <MX_DAC1_Init+0x80>)
 8001504:	f002 fb7c 	bl	8003c00 <HAL_DAC_ConfigChannel>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800150e:	f000 f8e9 	bl	80016e4 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001512:	463b      	mov	r3, r7
 8001514:	2210      	movs	r2, #16
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_DAC1_Init+0x80>)
 800151a:	f002 fb71 	bl	8003c00 <HAL_DAC_ConfigChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8001524:	f000 f8de 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	3730      	adds	r7, #48	; 0x30
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	200020a4 	.word	0x200020a4
 8001534:	50000800 	.word	0x50000800

08001538 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800153c:	4b0f      	ldr	r3, [pc, #60]	; (800157c <MX_TIM16_Init+0x44>)
 800153e:	4a10      	ldr	r2, [pc, #64]	; (8001580 <MX_TIM16_Init+0x48>)
 8001540:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_TIM16_Init+0x44>)
 8001544:	2200      	movs	r2, #0
 8001546:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <MX_TIM16_Init+0x44>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1999;
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <MX_TIM16_Init+0x44>)
 8001550:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001554:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <MX_TIM16_Init+0x44>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <MX_TIM16_Init+0x44>)
 800155e:	2200      	movs	r2, #0
 8001560:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <MX_TIM16_Init+0x44>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <MX_TIM16_Init+0x44>)
 800156a:	f003 fe63 	bl	8005234 <HAL_TIM_Base_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001574:	f000 f8b6 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200021d8 	.word	0x200021d8
 8001580:	40014400 	.word	0x40014400

08001584 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <MX_USART2_UART_Init+0x90>)
 800158a:	4a23      	ldr	r2, [pc, #140]	; (8001618 <MX_USART2_UART_Init+0x94>)
 800158c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800158e:	4b21      	ldr	r3, [pc, #132]	; (8001614 <MX_USART2_UART_Init+0x90>)
 8001590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <MX_USART2_UART_Init+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <MX_USART2_UART_Init+0x90>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <MX_USART2_UART_Init+0x90>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <MX_USART2_UART_Init+0x90>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <MX_USART2_UART_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b17      	ldr	r3, [pc, #92]	; (8001614 <MX_USART2_UART_Init+0x90>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <MX_USART2_UART_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <MX_USART2_UART_Init+0x90>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MX_USART2_UART_Init+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015cc:	4811      	ldr	r0, [pc, #68]	; (8001614 <MX_USART2_UART_Init+0x90>)
 80015ce:	f004 f971 	bl	80058b4 <HAL_UART_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015d8:	f000 f884 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015dc:	2100      	movs	r1, #0
 80015de:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_USART2_UART_Init+0x90>)
 80015e0:	f004 fdfc 	bl	80061dc <HAL_UARTEx_SetTxFifoThreshold>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80015ea:	f000 f87b 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ee:	2100      	movs	r1, #0
 80015f0:	4808      	ldr	r0, [pc, #32]	; (8001614 <MX_USART2_UART_Init+0x90>)
 80015f2:	f004 fe31 	bl	8006258 <HAL_UARTEx_SetRxFifoThreshold>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80015fc:	f000 f872 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001600:	4804      	ldr	r0, [pc, #16]	; (8001614 <MX_USART2_UART_Init+0x90>)
 8001602:	f004 fdb2 	bl	800616a <HAL_UARTEx_DisableFifoMode>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800160c:	f000 f86a 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20002148 	.word	0x20002148
 8001618:	40004400 	.word	0x40004400

0800161c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	4b2a      	ldr	r3, [pc, #168]	; (80016dc <MX_GPIO_Init+0xc0>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	4a29      	ldr	r2, [pc, #164]	; (80016dc <MX_GPIO_Init+0xc0>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163e:	4b27      	ldr	r3, [pc, #156]	; (80016dc <MX_GPIO_Init+0xc0>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	4b24      	ldr	r3, [pc, #144]	; (80016dc <MX_GPIO_Init+0xc0>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	4a23      	ldr	r2, [pc, #140]	; (80016dc <MX_GPIO_Init+0xc0>)
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001656:	4b21      	ldr	r3, [pc, #132]	; (80016dc <MX_GPIO_Init+0xc0>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Square_Osc_GPIO_Port, Square_Osc_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	2140      	movs	r1, #64	; 0x40
 8001666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166a:	f002 fdf3 	bl	8004254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001674:	481a      	ldr	r0, [pc, #104]	; (80016e0 <MX_GPIO_Init+0xc4>)
 8001676:	f002 fded 	bl	8004254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Square_Osc_Pin */
  GPIO_InitStruct.Pin = Square_Osc_Pin;
 800167a:	2340      	movs	r3, #64	; 0x40
 800167c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167e:	2301      	movs	r3, #1
 8001680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Square_Osc_GPIO_Port, &GPIO_InitStruct);
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	4619      	mov	r1, r3
 8001690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001694:	f002 fc5c 	bl	8003f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : Gate_Pin */
  GPIO_InitStruct.Pin = Gate_Pin;
 8001698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800169c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Gate_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 030c 	add.w	r3, r7, #12
 80016aa:	4619      	mov	r1, r3
 80016ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b0:	f002 fc4e 	bl	8003f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	4619      	mov	r1, r3
 80016cc:	4804      	ldr	r0, [pc, #16]	; (80016e0 <MX_GPIO_Init+0xc4>)
 80016ce:	f002 fc3f 	bl	8003f50 <HAL_GPIO_Init>

}
 80016d2:	bf00      	nop
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000
 80016e0:	48000400 	.word	0x48000400

080016e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e8:	b672      	cpsid	i
}
 80016ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ec:	e7fe      	b.n	80016ec <Error_Handler+0x8>
	...

080016f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <HAL_MspInit+0x44>)
 80016f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fa:	4a0e      	ldr	r2, [pc, #56]	; (8001734 <HAL_MspInit+0x44>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6613      	str	r3, [r2, #96]	; 0x60
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <HAL_MspInit+0x44>)
 8001704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_MspInit+0x44>)
 8001710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001712:	4a08      	ldr	r2, [pc, #32]	; (8001734 <HAL_MspInit+0x44>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001718:	6593      	str	r3, [r2, #88]	; 0x58
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_MspInit+0x44>)
 800171c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001726:	f002 fe51 	bl	80043cc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000

08001738 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001758:	d12c      	bne.n	80017b4 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800175a:	4b18      	ldr	r3, [pc, #96]	; (80017bc <HAL_ADC_MspInit+0x84>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	4a17      	ldr	r2, [pc, #92]	; (80017bc <HAL_ADC_MspInit+0x84>)
 8001760:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <HAL_ADC_MspInit+0x84>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_ADC_MspInit+0x84>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	4a11      	ldr	r2, [pc, #68]	; (80017bc <HAL_ADC_MspInit+0x84>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <HAL_ADC_MspInit+0x84>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = CV_Pin;
 800178a:	2301      	movs	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800178e:	2303      	movs	r3, #3
 8001790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CV_GPIO_Port, &GPIO_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4619      	mov	r1, r3
 800179c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a0:	f002 fbd6 	bl	8003f50 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2101      	movs	r1, #1
 80017a8:	2012      	movs	r0, #18
 80017aa:	f002 f958 	bl	8003a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80017ae:	2012      	movs	r0, #18
 80017b0:	f002 f96f 	bl	8003a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017b4:	bf00      	nop
 80017b6:	3728      	adds	r7, #40	; 0x28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40021000 	.word	0x40021000

080017c0 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a13      	ldr	r2, [pc, #76]	; (800182c <HAL_COMP_MspInit+0x6c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d120      	bne.n	8001824 <HAL_COMP_MspInit+0x64>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <HAL_COMP_MspInit+0x70>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <HAL_COMP_MspInit+0x70>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <HAL_COMP_MspInit+0x70>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PA1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017fa:	2302      	movs	r3, #2
 80017fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017fe:	2303      	movs	r3, #3
 8001800:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001806:	f107 030c 	add.w	r3, r7, #12
 800180a:	4619      	mov	r1, r3
 800180c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001810:	f002 fb9e 	bl	8003f50 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2100      	movs	r1, #0
 8001818:	2040      	movs	r0, #64	; 0x40
 800181a:	f002 f920 	bl	8003a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 800181e:	2040      	movs	r0, #64	; 0x40
 8001820:	f002 f937 	bl	8003a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8001824:	bf00      	nop
 8001826:	3720      	adds	r7, #32
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40010200 	.word	0x40010200
 8001830:	40021000 	.word	0x40021000

08001834 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a15      	ldr	r2, [pc, #84]	; (80018a8 <HAL_DAC_MspInit+0x74>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d124      	bne.n	80018a0 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_DAC_MspInit+0x78>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	4a14      	ldr	r2, [pc, #80]	; (80018ac <HAL_DAC_MspInit+0x78>)
 800185c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_DAC_MspInit+0x78>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <HAL_DAC_MspInit+0x78>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	4a0e      	ldr	r2, [pc, #56]	; (80018ac <HAL_DAC_MspInit+0x78>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_DAC_MspInit+0x78>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = Osc__1_Pin|Osc__2_Pin;
 8001886:	2330      	movs	r3, #48	; 0x30
 8001888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800188a:	2303      	movs	r3, #3
 800188c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189c:	f002 fb58 	bl	8003f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80018a0:	bf00      	nop
 80018a2:	3728      	adds	r7, #40	; 0x28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	50000800 	.word	0x50000800
 80018ac:	40021000 	.word	0x40021000

080018b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0d      	ldr	r2, [pc, #52]	; (80018f4 <HAL_TIM_Base_MspInit+0x44>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d113      	bne.n	80018ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80018c2:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <HAL_TIM_Base_MspInit+0x48>)
 80018c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c6:	4a0c      	ldr	r2, [pc, #48]	; (80018f8 <HAL_TIM_Base_MspInit+0x48>)
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018cc:	6613      	str	r3, [r2, #96]	; 0x60
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_TIM_Base_MspInit+0x48>)
 80018d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	2019      	movs	r0, #25
 80018e0:	f002 f8bd 	bl	8003a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80018e4:	2019      	movs	r0, #25
 80018e6:	f002 f8d4 	bl	8003a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40014400 	.word	0x40014400
 80018f8:	40021000 	.word	0x40021000

080018fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a17      	ldr	r2, [pc, #92]	; (8001978 <HAL_UART_MspInit+0x7c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d128      	bne.n	8001970 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800191e:	4b17      	ldr	r3, [pc, #92]	; (800197c <HAL_UART_MspInit+0x80>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001922:	4a16      	ldr	r2, [pc, #88]	; (800197c <HAL_UART_MspInit+0x80>)
 8001924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001928:	6593      	str	r3, [r2, #88]	; 0x58
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <HAL_UART_MspInit+0x80>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <HAL_UART_MspInit+0x80>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	4a10      	ldr	r2, [pc, #64]	; (800197c <HAL_UART_MspInit+0x80>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <HAL_UART_MspInit+0x80>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800194e:	230c      	movs	r3, #12
 8001950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800195e:	2307      	movs	r3, #7
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4619      	mov	r1, r3
 8001968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196c:	f002 faf0 	bl	8003f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001970:	bf00      	nop
 8001972:	3728      	adds	r7, #40	; 0x28
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40004400 	.word	0x40004400
 800197c:	40021000 	.word	0x40021000

08001980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <NMI_Handler+0x4>

08001986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <HardFault_Handler+0x4>

0800198c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <MemManage_Handler+0x4>

08001992 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <BusFault_Handler+0x4>

08001998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <UsageFault_Handler+0x4>

0800199e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019cc:	f000 f8c0 	bl	8001b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <ADC1_2_IRQHandler+0x10>)
 80019da:	f000 fe03 	bl	80025e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200020dc 	.word	0x200020dc

080019e8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80019ee:	f003 fce3 	bl	80053b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200021d8 	.word	0x200021d8

080019fc <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <COMP1_2_3_IRQHandler+0x10>)
 8001a02:	f001 ff05 	bl	8003810 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200020b8 	.word	0x200020b8

08001a10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <SystemInit+0x20>)
 8001a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a1a:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <SystemInit+0x20>)
 8001a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <HAL_TIM_PeriodElapsedCallback>:
 */

#include "tim.h"
#include "dac.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM16) {
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d101      	bne.n	8001a4a <HAL_TIM_PeriodElapsedCallback+0x16>
		render_waves();
 8001a46:	f7ff fb0b 	bl	8001060 <render_waves>
	}
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40014400 	.word	0x40014400

08001a58 <Reset_Handler>:
 8001a58:	480d      	ldr	r0, [pc, #52]	; (8001a90 <LoopForever+0x2>)
 8001a5a:	4685      	mov	sp, r0
 8001a5c:	480d      	ldr	r0, [pc, #52]	; (8001a94 <LoopForever+0x6>)
 8001a5e:	490e      	ldr	r1, [pc, #56]	; (8001a98 <LoopForever+0xa>)
 8001a60:	4a0e      	ldr	r2, [pc, #56]	; (8001a9c <LoopForever+0xe>)
 8001a62:	2300      	movs	r3, #0
 8001a64:	e002      	b.n	8001a6c <LoopCopyDataInit>

08001a66 <CopyDataInit>:
 8001a66:	58d4      	ldr	r4, [r2, r3]
 8001a68:	50c4      	str	r4, [r0, r3]
 8001a6a:	3304      	adds	r3, #4

08001a6c <LoopCopyDataInit>:
 8001a6c:	18c4      	adds	r4, r0, r3
 8001a6e:	428c      	cmp	r4, r1
 8001a70:	d3f9      	bcc.n	8001a66 <CopyDataInit>
 8001a72:	4a0b      	ldr	r2, [pc, #44]	; (8001aa0 <LoopForever+0x12>)
 8001a74:	4c0b      	ldr	r4, [pc, #44]	; (8001aa4 <LoopForever+0x16>)
 8001a76:	2300      	movs	r3, #0
 8001a78:	e001      	b.n	8001a7e <LoopFillZerobss>

08001a7a <FillZerobss>:
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	3204      	adds	r2, #4

08001a7e <LoopFillZerobss>:
 8001a7e:	42a2      	cmp	r2, r4
 8001a80:	d3fb      	bcc.n	8001a7a <FillZerobss>
 8001a82:	f7ff ffc5 	bl	8001a10 <SystemInit>
 8001a86:	f004 fc79 	bl	800637c <__libc_init_array>
 8001a8a:	f7ff fbdf 	bl	800124c <main>

08001a8e <LoopForever>:
 8001a8e:	e7fe      	b.n	8001a8e <LoopForever>
 8001a90:	20008000 	.word	0x20008000
 8001a94:	20000000 	.word	0x20000000
 8001a98:	20002084 	.word	0x20002084
 8001a9c:	08007480 	.word	0x08007480
 8001aa0:	20002084 	.word	0x20002084
 8001aa4:	20002228 	.word	0x20002228

08001aa8 <COMP4_IRQHandler>:
 8001aa8:	e7fe      	b.n	8001aa8 <COMP4_IRQHandler>

08001aaa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab4:	2003      	movs	r0, #3
 8001ab6:	f001 ffc7 	bl	8003a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aba:	2000      	movs	r0, #0
 8001abc:	f000 f80e 	bl	8001adc <HAL_InitTick>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d002      	beq.n	8001acc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	71fb      	strb	r3, [r7, #7]
 8001aca:	e001      	b.n	8001ad0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001acc:	f7ff fe10 	bl	80016f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ad0:	79fb      	ldrb	r3, [r7, #7]

}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ae8:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <HAL_InitTick+0x68>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d022      	beq.n	8001b36 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <HAL_InitTick+0x6c>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <HAL_InitTick+0x68>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001afc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b04:	4618      	mov	r0, r3
 8001b06:	f001 ffd2 	bl	8003aae <HAL_SYSTICK_Config>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10f      	bne.n	8001b30 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b0f      	cmp	r3, #15
 8001b14:	d809      	bhi.n	8001b2a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b16:	2200      	movs	r2, #0
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b1e:	f001 ff9e 	bl	8003a5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b22:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <HAL_InitTick+0x70>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	e007      	b.n	8001b3a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	73fb      	strb	r3, [r7, #15]
 8001b2e:	e004      	b.n	8001b3a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
 8001b34:	e001      	b.n	8001b3a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20002018 	.word	0x20002018
 8001b48:	20002010 	.word	0x20002010
 8001b4c:	20002014 	.word	0x20002014

08001b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_IncTick+0x1c>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_IncTick+0x20>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	4a03      	ldr	r2, [pc, #12]	; (8001b6c <HAL_IncTick+0x1c>)
 8001b60:	6013      	str	r3, [r2, #0]
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	20002224 	.word	0x20002224
 8001b70:	20002018 	.word	0x20002018

08001b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return uwTick;
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <HAL_GetTick+0x14>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20002224 	.word	0x20002224

08001b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b94:	f7ff ffee 	bl	8001b74 <HAL_GetTick>
 8001b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba4:	d004      	beq.n	8001bb0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_Delay+0x40>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	4413      	add	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bb0:	bf00      	nop
 8001bb2:	f7ff ffdf 	bl	8001b74 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d8f7      	bhi.n	8001bb2 <HAL_Delay+0x26>
  {
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20002018 	.word	0x20002018

08001bd0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	609a      	str	r2, [r3, #8]
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3360      	adds	r3, #96	; 0x60
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <LL_ADC_SetOffset+0x44>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	4313      	orrs	r3, r2
 8001c68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c70:	bf00      	nop
 8001c72:	371c      	adds	r7, #28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	03fff000 	.word	0x03fff000

08001c80 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3360      	adds	r3, #96	; 0x60
 8001c8e:	461a      	mov	r2, r3
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3360      	adds	r3, #96	; 0x60
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001cd6:	bf00      	nop
 8001cd8:	371c      	adds	r7, #28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b087      	sub	sp, #28
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3360      	adds	r3, #96	; 0x60
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	431a      	orrs	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001d0c:	bf00      	nop
 8001d0e:	371c      	adds	r7, #28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b087      	sub	sp, #28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	3360      	adds	r3, #96	; 0x60
 8001d28:	461a      	mov	r2, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001d42:	bf00      	nop
 8001d44:	371c      	adds	r7, #28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	615a      	str	r2, [r3, #20]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b087      	sub	sp, #28
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3330      	adds	r3, #48	; 0x30
 8001daa:	461a      	mov	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	4413      	add	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	f003 031f 	and.w	r3, r3, #31
 8001dc4:	211f      	movs	r1, #31
 8001dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	401a      	ands	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	0e9b      	lsrs	r3, r3, #26
 8001dd2:	f003 011f 	and.w	r1, r3, #31
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8001de0:	431a      	orrs	r2, r3
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001de6:	bf00      	nop
 8001de8:	371c      	adds	r7, #28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfe:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3314      	adds	r3, #20
 8001e28:	461a      	mov	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	0e5b      	lsrs	r3, r3, #25
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	4413      	add	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	0d1b      	lsrs	r3, r3, #20
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	2107      	movs	r1, #7
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	401a      	ands	r2, r3
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	0d1b      	lsrs	r3, r3, #20
 8001e52:	f003 031f 	and.w	r3, r3, #31
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e62:	bf00      	nop
 8001e64:	371c      	adds	r7, #28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f003 0318 	and.w	r3, r3, #24
 8001e92:	4908      	ldr	r1, [pc, #32]	; (8001eb4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e94:	40d9      	lsrs	r1, r3
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	400b      	ands	r3, r1
 8001e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	0007ffff 	.word	0x0007ffff

08001eb8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 031f 	and.w	r3, r3, #31
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6093      	str	r3, [r2, #8]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f28:	d101      	bne.n	8001f2e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f78:	d101      	bne.n	8001f7e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fa0:	f043 0201 	orr.w	r2, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <LL_ADC_IsEnabled+0x18>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <LL_ADC_IsEnabled+0x1a>
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fee:	f043 0204 	orr.w	r2, r3, #4
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	2b04      	cmp	r3, #4
 8002014:	d101      	bne.n	800201a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b08      	cmp	r3, #8
 800203a:	d101      	bne.n	8002040 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800203c:	2301      	movs	r3, #1
 800203e:	e000      	b.n	8002042 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002050:	b590      	push	{r4, r7, lr}
 8002052:	b089      	sub	sp, #36	; 0x24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800205c:	2300      	movs	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e16d      	b.n	8002346 <HAL_ADC_Init+0x2f6>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002074:	2b00      	cmp	r3, #0
 8002076:	d109      	bne.n	800208c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff fb5d 	bl	8001738 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff3f 	bl	8001f14 <LL_ADC_IsDeepPowerDownEnabled>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d004      	beq.n	80020a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff25 	bl	8001ef0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ff5a 	bl	8001f64 <LL_ADC_IsInternalRegulatorEnabled>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d115      	bne.n	80020e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff ff3e 	bl	8001f3c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020c0:	4ba3      	ldr	r3, [pc, #652]	; (8002350 <HAL_ADC_Init+0x300>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	099b      	lsrs	r3, r3, #6
 80020c6:	4aa3      	ldr	r2, [pc, #652]	; (8002354 <HAL_ADC_Init+0x304>)
 80020c8:	fba2 2303 	umull	r2, r3, r2, r3
 80020cc:	099b      	lsrs	r3, r3, #6
 80020ce:	3301      	adds	r3, #1
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020d4:	e002      	b.n	80020dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	3b01      	subs	r3, #1
 80020da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f9      	bne.n	80020d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff ff3c 	bl	8001f64 <LL_ADC_IsInternalRegulatorEnabled>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10d      	bne.n	800210e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f6:	f043 0210 	orr.w	r2, r3, #16
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002102:	f043 0201 	orr.w	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff ff75 	bl	8002002 <LL_ADC_REG_IsConversionOngoing>
 8002118:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	2b00      	cmp	r3, #0
 8002124:	f040 8106 	bne.w	8002334 <HAL_ADC_Init+0x2e4>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	2b00      	cmp	r3, #0
 800212c:	f040 8102 	bne.w	8002334 <HAL_ADC_Init+0x2e4>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002138:	f043 0202 	orr.w	r2, r3, #2
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff35 	bl	8001fb4 <LL_ADC_IsEnabled>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d111      	bne.n	8002174 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002150:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002154:	f7ff ff2e 	bl	8001fb4 <LL_ADC_IsEnabled>
 8002158:	4604      	mov	r4, r0
 800215a:	487f      	ldr	r0, [pc, #508]	; (8002358 <HAL_ADC_Init+0x308>)
 800215c:	f7ff ff2a 	bl	8001fb4 <LL_ADC_IsEnabled>
 8002160:	4603      	mov	r3, r0
 8002162:	4323      	orrs	r3, r4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d105      	bne.n	8002174 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4619      	mov	r1, r3
 800216e:	487b      	ldr	r0, [pc, #492]	; (800235c <HAL_ADC_Init+0x30c>)
 8002170:	f7ff fd2e 	bl	8001bd0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7f5b      	ldrb	r3, [r3, #29]
 8002178:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800217e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002184:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800218a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002192:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d106      	bne.n	80021b0 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	3b01      	subs	r3, #1
 80021a8:	045b      	lsls	r3, r3, #17
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d009      	beq.n	80021cc <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	4b63      	ldr	r3, [pc, #396]	; (8002360 <HAL_ADC_Init+0x310>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	69b9      	ldr	r1, [r7, #24]
 80021dc:	430b      	orrs	r3, r1
 80021de:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff ff01 	bl	8002002 <LL_ADC_REG_IsConversionOngoing>
 8002200:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ff0e 	bl	8002028 <LL_ADC_INJ_IsConversionOngoing>
 800220c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d16d      	bne.n	80022f0 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d16a      	bne.n	80022f0 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800221e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002226:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002236:	f023 0302 	bic.w	r3, r3, #2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	69b9      	ldr	r1, [r7, #24]
 8002240:	430b      	orrs	r3, r1
 8002242:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d017      	beq.n	800227c <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691a      	ldr	r2, [r3, #16]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800225a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002264:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002268:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6911      	ldr	r1, [r2, #16]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	430b      	orrs	r3, r1
 8002276:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800227a:	e013      	b.n	80022a4 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691a      	ldr	r2, [r3, #16]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800228a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800229c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022a0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d118      	bne.n	80022e0 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80022b8:	f023 0304 	bic.w	r3, r3, #4
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022c4:	4311      	orrs	r1, r2
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80022ca:	4311      	orrs	r1, r2
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022d0:	430a      	orrs	r2, r1
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0201 	orr.w	r2, r2, #1
 80022dc:	611a      	str	r2, [r3, #16]
 80022de:	e007      	b.n	80022f0 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691a      	ldr	r2, [r3, #16]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0201 	bic.w	r2, r2, #1
 80022ee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d10c      	bne.n	8002312 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f023 010f 	bic.w	r1, r3, #15
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	1e5a      	subs	r2, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	631a      	str	r2, [r3, #48]	; 0x30
 8002310:	e007      	b.n	8002322 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 020f 	bic.w	r2, r2, #15
 8002320:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	f023 0303 	bic.w	r3, r3, #3
 800232a:	f043 0201 	orr.w	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	65da      	str	r2, [r3, #92]	; 0x5c
 8002332:	e007      	b.n	8002344 <HAL_ADC_Init+0x2f4>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002338:	f043 0210 	orr.w	r2, r3, #16
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002344:	7ffb      	ldrb	r3, [r7, #31]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3724      	adds	r7, #36	; 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd90      	pop	{r4, r7, pc}
 800234e:	bf00      	nop
 8002350:	20002010 	.word	0x20002010
 8002354:	053e2d63 	.word	0x053e2d63
 8002358:	50000100 	.word	0x50000100
 800235c:	50000300 	.word	0x50000300
 8002360:	fff04007 	.word	0xfff04007

08002364 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800236c:	4894      	ldr	r0, [pc, #592]	; (80025c0 <HAL_ADC_Start_IT+0x25c>)
 800236e:	f7ff fda3 	bl	8001eb8 <LL_ADC_GetMultimode>
 8002372:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fe42 	bl	8002002 <LL_ADC_REG_IsConversionOngoing>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	f040 8114 	bne.w	80025ae <HAL_ADC_Start_IT+0x24a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_ADC_Start_IT+0x30>
 8002390:	2302      	movs	r3, #2
 8002392:	e111      	b.n	80025b8 <HAL_ADC_Start_IT+0x254>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 ff3f 	bl	8003220 <ADC_Enable>
 80023a2:	4603      	mov	r3, r0
 80023a4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023a6:	7dfb      	ldrb	r3, [r7, #23]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f040 80fb 	bne.w	80025a4 <HAL_ADC_Start_IT+0x240>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023b6:	f023 0301 	bic.w	r3, r3, #1
 80023ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a7f      	ldr	r2, [pc, #508]	; (80025c4 <HAL_ADC_Start_IT+0x260>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d002      	beq.n	80023d2 <HAL_ADC_Start_IT+0x6e>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	e001      	b.n	80023d6 <HAL_ADC_Start_IT+0x72>
 80023d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	4293      	cmp	r3, r2
 80023dc:	d002      	beq.n	80023e4 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d105      	bne.n	80023f0 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d006      	beq.n	800240a <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002400:	f023 0206 	bic.w	r2, r3, #6
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	661a      	str	r2, [r3, #96]	; 0x60
 8002408:	e002      	b.n	8002410 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	221c      	movs	r2, #28
 8002416:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 021c 	bic.w	r2, r2, #28
 800242e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	2b08      	cmp	r3, #8
 8002436:	d108      	bne.n	800244a <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0208 	orr.w	r2, r2, #8
 8002446:	605a      	str	r2, [r3, #4]
          break;
 8002448:	e008      	b.n	800245c <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 0204 	orr.w	r2, r2, #4
 8002458:	605a      	str	r2, [r3, #4]
          break;
 800245a:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002460:	2b00      	cmp	r3, #0
 8002462:	d107      	bne.n	8002474 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0210 	orr.w	r2, r2, #16
 8002472:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a52      	ldr	r2, [pc, #328]	; (80025c4 <HAL_ADC_Start_IT+0x260>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d002      	beq.n	8002484 <HAL_ADC_Start_IT+0x120>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	e001      	b.n	8002488 <HAL_ADC_Start_IT+0x124>
 8002484:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	4293      	cmp	r3, r2
 800248e:	d008      	beq.n	80024a2 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d005      	beq.n	80024a2 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b05      	cmp	r3, #5
 800249a:	d002      	beq.n	80024a2 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	2b09      	cmp	r3, #9
 80024a0:	d13b      	bne.n	800251a <HAL_ADC_Start_IT+0x1b6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d02d      	beq.n	800250c <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d110      	bne.n	80024ea <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0220 	bic.w	r2, r2, #32
 80024d6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024e6:	605a      	str	r2, [r3, #4]
              break;
 80024e8:	e011      	b.n	800250e <HAL_ADC_Start_IT+0x1aa>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024f8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 0220 	orr.w	r2, r2, #32
 8002508:	605a      	str	r2, [r3, #4]
              break;
 800250a:	e000      	b.n	800250e <HAL_ADC_Start_IT+0x1aa>
          }
        }
 800250c:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fd61 	bl	8001fda <LL_ADC_REG_StartConversion>
 8002518:	e04d      	b.n	80025b6 <HAL_ADC_Start_IT+0x252>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a26      	ldr	r2, [pc, #152]	; (80025c4 <HAL_ADC_Start_IT+0x260>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d002      	beq.n	8002536 <HAL_ADC_Start_IT+0x1d2>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	e001      	b.n	800253a <HAL_ADC_Start_IT+0x1d6>
 8002536:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800253a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d035      	beq.n	80025b4 <HAL_ADC_Start_IT+0x250>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002550:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	2b08      	cmp	r3, #8
 800255e:	d110      	bne.n	8002582 <HAL_ADC_Start_IT+0x21e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0220 	bic.w	r2, r2, #32
 800256e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800257e:	605a      	str	r2, [r3, #4]
              break;
 8002580:	e019      	b.n	80025b6 <HAL_ADC_Start_IT+0x252>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002590:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f042 0220 	orr.w	r2, r2, #32
 80025a0:	605a      	str	r2, [r3, #4]
              break;
 80025a2:	e008      	b.n	80025b6 <HAL_ADC_Start_IT+0x252>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80025ac:	e003      	b.n	80025b6 <HAL_ADC_Start_IT+0x252>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025ae:	2302      	movs	r3, #2
 80025b0:	75fb      	strb	r3, [r7, #23]
 80025b2:	e000      	b.n	80025b6 <HAL_ADC_Start_IT+0x252>
        }
 80025b4:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80025b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	50000300 	.word	0x50000300
 80025c4:	50000100 	.word	0x50000100

080025c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08a      	sub	sp, #40	; 0x28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80025ec:	2300      	movs	r3, #0
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002600:	4883      	ldr	r0, [pc, #524]	; (8002810 <HAL_ADC_IRQHandler+0x22c>)
 8002602:	f7ff fc59 	bl	8001eb8 <LL_ADC_GetMultimode>
 8002606:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d017      	beq.n	8002642 <HAL_ADC_IRQHandler+0x5e>
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d012      	beq.n	8002642 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b00      	cmp	r3, #0
 8002626:	d105      	bne.n	8002634 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 fea3 	bl	8003380 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2202      	movs	r2, #2
 8002640:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d004      	beq.n	8002656 <HAL_ADC_IRQHandler+0x72>
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10a      	bne.n	800266c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8085 	beq.w	800276c <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b00      	cmp	r3, #0
 800266a:	d07f      	beq.n	800276c <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002670:	f003 0310 	and.w	r3, r3, #16
 8002674:	2b00      	cmp	r3, #0
 8002676:	d105      	bne.n	8002684 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fb73 	bl	8001d74 <LL_ADC_REG_IsTriggerSourceSWStart>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d064      	beq.n	800275e <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a5e      	ldr	r2, [pc, #376]	; (8002814 <HAL_ADC_IRQHandler+0x230>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d002      	beq.n	80026a4 <HAL_ADC_IRQHandler+0xc0>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	e001      	b.n	80026a8 <HAL_ADC_IRQHandler+0xc4>
 80026a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d008      	beq.n	80026c2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2b05      	cmp	r3, #5
 80026ba:	d002      	beq.n	80026c2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2b09      	cmp	r3, #9
 80026c0:	d104      	bne.n	80026cc <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	623b      	str	r3, [r7, #32]
 80026ca:	e00d      	b.n	80026e8 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a50      	ldr	r2, [pc, #320]	; (8002814 <HAL_ADC_IRQHandler+0x230>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d002      	beq.n	80026dc <HAL_ADC_IRQHandler+0xf8>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	e001      	b.n	80026e0 <HAL_ADC_IRQHandler+0xfc>
 80026dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026e0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d135      	bne.n	800275e <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d12e      	bne.n	800275e <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff fc7c 	bl	8002002 <LL_ADC_REG_IsConversionOngoing>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d11a      	bne.n	8002746 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 020c 	bic.w	r2, r2, #12
 800271e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002724:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d112      	bne.n	800275e <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273c:	f043 0201 	orr.w	r2, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	65da      	str	r2, [r3, #92]	; 0x5c
 8002744:	e00b      	b.n	800275e <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274a:	f043 0210 	orr.w	r2, r3, #16
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002756:	f043 0201 	orr.w	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fe fbb2 	bl	8000ec8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	220c      	movs	r2, #12
 800276a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b00      	cmp	r3, #0
 8002774:	d004      	beq.n	8002780 <HAL_ADC_IRQHandler+0x19c>
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10b      	bne.n	8002798 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 809e 	beq.w	80028c8 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 8098 	beq.w	80028c8 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d105      	bne.n	80027b0 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fb1c 	bl	8001df2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80027ba:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fad7 	bl	8001d74 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027c6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a11      	ldr	r2, [pc, #68]	; (8002814 <HAL_ADC_IRQHandler+0x230>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d002      	beq.n	80027d8 <HAL_ADC_IRQHandler+0x1f4>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	e001      	b.n	80027dc <HAL_ADC_IRQHandler+0x1f8>
 80027d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d008      	beq.n	80027f6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d005      	beq.n	80027f6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2b06      	cmp	r3, #6
 80027ee:	d002      	beq.n	80027f6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2b07      	cmp	r3, #7
 80027f4:	d104      	bne.n	8002800 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	623b      	str	r3, [r7, #32]
 80027fe:	e011      	b.n	8002824 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a03      	ldr	r2, [pc, #12]	; (8002814 <HAL_ADC_IRQHandler+0x230>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d006      	beq.n	8002818 <HAL_ADC_IRQHandler+0x234>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	e005      	b.n	800281c <HAL_ADC_IRQHandler+0x238>
 8002810:	50000300 	.word	0x50000300
 8002814:	50000100 	.word	0x50000100
 8002818:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800281c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d047      	beq.n	80028ba <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d007      	beq.n	8002844 <HAL_ADC_IRQHandler+0x260>
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d03f      	beq.n	80028ba <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002840:	2b00      	cmp	r3, #0
 8002842:	d13a      	bne.n	80028ba <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284e:	2b40      	cmp	r3, #64	; 0x40
 8002850:	d133      	bne.n	80028ba <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d12e      	bne.n	80028ba <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fbe1 	bl	8002028 <LL_ADC_INJ_IsConversionOngoing>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d11a      	bne.n	80028a2 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800287a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002880:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002890:	2b00      	cmp	r3, #0
 8002892:	d112      	bne.n	80028ba <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002898:	f043 0201 	orr.w	r2, r3, #1
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	65da      	str	r2, [r3, #92]	; 0x5c
 80028a0:	e00b      	b.n	80028ba <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a6:	f043 0210 	orr.w	r2, r3, #16
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b2:	f043 0201 	orr.w	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fd38 	bl	8003330 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2260      	movs	r2, #96	; 0x60
 80028c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d011      	beq.n	80028f6 <HAL_ADC_IRQHandler+0x312>
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00c      	beq.n	80028f6 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f895 	bl	8002a18 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2280      	movs	r2, #128	; 0x80
 80028f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d012      	beq.n	8002926 <HAL_ADC_IRQHandler+0x342>
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00d      	beq.n	8002926 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 fd1e 	bl	8003358 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002924:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800292c:	2b00      	cmp	r3, #0
 800292e:	d012      	beq.n	8002956 <HAL_ADC_IRQHandler+0x372>
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00d      	beq.n	8002956 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 fd10 	bl	800336c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002954:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b00      	cmp	r3, #0
 800295e:	d036      	beq.n	80029ce <HAL_ADC_IRQHandler+0x3ea>
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	2b00      	cmp	r3, #0
 8002968:	d031      	beq.n	80029ce <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296e:	2b00      	cmp	r3, #0
 8002970:	d102      	bne.n	8002978 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8002972:	2301      	movs	r3, #1
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
 8002976:	e014      	b.n	80029a2 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d008      	beq.n	8002990 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800297e:	4825      	ldr	r0, [pc, #148]	; (8002a14 <HAL_ADC_IRQHandler+0x430>)
 8002980:	f7ff faa8 	bl	8001ed4 <LL_ADC_GetMultiDMATransfer>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00b      	beq.n	80029a2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800298a:	2301      	movs	r3, #1
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
 800298e:	e008      	b.n	80029a2 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800299e:	2301      	movs	r3, #1
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d10e      	bne.n	80029c6 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b8:	f043 0202 	orr.w	r2, r3, #2
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f833 	bl	8002a2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2210      	movs	r2, #16
 80029cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d018      	beq.n	8002a0a <HAL_ADC_IRQHandler+0x426>
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d013      	beq.n	8002a0a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f2:	f043 0208 	orr.w	r2, r3, #8
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a02:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fc9d 	bl	8003344 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002a0a:	bf00      	nop
 8002a0c:	3728      	adds	r7, #40	; 0x28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	50000300 	.word	0x50000300

08002a18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b0b6      	sub	sp, #216	; 0xd8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x22>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e3c8      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x7b4>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff fac7 	bl	8002002 <LL_ADC_REG_IsConversionOngoing>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f040 83ad 	bne.w	80031d6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6818      	ldr	r0, [r3, #0]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	6859      	ldr	r1, [r3, #4]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	f7ff f986 	bl	8001d9a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff fab5 	bl	8002002 <LL_ADC_REG_IsConversionOngoing>
 8002a98:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fac1 	bl	8002028 <LL_ADC_INJ_IsConversionOngoing>
 8002aa6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002aaa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f040 81d9 	bne.w	8002e66 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ab4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f040 81d4 	bne.w	8002e66 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ac6:	d10f      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6818      	ldr	r0, [r3, #0]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	f7ff f9a0 	bl	8001e18 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff f934 	bl	8001d4e <LL_ADC_SetSamplingTimeCommonConfig>
 8002ae6:	e00e      	b.n	8002b06 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	6819      	ldr	r1, [r3, #0]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	461a      	mov	r2, r3
 8002af6:	f7ff f98f 	bl	8001e18 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2100      	movs	r1, #0
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff f924 	bl	8001d4e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	08db      	lsrs	r3, r3, #3
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d022      	beq.n	8002b6e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	6919      	ldr	r1, [r3, #16]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b38:	f7ff f87e 	bl	8001c38 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	6919      	ldr	r1, [r3, #16]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	f7ff f8ca 	bl	8001ce2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6919      	ldr	r1, [r3, #16]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	7f1b      	ldrb	r3, [r3, #28]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d102      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x124>
 8002b5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b62:	e000      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x126>
 8002b64:	2300      	movs	r3, #0
 8002b66:	461a      	mov	r2, r3
 8002b68:	f7ff f8d6 	bl	8001d18 <LL_ADC_SetOffsetSaturation>
 8002b6c:	e17b      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2100      	movs	r1, #0
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff f883 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10a      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x15a>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff f878 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002b90:	4603      	mov	r3, r0
 8002b92:	0e9b      	lsrs	r3, r3, #26
 8002b94:	f003 021f 	and.w	r2, r3, #31
 8002b98:	e01e      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x198>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff f86d 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002bb0:	fa93 f3a3 	rbit	r3, r3
 8002bb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002bc8:	2320      	movs	r3, #32
 8002bca:	e004      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002bcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bd0:	fab3 f383 	clz	r3, r3
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d105      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x1b0>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	0e9b      	lsrs	r3, r3, #26
 8002bea:	f003 031f 	and.w	r3, r3, #31
 8002bee:	e018      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x1e2>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002bfc:	fa93 f3a3 	rbit	r3, r3
 8002c00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002c04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002c0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002c14:	2320      	movs	r3, #32
 8002c16:	e004      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002c18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c1c:	fab3 f383 	clz	r3, r3
 8002c20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d106      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff f83c 	bl	8001cac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2101      	movs	r1, #1
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff f820 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002c40:	4603      	mov	r3, r0
 8002c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10a      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x220>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2101      	movs	r1, #1
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff f815 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002c56:	4603      	mov	r3, r0
 8002c58:	0e9b      	lsrs	r3, r3, #26
 8002c5a:	f003 021f 	and.w	r2, r3, #31
 8002c5e:	e01e      	b.n	8002c9e <HAL_ADC_ConfigChannel+0x25e>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2101      	movs	r1, #1
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff f80a 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002c7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002c86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002c8e:	2320      	movs	r3, #32
 8002c90:	e004      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002c92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c96:	fab3 f383 	clz	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d105      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x276>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	0e9b      	lsrs	r3, r3, #26
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	e018      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x2a8>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cc2:	fa93 f3a3 	rbit	r3, r3
 8002cc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002cca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002cce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002cd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002cda:	2320      	movs	r3, #32
 8002cdc:	e004      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002cde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ce2:	fab3 f383 	clz	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d106      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fe ffd9 	bl	8001cac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2102      	movs	r1, #2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fe ffbd 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10a      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x2e6>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2102      	movs	r1, #2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fe ffb2 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	0e9b      	lsrs	r3, r3, #26
 8002d20:	f003 021f 	and.w	r2, r3, #31
 8002d24:	e01e      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x324>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2102      	movs	r1, #2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fe ffa7 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002d32:	4603      	mov	r3, r0
 8002d34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d3c:	fa93 f3a3 	rbit	r3, r3
 8002d40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002d54:	2320      	movs	r3, #32
 8002d56:	e004      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002d58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d5c:	fab3 f383 	clz	r3, r3
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d105      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x33c>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	0e9b      	lsrs	r3, r3, #26
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	e016      	b.n	8002daa <HAL_ADC_ConfigChannel+0x36a>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d88:	fa93 f3a3 	rbit	r3, r3
 8002d8c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002d8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002d9c:	2320      	movs	r3, #32
 8002d9e:	e004      	b.n	8002daa <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002da0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002da4:	fab3 f383 	clz	r3, r3
 8002da8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d106      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2200      	movs	r2, #0
 8002db4:	2102      	movs	r1, #2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fe ff78 	bl	8001cac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2103      	movs	r1, #3
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe ff5c 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10a      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x3a8>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2103      	movs	r1, #3
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe ff51 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002dde:	4603      	mov	r3, r0
 8002de0:	0e9b      	lsrs	r3, r3, #26
 8002de2:	f003 021f 	and.w	r2, r3, #31
 8002de6:	e017      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x3d8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2103      	movs	r1, #3
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe ff46 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002df4:	4603      	mov	r3, r0
 8002df6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002e00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e02:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002e0a:	2320      	movs	r3, #32
 8002e0c:	e003      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002e0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e10:	fab3 f383 	clz	r3, r3
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d105      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x3f0>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	0e9b      	lsrs	r3, r3, #26
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	e011      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x414>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e38:	fa93 f3a3 	rbit	r3, r3
 8002e3c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e40:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002e48:	2320      	movs	r3, #32
 8002e4a:	e003      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e4e:	fab3 f383 	clz	r3, r3
 8002e52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d106      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2103      	movs	r1, #3
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fe ff23 	bl	8001cac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff f8a2 	bl	8001fb4 <LL_ADC_IsEnabled>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f040 8140 	bne.w	80030f8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6818      	ldr	r0, [r3, #0]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6819      	ldr	r1, [r3, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	461a      	mov	r2, r3
 8002e86:	f7fe fff3 	bl	8001e70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	4a8f      	ldr	r2, [pc, #572]	; (80030cc <HAL_ADC_ConfigChannel+0x68c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	f040 8131 	bne.w	80030f8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10b      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x47e>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	0e9b      	lsrs	r3, r3, #26
 8002eac:	3301      	adds	r3, #1
 8002eae:	f003 031f 	and.w	r3, r3, #31
 8002eb2:	2b09      	cmp	r3, #9
 8002eb4:	bf94      	ite	ls
 8002eb6:	2301      	movls	r3, #1
 8002eb8:	2300      	movhi	r3, #0
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	e019      	b.n	8002ef2 <HAL_ADC_ConfigChannel+0x4b2>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ec6:	fa93 f3a3 	rbit	r3, r3
 8002eca:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ecc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ece:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ed0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002ed6:	2320      	movs	r3, #32
 8002ed8:	e003      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002edc:	fab3 f383 	clz	r3, r3
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	2b09      	cmp	r3, #9
 8002eea:	bf94      	ite	ls
 8002eec:	2301      	movls	r3, #1
 8002eee:	2300      	movhi	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d079      	beq.n	8002fea <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d107      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x4d2>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	0e9b      	lsrs	r3, r3, #26
 8002f08:	3301      	adds	r3, #1
 8002f0a:	069b      	lsls	r3, r3, #26
 8002f0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f10:	e015      	b.n	8002f3e <HAL_ADC_ConfigChannel+0x4fe>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f22:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002f2a:	2320      	movs	r3, #32
 8002f2c:	e003      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f30:	fab3 f383 	clz	r3, r3
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	3301      	adds	r3, #1
 8002f38:	069b      	lsls	r3, r3, #26
 8002f3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x51e>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	0e9b      	lsrs	r3, r3, #26
 8002f50:	3301      	adds	r3, #1
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	2101      	movs	r1, #1
 8002f58:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5c:	e017      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x54e>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f6e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002f76:	2320      	movs	r3, #32
 8002f78:	e003      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f7c:	fab3 f383 	clz	r3, r3
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	3301      	adds	r3, #1
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	2101      	movs	r1, #1
 8002f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8e:	ea42 0103 	orr.w	r1, r2, r3
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10a      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x574>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	0e9b      	lsrs	r3, r3, #26
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	f003 021f 	and.w	r2, r3, #31
 8002faa:	4613      	mov	r3, r2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	4413      	add	r3, r2
 8002fb0:	051b      	lsls	r3, r3, #20
 8002fb2:	e018      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x5a6>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbc:	fa93 f3a3 	rbit	r3, r3
 8002fc0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002fcc:	2320      	movs	r3, #32
 8002fce:	e003      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	3301      	adds	r3, #1
 8002fda:	f003 021f 	and.w	r2, r3, #31
 8002fde:	4613      	mov	r3, r2
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	4413      	add	r3, r2
 8002fe4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	e081      	b.n	80030ee <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d107      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x5c6>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	0e9b      	lsrs	r3, r3, #26
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	069b      	lsls	r3, r3, #26
 8003000:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003004:	e015      	b.n	8003032 <HAL_ADC_ConfigChannel+0x5f2>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300e:	fa93 f3a3 	rbit	r3, r3
 8003012:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003016:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800301e:	2320      	movs	r3, #32
 8003020:	e003      	b.n	800302a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003024:	fab3 f383 	clz	r3, r3
 8003028:	b2db      	uxtb	r3, r3
 800302a:	3301      	adds	r3, #1
 800302c:	069b      	lsls	r3, r3, #26
 800302e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x612>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	0e9b      	lsrs	r3, r3, #26
 8003044:	3301      	adds	r3, #1
 8003046:	f003 031f 	and.w	r3, r3, #31
 800304a:	2101      	movs	r1, #1
 800304c:	fa01 f303 	lsl.w	r3, r1, r3
 8003050:	e017      	b.n	8003082 <HAL_ADC_ConfigChannel+0x642>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	fa93 f3a3 	rbit	r3, r3
 800305e:	61fb      	str	r3, [r7, #28]
  return result;
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800306a:	2320      	movs	r3, #32
 800306c:	e003      	b.n	8003076 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	fab3 f383 	clz	r3, r3
 8003074:	b2db      	uxtb	r3, r3
 8003076:	3301      	adds	r3, #1
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	2101      	movs	r1, #1
 800307e:	fa01 f303 	lsl.w	r3, r1, r3
 8003082:	ea42 0103 	orr.w	r1, r2, r3
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10d      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x66e>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	0e9b      	lsrs	r3, r3, #26
 8003098:	3301      	adds	r3, #1
 800309a:	f003 021f 	and.w	r2, r3, #31
 800309e:	4613      	mov	r3, r2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	4413      	add	r3, r2
 80030a4:	3b1e      	subs	r3, #30
 80030a6:	051b      	lsls	r3, r3, #20
 80030a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030ac:	e01e      	b.n	80030ec <HAL_ADC_ConfigChannel+0x6ac>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	fa93 f3a3 	rbit	r3, r3
 80030ba:	613b      	str	r3, [r7, #16]
  return result;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d104      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80030c6:	2320      	movs	r3, #32
 80030c8:	e006      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x698>
 80030ca:	bf00      	nop
 80030cc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	fab3 f383 	clz	r3, r3
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	3301      	adds	r3, #1
 80030da:	f003 021f 	and.w	r2, r3, #31
 80030de:	4613      	mov	r3, r2
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4413      	add	r3, r2
 80030e4:	3b1e      	subs	r3, #30
 80030e6:	051b      	lsls	r3, r3, #20
 80030e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030ec:	430b      	orrs	r3, r1
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	6892      	ldr	r2, [r2, #8]
 80030f2:	4619      	mov	r1, r3
 80030f4:	f7fe fe90 	bl	8001e18 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4b3f      	ldr	r3, [pc, #252]	; (80031fc <HAL_ADC_ConfigChannel+0x7bc>)
 80030fe:	4013      	ands	r3, r2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d071      	beq.n	80031e8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003104:	483e      	ldr	r0, [pc, #248]	; (8003200 <HAL_ADC_ConfigChannel+0x7c0>)
 8003106:	f7fe fd89 	bl	8001c1c <LL_ADC_GetCommonPathInternalCh>
 800310a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a3c      	ldr	r2, [pc, #240]	; (8003204 <HAL_ADC_ConfigChannel+0x7c4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d004      	beq.n	8003122 <HAL_ADC_ConfigChannel+0x6e2>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a3a      	ldr	r2, [pc, #232]	; (8003208 <HAL_ADC_ConfigChannel+0x7c8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d127      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003122:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003126:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d121      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003136:	d157      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003138:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800313c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003140:	4619      	mov	r1, r3
 8003142:	482f      	ldr	r0, [pc, #188]	; (8003200 <HAL_ADC_ConfigChannel+0x7c0>)
 8003144:	f7fe fd57 	bl	8001bf6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003148:	4b30      	ldr	r3, [pc, #192]	; (800320c <HAL_ADC_ConfigChannel+0x7cc>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	099b      	lsrs	r3, r3, #6
 800314e:	4a30      	ldr	r2, [pc, #192]	; (8003210 <HAL_ADC_ConfigChannel+0x7d0>)
 8003150:	fba2 2303 	umull	r2, r3, r2, r3
 8003154:	099b      	lsrs	r3, r3, #6
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	4613      	mov	r3, r2
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003162:	e002      	b.n	800316a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	3b01      	subs	r3, #1
 8003168:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f9      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003170:	e03a      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a27      	ldr	r2, [pc, #156]	; (8003214 <HAL_ADC_ConfigChannel+0x7d4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d113      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x764>
 800317c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10d      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a22      	ldr	r2, [pc, #136]	; (8003218 <HAL_ADC_ConfigChannel+0x7d8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d02a      	beq.n	80031e8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003192:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800319a:	4619      	mov	r1, r3
 800319c:	4818      	ldr	r0, [pc, #96]	; (8003200 <HAL_ADC_ConfigChannel+0x7c0>)
 800319e:	f7fe fd2a 	bl	8001bf6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031a2:	e021      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a1c      	ldr	r2, [pc, #112]	; (800321c <HAL_ADC_ConfigChannel+0x7dc>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d11c      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d116      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a16      	ldr	r2, [pc, #88]	; (8003218 <HAL_ADC_ConfigChannel+0x7d8>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d011      	beq.n	80031e8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031cc:	4619      	mov	r1, r3
 80031ce:	480c      	ldr	r0, [pc, #48]	; (8003200 <HAL_ADC_ConfigChannel+0x7c0>)
 80031d0:	f7fe fd11 	bl	8001bf6 <LL_ADC_SetCommonPathInternalCh>
 80031d4:	e008      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031da:	f043 0220 	orr.w	r2, r3, #32
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80031f0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	37d8      	adds	r7, #216	; 0xd8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	80080000 	.word	0x80080000
 8003200:	50000300 	.word	0x50000300
 8003204:	c3210000 	.word	0xc3210000
 8003208:	90c00010 	.word	0x90c00010
 800320c:	20002010 	.word	0x20002010
 8003210:	053e2d63 	.word	0x053e2d63
 8003214:	c7520000 	.word	0xc7520000
 8003218:	50000100 	.word	0x50000100
 800321c:	cb840000 	.word	0xcb840000

08003220 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f7fe fec1 	bl	8001fb4 <LL_ADC_IsEnabled>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d14d      	bne.n	80032d4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	4b28      	ldr	r3, [pc, #160]	; (80032e0 <ADC_Enable+0xc0>)
 8003240:	4013      	ands	r3, r2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00d      	beq.n	8003262 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324a:	f043 0210 	orr.w	r2, r3, #16
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003256:	f043 0201 	orr.w	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e039      	b.n	80032d6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe fe90 	bl	8001f8c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800326c:	f7fe fc82 	bl	8001b74 <HAL_GetTick>
 8003270:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003272:	e028      	b.n	80032c6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f7fe fe9b 	bl	8001fb4 <LL_ADC_IsEnabled>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d104      	bne.n	800328e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7fe fe7f 	bl	8001f8c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800328e:	f7fe fc71 	bl	8001b74 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d914      	bls.n	80032c6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d00d      	beq.n	80032c6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ae:	f043 0210 	orr.w	r2, r3, #16
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ba:	f043 0201 	orr.w	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e007      	b.n	80032d6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d1cf      	bne.n	8003274 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	8000003f 	.word	0x8000003f

080032e4 <LL_ADC_IsEnabled>:
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <LL_ADC_IsEnabled+0x18>
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <LL_ADC_IsEnabled+0x1a>
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <LL_ADC_REG_IsConversionOngoing>:
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b04      	cmp	r3, #4
 800331c:	d101      	bne.n	8003322 <LL_ADC_REG_IsConversionOngoing+0x18>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003394:	b590      	push	{r4, r7, lr}
 8003396:	b0a1      	sub	sp, #132	; 0x84
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e08b      	b.n	80034ca <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80033ba:	2300      	movs	r3, #0
 80033bc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80033be:	2300      	movs	r3, #0
 80033c0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033ca:	d102      	bne.n	80033d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80033cc:	4b41      	ldr	r3, [pc, #260]	; (80034d4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	e001      	b.n	80033d6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80033d2:	2300      	movs	r3, #0
 80033d4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10b      	bne.n	80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e0:	f043 0220 	orr.w	r2, r3, #32
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e06a      	b.n	80034ca <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff ff87 	bl	800330a <LL_ADC_REG_IsConversionOngoing>
 80033fc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff ff81 	bl	800330a <LL_ADC_REG_IsConversionOngoing>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d14c      	bne.n	80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800340e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003410:	2b00      	cmp	r3, #0
 8003412:	d149      	bne.n	80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003414:	4b30      	ldr	r3, [pc, #192]	; (80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003416:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d028      	beq.n	8003472 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003420:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003432:	035b      	lsls	r3, r3, #13
 8003434:	430b      	orrs	r3, r1
 8003436:	431a      	orrs	r2, r3
 8003438:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800343a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800343c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003440:	f7ff ff50 	bl	80032e4 <LL_ADC_IsEnabled>
 8003444:	4604      	mov	r4, r0
 8003446:	4823      	ldr	r0, [pc, #140]	; (80034d4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003448:	f7ff ff4c 	bl	80032e4 <LL_ADC_IsEnabled>
 800344c:	4603      	mov	r3, r0
 800344e:	4323      	orrs	r3, r4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d133      	bne.n	80034bc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003454:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800345c:	f023 030f 	bic.w	r3, r3, #15
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	6811      	ldr	r1, [r2, #0]
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	6892      	ldr	r2, [r2, #8]
 8003468:	430a      	orrs	r2, r1
 800346a:	431a      	orrs	r2, r3
 800346c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800346e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003470:	e024      	b.n	80034bc <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003472:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800347a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800347c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800347e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003482:	f7ff ff2f 	bl	80032e4 <LL_ADC_IsEnabled>
 8003486:	4604      	mov	r4, r0
 8003488:	4812      	ldr	r0, [pc, #72]	; (80034d4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800348a:	f7ff ff2b 	bl	80032e4 <LL_ADC_IsEnabled>
 800348e:	4603      	mov	r3, r0
 8003490:	4323      	orrs	r3, r4
 8003492:	2b00      	cmp	r3, #0
 8003494:	d112      	bne.n	80034bc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800349e:	f023 030f 	bic.w	r3, r3, #15
 80034a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80034a4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034a6:	e009      	b.n	80034bc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ac:	f043 0220 	orr.w	r2, r3, #32
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80034ba:	e000      	b.n	80034be <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80034c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3784      	adds	r7, #132	; 0x84
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd90      	pop	{r4, r7, pc}
 80034d2:	bf00      	nop
 80034d4:	50000100 	.word	0x50000100
 80034d8:	50000300 	.word	0x50000300

080034dc <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80034e4:	4b05      	ldr	r3, [pc, #20]	; (80034fc <LL_EXTI_EnableIT_0_31+0x20>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	4904      	ldr	r1, [pc, #16]	; (80034fc <LL_EXTI_EnableIT_0_31+0x20>)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	600b      	str	r3, [r1, #0]
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	40010400 	.word	0x40010400

08003500 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003508:	4b06      	ldr	r3, [pc, #24]	; (8003524 <LL_EXTI_DisableIT_0_31+0x24>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	43db      	mvns	r3, r3
 8003510:	4904      	ldr	r1, [pc, #16]	; (8003524 <LL_EXTI_DisableIT_0_31+0x24>)
 8003512:	4013      	ands	r3, r2
 8003514:	600b      	str	r3, [r1, #0]
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40010400 	.word	0x40010400

08003528 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	4904      	ldr	r1, [pc, #16]	; (8003548 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4313      	orrs	r3, r2
 800353a:	604b      	str	r3, [r1, #4]

}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	40010400 	.word	0x40010400

0800354c <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003554:	4b06      	ldr	r3, [pc, #24]	; (8003570 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	43db      	mvns	r3, r3
 800355c:	4904      	ldr	r1, [pc, #16]	; (8003570 <LL_EXTI_DisableEvent_0_31+0x24>)
 800355e:	4013      	ands	r3, r2
 8003560:	604b      	str	r3, [r1, #4]
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40010400 	.word	0x40010400

08003574 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	4904      	ldr	r1, [pc, #16]	; (8003594 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4313      	orrs	r3, r2
 8003586:	608b      	str	r3, [r1, #8]

}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	40010400 	.word	0x40010400

08003598 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80035a0:	4b06      	ldr	r3, [pc, #24]	; (80035bc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	43db      	mvns	r3, r3
 80035a8:	4904      	ldr	r1, [pc, #16]	; (80035bc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	608b      	str	r3, [r1, #8]

}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40010400 	.word	0x40010400

080035c0 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80035c8:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	4904      	ldr	r1, [pc, #16]	; (80035e0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60cb      	str	r3, [r1, #12]
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	40010400 	.word	0x40010400

080035e4 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80035ec:	4b06      	ldr	r3, [pc, #24]	; (8003608 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	43db      	mvns	r3, r3
 80035f4:	4904      	ldr	r1, [pc, #16]	; (8003608 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	60cb      	str	r3, [r1, #12]
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40010400 	.word	0x40010400

0800360c <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8003614:	4b07      	ldr	r3, [pc, #28]	; (8003634 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8003616:	695a      	ldr	r2, [r3, #20]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4013      	ands	r3, r2
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	429a      	cmp	r2, r3
 8003620:	d101      	bne.n	8003626 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	40010400 	.word	0x40010400

08003638 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003640:	4a04      	ldr	r2, [pc, #16]	; (8003654 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6153      	str	r3, [r2, #20]
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40010400 	.word	0x40010400

08003658 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003660:	2300      	movs	r3, #0
 8003662:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003664:	2300      	movs	r3, #0
 8003666:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d102      	bne.n	8003674 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	77fb      	strb	r3, [r7, #31]
 8003672:	e0bb      	b.n	80037ec <HAL_COMP_Init+0x194>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800367e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003682:	d102      	bne.n	800368a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	77fb      	strb	r3, [r7, #31]
 8003688:	e0b0      	b.n	80037ec <HAL_COMP_Init+0x194>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	7f5b      	ldrb	r3, [r3, #29]
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d108      	bne.n	80036a6 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7fe f88d 	bl	80017c0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036b0:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	4b48      	ldr	r3, [pc, #288]	; (80037f8 <HAL_COMP_Init+0x1a0>)
 80036d8:	4013      	ands	r3, r2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6812      	ldr	r2, [r2, #0]
 80036de:	6979      	ldr	r1, [r7, #20]
 80036e0:	430b      	orrs	r3, r1
 80036e2:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d015      	beq.n	800371e <HAL_COMP_Init+0xc6>
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d112      	bne.n	800371e <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80036f8:	4b40      	ldr	r3, [pc, #256]	; (80037fc <HAL_COMP_Init+0x1a4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	099b      	lsrs	r3, r3, #6
 80036fe:	4a40      	ldr	r2, [pc, #256]	; (8003800 <HAL_COMP_Init+0x1a8>)
 8003700:	fba2 2303 	umull	r2, r3, r2, r3
 8003704:	099a      	lsrs	r2, r3, #6
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003710:	e002      	b.n	8003718 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	3b01      	subs	r3, #1
 8003716:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f9      	bne.n	8003712 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a38      	ldr	r2, [pc, #224]	; (8003804 <HAL_COMP_Init+0x1ac>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d012      	beq.n	800374e <HAL_COMP_Init+0xf6>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a36      	ldr	r2, [pc, #216]	; (8003808 <HAL_COMP_Init+0x1b0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00a      	beq.n	8003748 <HAL_COMP_Init+0xf0>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a35      	ldr	r2, [pc, #212]	; (800380c <HAL_COMP_Init+0x1b4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d102      	bne.n	8003742 <HAL_COMP_Init+0xea>
 800373c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003740:	e007      	b.n	8003752 <HAL_COMP_Init+0xfa>
 8003742:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003746:	e004      	b.n	8003752 <HAL_COMP_Init+0xfa>
 8003748:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800374c:	e001      	b.n	8003752 <HAL_COMP_Init+0xfa>
 800374e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003752:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d037      	beq.n	80037d0 <HAL_COMP_Init+0x178>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_COMP_Init+0x11c>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800376c:	6938      	ldr	r0, [r7, #16]
 800376e:	f7ff ff01 	bl	8003574 <LL_EXTI_EnableRisingTrig_0_31>
 8003772:	e002      	b.n	800377a <HAL_COMP_Init+0x122>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003774:	6938      	ldr	r0, [r7, #16]
 8003776:	f7ff ff0f 	bl	8003598 <LL_EXTI_DisableRisingTrig_0_31>
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_COMP_Init+0x136>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003786:	6938      	ldr	r0, [r7, #16]
 8003788:	f7ff ff1a 	bl	80035c0 <LL_EXTI_EnableFallingTrig_0_31>
 800378c:	e002      	b.n	8003794 <HAL_COMP_Init+0x13c>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800378e:	6938      	ldr	r0, [r7, #16]
 8003790:	f7ff ff28 	bl	80035e4 <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 8003794:	6938      	ldr	r0, [r7, #16]
 8003796:	f7ff ff4f 	bl	8003638 <LL_EXTI_ClearFlag_0_31>
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_COMP_Init+0x156>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 80037a6:	6938      	ldr	r0, [r7, #16]
 80037a8:	f7ff febe 	bl	8003528 <LL_EXTI_EnableEvent_0_31>
 80037ac:	e002      	b.n	80037b4 <HAL_COMP_Init+0x15c>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 80037ae:	6938      	ldr	r0, [r7, #16]
 80037b0:	f7ff fecc 	bl	800354c <LL_EXTI_DisableEvent_0_31>
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_COMP_Init+0x170>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 80037c0:	6938      	ldr	r0, [r7, #16]
 80037c2:	f7ff fe8b 	bl	80034dc <LL_EXTI_EnableIT_0_31>
 80037c6:	e009      	b.n	80037dc <HAL_COMP_Init+0x184>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 80037c8:	6938      	ldr	r0, [r7, #16]
 80037ca:	f7ff fe99 	bl	8003500 <LL_EXTI_DisableIT_0_31>
 80037ce:	e005      	b.n	80037dc <HAL_COMP_Init+0x184>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 80037d0:	6938      	ldr	r0, [r7, #16]
 80037d2:	f7ff febb 	bl	800354c <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 80037d6:	6938      	ldr	r0, [r7, #16]
 80037d8:	f7ff fe92 	bl	8003500 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	7f5b      	ldrb	r3, [r3, #29]
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d102      	bne.n	80037ec <HAL_COMP_Init+0x194>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80037ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3720      	adds	r7, #32
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	ff007e0f 	.word	0xff007e0f
 80037fc:	20002010 	.word	0x20002010
 8003800:	053e2d63 	.word	0x053e2d63
 8003804:	40010200 	.word	0x40010200
 8003808:	40010204 	.word	0x40010204
 800380c:	40010208 	.word	0x40010208

08003810 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a17      	ldr	r2, [pc, #92]	; (800387c <HAL_COMP_IRQHandler+0x6c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d012      	beq.n	8003848 <HAL_COMP_IRQHandler+0x38>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a16      	ldr	r2, [pc, #88]	; (8003880 <HAL_COMP_IRQHandler+0x70>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00a      	beq.n	8003842 <HAL_COMP_IRQHandler+0x32>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a14      	ldr	r2, [pc, #80]	; (8003884 <HAL_COMP_IRQHandler+0x74>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d102      	bne.n	800383c <HAL_COMP_IRQHandler+0x2c>
 8003836:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800383a:	e007      	b.n	800384c <HAL_COMP_IRQHandler+0x3c>
 800383c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003840:	e004      	b.n	800384c <HAL_COMP_IRQHandler+0x3c>
 8003842:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003846:	e001      	b.n	800384c <HAL_COMP_IRQHandler+0x3c>
 8003848:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800384c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
    {
      tmp_comp_exti_flag_set = 1UL;
    }
  }
#else
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 8003852:	68b8      	ldr	r0, [r7, #8]
 8003854:	f7ff feda 	bl	800360c <LL_EXTI_IsActiveFlag_0_31>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_COMP_IRQHandler+0x52>
  {
    tmp_comp_exti_flag_set = 1UL;
 800385e:	2301      	movs	r3, #1
 8003860:	60fb      	str	r3, [r7, #12]
  }
#endif

  if(tmp_comp_exti_flag_set != 0UL)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_COMP_IRQHandler+0x64>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 8003868:	68b8      	ldr	r0, [r7, #8]
 800386a:	f7ff fee5 	bl	8003638 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fd fba0 	bl	8000fb4 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8003874:	bf00      	nop
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40010200 	.word	0x40010200
 8003880:	40010204 	.word	0x40010204
 8003884:	40010208 	.word	0x40010208

08003888 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	0f9b      	lsrs	r3, r3, #30
 8003898:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 800389c:	4618      	mov	r0, r3
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038b8:	4b0c      	ldr	r3, [pc, #48]	; (80038ec <__NVIC_SetPriorityGrouping+0x44>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038c4:	4013      	ands	r3, r2
 80038c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038da:	4a04      	ldr	r2, [pc, #16]	; (80038ec <__NVIC_SetPriorityGrouping+0x44>)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	60d3      	str	r3, [r2, #12]
}
 80038e0:	bf00      	nop
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	e000ed00 	.word	0xe000ed00

080038f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038f4:	4b04      	ldr	r3, [pc, #16]	; (8003908 <__NVIC_GetPriorityGrouping+0x18>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	0a1b      	lsrs	r3, r3, #8
 80038fa:	f003 0307 	and.w	r3, r3, #7
}
 80038fe:	4618      	mov	r0, r3
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	e000ed00 	.word	0xe000ed00

0800390c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391a:	2b00      	cmp	r3, #0
 800391c:	db0b      	blt.n	8003936 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	f003 021f 	and.w	r2, r3, #31
 8003924:	4907      	ldr	r1, [pc, #28]	; (8003944 <__NVIC_EnableIRQ+0x38>)
 8003926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392a:	095b      	lsrs	r3, r3, #5
 800392c:	2001      	movs	r0, #1
 800392e:	fa00 f202 	lsl.w	r2, r0, r2
 8003932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	e000e100 	.word	0xe000e100

08003948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	6039      	str	r1, [r7, #0]
 8003952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003958:	2b00      	cmp	r3, #0
 800395a:	db0a      	blt.n	8003972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	b2da      	uxtb	r2, r3
 8003960:	490c      	ldr	r1, [pc, #48]	; (8003994 <__NVIC_SetPriority+0x4c>)
 8003962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003966:	0112      	lsls	r2, r2, #4
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	440b      	add	r3, r1
 800396c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003970:	e00a      	b.n	8003988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	b2da      	uxtb	r2, r3
 8003976:	4908      	ldr	r1, [pc, #32]	; (8003998 <__NVIC_SetPriority+0x50>)
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	3b04      	subs	r3, #4
 8003980:	0112      	lsls	r2, r2, #4
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	440b      	add	r3, r1
 8003986:	761a      	strb	r2, [r3, #24]
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	e000e100 	.word	0xe000e100
 8003998:	e000ed00 	.word	0xe000ed00

0800399c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800399c:	b480      	push	{r7}
 800399e:	b089      	sub	sp, #36	; 0x24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f1c3 0307 	rsb	r3, r3, #7
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	bf28      	it	cs
 80039ba:	2304      	movcs	r3, #4
 80039bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	3304      	adds	r3, #4
 80039c2:	2b06      	cmp	r3, #6
 80039c4:	d902      	bls.n	80039cc <NVIC_EncodePriority+0x30>
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	3b03      	subs	r3, #3
 80039ca:	e000      	b.n	80039ce <NVIC_EncodePriority+0x32>
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d0:	f04f 32ff 	mov.w	r2, #4294967295
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43da      	mvns	r2, r3
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	401a      	ands	r2, r3
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039e4:	f04f 31ff 	mov.w	r1, #4294967295
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	fa01 f303 	lsl.w	r3, r1, r3
 80039ee:	43d9      	mvns	r1, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f4:	4313      	orrs	r3, r2
         );
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3724      	adds	r7, #36	; 0x24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
	...

08003a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a14:	d301      	bcc.n	8003a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a16:	2301      	movs	r3, #1
 8003a18:	e00f      	b.n	8003a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a1a:	4a0a      	ldr	r2, [pc, #40]	; (8003a44 <SysTick_Config+0x40>)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a22:	210f      	movs	r1, #15
 8003a24:	f04f 30ff 	mov.w	r0, #4294967295
 8003a28:	f7ff ff8e 	bl	8003948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a2c:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <SysTick_Config+0x40>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a32:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <SysTick_Config+0x40>)
 8003a34:	2207      	movs	r2, #7
 8003a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	e000e010 	.word	0xe000e010

08003a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff ff29 	bl	80038a8 <__NVIC_SetPriorityGrouping>
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b086      	sub	sp, #24
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	4603      	mov	r3, r0
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	607a      	str	r2, [r7, #4]
 8003a6a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a6c:	f7ff ff40 	bl	80038f0 <__NVIC_GetPriorityGrouping>
 8003a70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	6978      	ldr	r0, [r7, #20]
 8003a78:	f7ff ff90 	bl	800399c <NVIC_EncodePriority>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff ff5f 	bl	8003948 <__NVIC_SetPriority>
}
 8003a8a:	bf00      	nop
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b082      	sub	sp, #8
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	4603      	mov	r3, r0
 8003a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff ff33 	bl	800390c <__NVIC_EnableIRQ>
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff ffa4 	bl	8003a04 <SysTick_Config>
 8003abc:	4603      	mov	r3, r0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b082      	sub	sp, #8
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e014      	b.n	8003b02 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	791b      	ldrb	r3, [r3, #4]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d105      	bne.n	8003aee <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7fd fea3 	bl	8001834 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2202      	movs	r2, #2
 8003af2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b082      	sub	sp, #8
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	795b      	ldrb	r3, [r3, #5]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_DAC_Start+0x16>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e043      	b.n	8003ba8 <HAL_DAC_Start+0x9e>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6819      	ldr	r1, [r3, #0]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2201      	movs	r2, #1
 8003b3a:	409a      	lsls	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8003b44:	2001      	movs	r0, #1
 8003b46:	f7fe f821 	bl	8001b8c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10f      	bne.n	8003b70 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d11d      	bne.n	8003b9a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0201 	orr.w	r2, r2, #1
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	e014      	b.n	8003b9a <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	f003 0310 	and.w	r3, r3, #16
 8003b80:	2102      	movs	r1, #2
 8003b82:	fa01 f303 	lsl.w	r3, r1, r3
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d107      	bne.n	8003b9a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0202 	orr.w	r2, r2, #2
 8003b98:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d105      	bne.n	8003be0 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	3308      	adds	r3, #8
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	e004      	b.n	8003bea <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4413      	add	r3, r2
 8003be6:	3314      	adds	r3, #20
 8003be8:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	461a      	mov	r2, r3
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	371c      	adds	r7, #28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08a      	sub	sp, #40	; 0x28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	795b      	ldrb	r3, [r3, #5]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_DAC_ConfigChannel+0x18>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e192      	b.n	8003f3e <HAL_DAC_ConfigChannel+0x33e>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2202      	movs	r2, #2
 8003c22:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d174      	bne.n	8003d16 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003c2c:	f7fd ffa2 	bl	8001b74 <HAL_GetTick>
 8003c30:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d134      	bne.n	8003ca2 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003c38:	e011      	b.n	8003c5e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003c3a:	f7fd ff9b 	bl	8001b74 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d90a      	bls.n	8003c5e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	f043 0208 	orr.w	r2, r3, #8
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2203      	movs	r2, #3
 8003c58:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e16f      	b.n	8003f3e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1e6      	bne.n	8003c3a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	f7fd ff8d 	bl	8001b8c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40
 8003c7c:	e01e      	b.n	8003cbc <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003c7e:	f7fd ff79 	bl	8001b74 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d90a      	bls.n	8003ca2 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	f043 0208 	orr.w	r2, r3, #8
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e14d      	b.n	8003f3e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	dbe8      	blt.n	8003c7e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003cac:	2001      	movs	r0, #1
 8003cae:	f7fd ff6d 	bl	8001b8c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cba:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	ea02 0103 	and.w	r1, r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	409a      	lsls	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f003 0310 	and.w	r3, r3, #16
 8003cf6:	21ff      	movs	r1, #255	; 0xff
 8003cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	ea02 0103 	and.w	r1, r2, r3
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f003 0310 	and.w	r3, r3, #16
 8003d0c:	409a      	lsls	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d11d      	bne.n	8003d5a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f003 0310 	and.w	r3, r3, #16
 8003d2c:	221f      	movs	r2, #31
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	43db      	mvns	r3, r3
 8003d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d36:	4013      	ands	r3, r2
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d58:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	2207      	movs	r2, #7
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d72:	4013      	ands	r3, r2
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d102      	bne.n	8003d84 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	623b      	str	r3, [r7, #32]
 8003d82:	e00f      	b.n	8003da4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d102      	bne.n	8003d92 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	623b      	str	r3, [r7, #32]
 8003d90:	e008      	b.n	8003da4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d102      	bne.n	8003da0 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	623b      	str	r3, [r7, #32]
 8003d9e:	e001      	b.n	8003da4 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	6a3a      	ldr	r2, [r7, #32]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f003 0310 	and.w	r3, r3, #16
 8003dba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	791b      	ldrb	r3, [r3, #4]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d102      	bne.n	8003dd8 <HAL_DAC_ConfigChannel+0x1d8>
 8003dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dd6:	e000      	b.n	8003dda <HAL_DAC_ConfigChannel+0x1da>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	43db      	mvns	r3, r3
 8003df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df2:	4013      	ands	r3, r2
 8003df4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	795b      	ldrb	r3, [r3, #5]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d102      	bne.n	8003e04 <HAL_DAC_ConfigChannel+0x204>
 8003dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e02:	e000      	b.n	8003e06 <HAL_DAC_ConfigChannel+0x206>
 8003e04:	2300      	movs	r3, #0
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d114      	bne.n	8003e46 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003e1c:	f000 ff9c 	bl	8004d58 <HAL_RCC_GetHCLKFreq>
 8003e20:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	4a48      	ldr	r2, [pc, #288]	; (8003f48 <HAL_DAC_ConfigChannel+0x348>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d904      	bls.n	8003e34 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
 8003e32:	e00f      	b.n	8003e54 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	4a45      	ldr	r2, [pc, #276]	; (8003f4c <HAL_DAC_ConfigChannel+0x34c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d90a      	bls.n	8003e52 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
 8003e44:	e006      	b.n	8003e54 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e50:	e000      	b.n	8003e54 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003e52:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f003 0310 	and.w	r3, r3, #16
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e62:	4313      	orrs	r3, r2
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6819      	ldr	r1, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f003 0310 	and.w	r3, r3, #16
 8003e7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43da      	mvns	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	400a      	ands	r2, r1
 8003e8a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f003 0310 	and.w	r3, r3, #16
 8003e9a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f003 0310 	and.w	r3, r3, #16
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6819      	ldr	r1, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f003 0310 	and.w	r3, r3, #16
 8003ed6:	22c0      	movs	r2, #192	; 0xc0
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	43da      	mvns	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	400a      	ands	r2, r1
 8003ee4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	089b      	lsrs	r3, r3, #2
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	089b      	lsrs	r3, r3, #2
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f003 0310 	and.w	r3, r3, #16
 8003f10:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003f14:	fa01 f303 	lsl.w	r3, r1, r3
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	ea02 0103 	and.w	r1, r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	409a      	lsls	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2201      	movs	r2, #1
 8003f34:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3728      	adds	r7, #40	; 0x28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	09896800 	.word	0x09896800
 8003f4c:	04c4b400 	.word	0x04c4b400

08003f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f5e:	e15a      	b.n	8004216 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	2101      	movs	r1, #1
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 814c 	beq.w	8004210 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d00b      	beq.n	8003f98 <HAL_GPIO_Init+0x48>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d007      	beq.n	8003f98 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f8c:	2b11      	cmp	r3, #17
 8003f8e:	d003      	beq.n	8003f98 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2b12      	cmp	r3, #18
 8003f96:	d130      	bne.n	8003ffa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4013      	ands	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fce:	2201      	movs	r2, #1
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	091b      	lsrs	r3, r3, #4
 8003fe4:	f003 0201 	and.w	r2, r3, #1
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	2203      	movs	r2, #3
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	43db      	mvns	r3, r3
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4013      	ands	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b02      	cmp	r3, #2
 8004030:	d003      	beq.n	800403a <HAL_GPIO_Init+0xea>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b12      	cmp	r3, #18
 8004038:	d123      	bne.n	8004082 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	08da      	lsrs	r2, r3, #3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3208      	adds	r2, #8
 8004042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004046:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	220f      	movs	r2, #15
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	43db      	mvns	r3, r3
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4013      	ands	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	08da      	lsrs	r2, r3, #3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3208      	adds	r2, #8
 800407c:	6939      	ldr	r1, [r7, #16]
 800407e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	2203      	movs	r2, #3
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	43db      	mvns	r3, r3
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4013      	ands	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f003 0203 	and.w	r2, r3, #3
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 80a6 	beq.w	8004210 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040c4:	4b5b      	ldr	r3, [pc, #364]	; (8004234 <HAL_GPIO_Init+0x2e4>)
 80040c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c8:	4a5a      	ldr	r2, [pc, #360]	; (8004234 <HAL_GPIO_Init+0x2e4>)
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	6613      	str	r3, [r2, #96]	; 0x60
 80040d0:	4b58      	ldr	r3, [pc, #352]	; (8004234 <HAL_GPIO_Init+0x2e4>)
 80040d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	60bb      	str	r3, [r7, #8]
 80040da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040dc:	4a56      	ldr	r2, [pc, #344]	; (8004238 <HAL_GPIO_Init+0x2e8>)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	089b      	lsrs	r3, r3, #2
 80040e2:	3302      	adds	r3, #2
 80040e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	220f      	movs	r2, #15
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4013      	ands	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004106:	d01f      	beq.n	8004148 <HAL_GPIO_Init+0x1f8>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a4c      	ldr	r2, [pc, #304]	; (800423c <HAL_GPIO_Init+0x2ec>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d019      	beq.n	8004144 <HAL_GPIO_Init+0x1f4>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a4b      	ldr	r2, [pc, #300]	; (8004240 <HAL_GPIO_Init+0x2f0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d013      	beq.n	8004140 <HAL_GPIO_Init+0x1f0>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a4a      	ldr	r2, [pc, #296]	; (8004244 <HAL_GPIO_Init+0x2f4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d00d      	beq.n	800413c <HAL_GPIO_Init+0x1ec>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a49      	ldr	r2, [pc, #292]	; (8004248 <HAL_GPIO_Init+0x2f8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d007      	beq.n	8004138 <HAL_GPIO_Init+0x1e8>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a48      	ldr	r2, [pc, #288]	; (800424c <HAL_GPIO_Init+0x2fc>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d101      	bne.n	8004134 <HAL_GPIO_Init+0x1e4>
 8004130:	2305      	movs	r3, #5
 8004132:	e00a      	b.n	800414a <HAL_GPIO_Init+0x1fa>
 8004134:	2306      	movs	r3, #6
 8004136:	e008      	b.n	800414a <HAL_GPIO_Init+0x1fa>
 8004138:	2304      	movs	r3, #4
 800413a:	e006      	b.n	800414a <HAL_GPIO_Init+0x1fa>
 800413c:	2303      	movs	r3, #3
 800413e:	e004      	b.n	800414a <HAL_GPIO_Init+0x1fa>
 8004140:	2302      	movs	r3, #2
 8004142:	e002      	b.n	800414a <HAL_GPIO_Init+0x1fa>
 8004144:	2301      	movs	r3, #1
 8004146:	e000      	b.n	800414a <HAL_GPIO_Init+0x1fa>
 8004148:	2300      	movs	r3, #0
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	f002 0203 	and.w	r2, r2, #3
 8004150:	0092      	lsls	r2, r2, #2
 8004152:	4093      	lsls	r3, r2
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	4313      	orrs	r3, r2
 8004158:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800415a:	4937      	ldr	r1, [pc, #220]	; (8004238 <HAL_GPIO_Init+0x2e8>)
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	089b      	lsrs	r3, r3, #2
 8004160:	3302      	adds	r3, #2
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004168:	4b39      	ldr	r3, [pc, #228]	; (8004250 <HAL_GPIO_Init+0x300>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	43db      	mvns	r3, r3
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4013      	ands	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800418c:	4a30      	ldr	r2, [pc, #192]	; (8004250 <HAL_GPIO_Init+0x300>)
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004192:	4b2f      	ldr	r3, [pc, #188]	; (8004250 <HAL_GPIO_Init+0x300>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	43db      	mvns	r3, r3
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4013      	ands	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041b6:	4a26      	ldr	r2, [pc, #152]	; (8004250 <HAL_GPIO_Init+0x300>)
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041bc:	4b24      	ldr	r3, [pc, #144]	; (8004250 <HAL_GPIO_Init+0x300>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	43db      	mvns	r3, r3
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4013      	ands	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4313      	orrs	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041e0:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <HAL_GPIO_Init+0x300>)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041e6:	4b1a      	ldr	r3, [pc, #104]	; (8004250 <HAL_GPIO_Init+0x300>)
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	43db      	mvns	r3, r3
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4013      	ands	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800420a:	4a11      	ldr	r2, [pc, #68]	; (8004250 <HAL_GPIO_Init+0x300>)
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	3301      	adds	r3, #1
 8004214:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	fa22 f303 	lsr.w	r3, r2, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	f47f ae9d 	bne.w	8003f60 <HAL_GPIO_Init+0x10>
  }
}
 8004226:	bf00      	nop
 8004228:	bf00      	nop
 800422a:	371c      	adds	r7, #28
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	40021000 	.word	0x40021000
 8004238:	40010000 	.word	0x40010000
 800423c:	48000400 	.word	0x48000400
 8004240:	48000800 	.word	0x48000800
 8004244:	48000c00 	.word	0x48000c00
 8004248:	48001000 	.word	0x48001000
 800424c:	48001400 	.word	0x48001400
 8004250:	40010400 	.word	0x40010400

08004254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	807b      	strh	r3, [r7, #2]
 8004260:	4613      	mov	r3, r2
 8004262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004264:	787b      	ldrb	r3, [r7, #1]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800426a:	887a      	ldrh	r2, [r7, #2]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004270:	e002      	b.n	8004278 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004272:	887a      	ldrh	r2, [r7, #2]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d141      	bne.n	8004316 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004292:	4b4b      	ldr	r3, [pc, #300]	; (80043c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800429a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800429e:	d131      	bne.n	8004304 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042a0:	4b47      	ldr	r3, [pc, #284]	; (80043c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042a6:	4a46      	ldr	r2, [pc, #280]	; (80043c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042b0:	4b43      	ldr	r3, [pc, #268]	; (80043c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042b8:	4a41      	ldr	r2, [pc, #260]	; (80043c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042c0:	4b40      	ldr	r3, [pc, #256]	; (80043c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2232      	movs	r2, #50	; 0x32
 80042c6:	fb02 f303 	mul.w	r3, r2, r3
 80042ca:	4a3f      	ldr	r2, [pc, #252]	; (80043c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042cc:	fba2 2303 	umull	r2, r3, r2, r3
 80042d0:	0c9b      	lsrs	r3, r3, #18
 80042d2:	3301      	adds	r3, #1
 80042d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042d6:	e002      	b.n	80042de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	3b01      	subs	r3, #1
 80042dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042de:	4b38      	ldr	r3, [pc, #224]	; (80043c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ea:	d102      	bne.n	80042f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f2      	bne.n	80042d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042f2:	4b33      	ldr	r3, [pc, #204]	; (80043c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042fe:	d158      	bne.n	80043b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e057      	b.n	80043b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004304:	4b2e      	ldr	r3, [pc, #184]	; (80043c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800430a:	4a2d      	ldr	r2, [pc, #180]	; (80043c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800430c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004310:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004314:	e04d      	b.n	80043b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800431c:	d141      	bne.n	80043a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800431e:	4b28      	ldr	r3, [pc, #160]	; (80043c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800432a:	d131      	bne.n	8004390 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800432c:	4b24      	ldr	r3, [pc, #144]	; (80043c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800432e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004332:	4a23      	ldr	r2, [pc, #140]	; (80043c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004338:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800433c:	4b20      	ldr	r3, [pc, #128]	; (80043c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004344:	4a1e      	ldr	r2, [pc, #120]	; (80043c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800434a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800434c:	4b1d      	ldr	r3, [pc, #116]	; (80043c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2232      	movs	r2, #50	; 0x32
 8004352:	fb02 f303 	mul.w	r3, r2, r3
 8004356:	4a1c      	ldr	r2, [pc, #112]	; (80043c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004358:	fba2 2303 	umull	r2, r3, r2, r3
 800435c:	0c9b      	lsrs	r3, r3, #18
 800435e:	3301      	adds	r3, #1
 8004360:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004362:	e002      	b.n	800436a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	3b01      	subs	r3, #1
 8004368:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800436a:	4b15      	ldr	r3, [pc, #84]	; (80043c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004376:	d102      	bne.n	800437e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f2      	bne.n	8004364 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800437e:	4b10      	ldr	r3, [pc, #64]	; (80043c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438a:	d112      	bne.n	80043b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e011      	b.n	80043b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004390:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004396:	4a0a      	ldr	r2, [pc, #40]	; (80043c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800439c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80043a0:	e007      	b.n	80043b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80043a2:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043aa:	4a05      	ldr	r2, [pc, #20]	; (80043c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	40007000 	.word	0x40007000
 80043c4:	20002010 	.word	0x20002010
 80043c8:	431bde83 	.word	0x431bde83

080043cc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80043d0:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	4a04      	ldr	r2, [pc, #16]	; (80043e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80043d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043da:	6093      	str	r3, [r2, #8]
}
 80043dc:	bf00      	nop
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	40007000 	.word	0x40007000

080043ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b088      	sub	sp, #32
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e308      	b.n	8004a10 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d075      	beq.n	80044f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800440a:	4ba3      	ldr	r3, [pc, #652]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 030c 	and.w	r3, r3, #12
 8004412:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004414:	4ba0      	ldr	r3, [pc, #640]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	2b0c      	cmp	r3, #12
 8004422:	d102      	bne.n	800442a <HAL_RCC_OscConfig+0x3e>
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	2b03      	cmp	r3, #3
 8004428:	d002      	beq.n	8004430 <HAL_RCC_OscConfig+0x44>
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	2b08      	cmp	r3, #8
 800442e:	d10b      	bne.n	8004448 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004430:	4b99      	ldr	r3, [pc, #612]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d05b      	beq.n	80044f4 <HAL_RCC_OscConfig+0x108>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d157      	bne.n	80044f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e2e3      	b.n	8004a10 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004450:	d106      	bne.n	8004460 <HAL_RCC_OscConfig+0x74>
 8004452:	4b91      	ldr	r3, [pc, #580]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a90      	ldr	r2, [pc, #576]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	e01d      	b.n	800449c <HAL_RCC_OscConfig+0xb0>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004468:	d10c      	bne.n	8004484 <HAL_RCC_OscConfig+0x98>
 800446a:	4b8b      	ldr	r3, [pc, #556]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a8a      	ldr	r2, [pc, #552]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	4b88      	ldr	r3, [pc, #544]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a87      	ldr	r2, [pc, #540]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 800447c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	e00b      	b.n	800449c <HAL_RCC_OscConfig+0xb0>
 8004484:	4b84      	ldr	r3, [pc, #528]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a83      	ldr	r2, [pc, #524]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 800448a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	4b81      	ldr	r3, [pc, #516]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a80      	ldr	r2, [pc, #512]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800449a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d013      	beq.n	80044cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a4:	f7fd fb66 	bl	8001b74 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ac:	f7fd fb62 	bl	8001b74 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b64      	cmp	r3, #100	; 0x64
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e2a8      	b.n	8004a10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044be:	4b76      	ldr	r3, [pc, #472]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f0      	beq.n	80044ac <HAL_RCC_OscConfig+0xc0>
 80044ca:	e014      	b.n	80044f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044cc:	f7fd fb52 	bl	8001b74 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d4:	f7fd fb4e 	bl	8001b74 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	; 0x64
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e294      	b.n	8004a10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044e6:	4b6c      	ldr	r3, [pc, #432]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0xe8>
 80044f2:	e000      	b.n	80044f6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d075      	beq.n	80045ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004502:	4b65      	ldr	r3, [pc, #404]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
 800450a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800450c:	4b62      	ldr	r3, [pc, #392]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	2b0c      	cmp	r3, #12
 800451a:	d102      	bne.n	8004522 <HAL_RCC_OscConfig+0x136>
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2b02      	cmp	r3, #2
 8004520:	d002      	beq.n	8004528 <HAL_RCC_OscConfig+0x13c>
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	2b04      	cmp	r3, #4
 8004526:	d11f      	bne.n	8004568 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004528:	4b5b      	ldr	r3, [pc, #364]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004530:	2b00      	cmp	r3, #0
 8004532:	d005      	beq.n	8004540 <HAL_RCC_OscConfig+0x154>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e267      	b.n	8004a10 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004540:	4b55      	ldr	r3, [pc, #340]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	061b      	lsls	r3, r3, #24
 800454e:	4952      	ldr	r1, [pc, #328]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004550:	4313      	orrs	r3, r2
 8004552:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004554:	4b51      	ldr	r3, [pc, #324]	; (800469c <HAL_RCC_OscConfig+0x2b0>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4618      	mov	r0, r3
 800455a:	f7fd fabf 	bl	8001adc <HAL_InitTick>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d043      	beq.n	80045ec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e253      	b.n	8004a10 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d023      	beq.n	80045b8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004570:	4b49      	ldr	r3, [pc, #292]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a48      	ldr	r2, [pc, #288]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800457a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457c:	f7fd fafa 	bl	8001b74 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004584:	f7fd faf6 	bl	8001b74 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e23c      	b.n	8004a10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004596:	4b40      	ldr	r3, [pc, #256]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a2:	4b3d      	ldr	r3, [pc, #244]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	061b      	lsls	r3, r3, #24
 80045b0:	4939      	ldr	r1, [pc, #228]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	604b      	str	r3, [r1, #4]
 80045b6:	e01a      	b.n	80045ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045b8:	4b37      	ldr	r3, [pc, #220]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a36      	ldr	r2, [pc, #216]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 80045be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fd fad6 	bl	8001b74 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045cc:	f7fd fad2 	bl	8001b74 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e218      	b.n	8004a10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045de:	4b2e      	ldr	r3, [pc, #184]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x1e0>
 80045ea:	e000      	b.n	80045ee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d03c      	beq.n	8004674 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d01c      	beq.n	800463c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004602:	4b25      	ldr	r3, [pc, #148]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004608:	4a23      	ldr	r2, [pc, #140]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 800460a:	f043 0301 	orr.w	r3, r3, #1
 800460e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004612:	f7fd faaf 	bl	8001b74 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004618:	e008      	b.n	800462c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800461a:	f7fd faab 	bl	8001b74 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e1f1      	b.n	8004a10 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800462c:	4b1a      	ldr	r3, [pc, #104]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 800462e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0ef      	beq.n	800461a <HAL_RCC_OscConfig+0x22e>
 800463a:	e01b      	b.n	8004674 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800463c:	4b16      	ldr	r3, [pc, #88]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 800463e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004642:	4a15      	ldr	r2, [pc, #84]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004644:	f023 0301 	bic.w	r3, r3, #1
 8004648:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464c:	f7fd fa92 	bl	8001b74 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004654:	f7fd fa8e 	bl	8001b74 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e1d4      	b.n	8004a10 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004666:	4b0c      	ldr	r3, [pc, #48]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1ef      	bne.n	8004654 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 80ab 	beq.w	80047d8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004682:	2300      	movs	r3, #0
 8004684:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004686:	4b04      	ldr	r3, [pc, #16]	; (8004698 <HAL_RCC_OscConfig+0x2ac>)
 8004688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_RCC_OscConfig+0x2b4>
 8004692:	2301      	movs	r3, #1
 8004694:	e005      	b.n	80046a2 <HAL_RCC_OscConfig+0x2b6>
 8004696:	bf00      	nop
 8004698:	40021000 	.word	0x40021000
 800469c:	20002014 	.word	0x20002014
 80046a0:	2300      	movs	r3, #0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00d      	beq.n	80046c2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046a6:	4baf      	ldr	r3, [pc, #700]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 80046a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046aa:	4aae      	ldr	r2, [pc, #696]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 80046ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b0:	6593      	str	r3, [r2, #88]	; 0x58
 80046b2:	4bac      	ldr	r3, [pc, #688]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 80046b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80046be:	2301      	movs	r3, #1
 80046c0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046c2:	4ba9      	ldr	r3, [pc, #676]	; (8004968 <HAL_RCC_OscConfig+0x57c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d118      	bne.n	8004700 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046ce:	4ba6      	ldr	r3, [pc, #664]	; (8004968 <HAL_RCC_OscConfig+0x57c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4aa5      	ldr	r2, [pc, #660]	; (8004968 <HAL_RCC_OscConfig+0x57c>)
 80046d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046da:	f7fd fa4b 	bl	8001b74 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e2:	f7fd fa47 	bl	8001b74 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e18d      	b.n	8004a10 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046f4:	4b9c      	ldr	r3, [pc, #624]	; (8004968 <HAL_RCC_OscConfig+0x57c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f0      	beq.n	80046e2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d108      	bne.n	800471a <HAL_RCC_OscConfig+0x32e>
 8004708:	4b96      	ldr	r3, [pc, #600]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470e:	4a95      	ldr	r2, [pc, #596]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 8004710:	f043 0301 	orr.w	r3, r3, #1
 8004714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004718:	e024      	b.n	8004764 <HAL_RCC_OscConfig+0x378>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b05      	cmp	r3, #5
 8004720:	d110      	bne.n	8004744 <HAL_RCC_OscConfig+0x358>
 8004722:	4b90      	ldr	r3, [pc, #576]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 8004724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004728:	4a8e      	ldr	r2, [pc, #568]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 800472a:	f043 0304 	orr.w	r3, r3, #4
 800472e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004732:	4b8c      	ldr	r3, [pc, #560]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 8004734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004738:	4a8a      	ldr	r2, [pc, #552]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 800473a:	f043 0301 	orr.w	r3, r3, #1
 800473e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004742:	e00f      	b.n	8004764 <HAL_RCC_OscConfig+0x378>
 8004744:	4b87      	ldr	r3, [pc, #540]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 8004746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474a:	4a86      	ldr	r2, [pc, #536]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 800474c:	f023 0301 	bic.w	r3, r3, #1
 8004750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004754:	4b83      	ldr	r3, [pc, #524]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 8004756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475a:	4a82      	ldr	r2, [pc, #520]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 800475c:	f023 0304 	bic.w	r3, r3, #4
 8004760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d016      	beq.n	800479a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476c:	f7fd fa02 	bl	8001b74 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004772:	e00a      	b.n	800478a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004774:	f7fd f9fe 	bl	8001b74 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004782:	4293      	cmp	r3, r2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e142      	b.n	8004a10 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800478a:	4b76      	ldr	r3, [pc, #472]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 800478c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0ed      	beq.n	8004774 <HAL_RCC_OscConfig+0x388>
 8004798:	e015      	b.n	80047c6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479a:	f7fd f9eb 	bl	8001b74 <HAL_GetTick>
 800479e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047a0:	e00a      	b.n	80047b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a2:	f7fd f9e7 	bl	8001b74 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e12b      	b.n	8004a10 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047b8:	4b6a      	ldr	r3, [pc, #424]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 80047ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1ed      	bne.n	80047a2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047c6:	7ffb      	ldrb	r3, [r7, #31]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d105      	bne.n	80047d8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047cc:	4b65      	ldr	r3, [pc, #404]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 80047ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d0:	4a64      	ldr	r2, [pc, #400]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 80047d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0320 	and.w	r3, r3, #32
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d03c      	beq.n	800485e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01c      	beq.n	8004826 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047ec:	4b5d      	ldr	r3, [pc, #372]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 80047ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047f2:	4a5c      	ldr	r2, [pc, #368]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 80047f4:	f043 0301 	orr.w	r3, r3, #1
 80047f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047fc:	f7fd f9ba 	bl	8001b74 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004804:	f7fd f9b6 	bl	8001b74 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e0fc      	b.n	8004a10 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004816:	4b53      	ldr	r3, [pc, #332]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 8004818:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0ef      	beq.n	8004804 <HAL_RCC_OscConfig+0x418>
 8004824:	e01b      	b.n	800485e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004826:	4b4f      	ldr	r3, [pc, #316]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 8004828:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800482c:	4a4d      	ldr	r2, [pc, #308]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 800482e:	f023 0301 	bic.w	r3, r3, #1
 8004832:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004836:	f7fd f99d 	bl	8001b74 <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800483c:	e008      	b.n	8004850 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800483e:	f7fd f999 	bl	8001b74 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e0df      	b.n	8004a10 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004850:	4b44      	ldr	r3, [pc, #272]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 8004852:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1ef      	bne.n	800483e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 80d3 	beq.w	8004a0e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004868:	4b3e      	ldr	r3, [pc, #248]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 030c 	and.w	r3, r3, #12
 8004870:	2b0c      	cmp	r3, #12
 8004872:	f000 808d 	beq.w	8004990 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d15a      	bne.n	8004934 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800487e:	4b39      	ldr	r3, [pc, #228]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a38      	ldr	r2, [pc, #224]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 8004884:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488a:	f7fd f973 	bl	8001b74 <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004890:	e008      	b.n	80048a4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004892:	f7fd f96f 	bl	8001b74 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e0b5      	b.n	8004a10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048a4:	4b2f      	ldr	r3, [pc, #188]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1f0      	bne.n	8004892 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048b0:	4b2c      	ldr	r3, [pc, #176]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	4b2d      	ldr	r3, [pc, #180]	; (800496c <HAL_RCC_OscConfig+0x580>)
 80048b6:	4013      	ands	r3, r2
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6a11      	ldr	r1, [r2, #32]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048c0:	3a01      	subs	r2, #1
 80048c2:	0112      	lsls	r2, r2, #4
 80048c4:	4311      	orrs	r1, r2
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80048ca:	0212      	lsls	r2, r2, #8
 80048cc:	4311      	orrs	r1, r2
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80048d2:	0852      	lsrs	r2, r2, #1
 80048d4:	3a01      	subs	r2, #1
 80048d6:	0552      	lsls	r2, r2, #21
 80048d8:	4311      	orrs	r1, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048de:	0852      	lsrs	r2, r2, #1
 80048e0:	3a01      	subs	r2, #1
 80048e2:	0652      	lsls	r2, r2, #25
 80048e4:	4311      	orrs	r1, r2
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80048ea:	06d2      	lsls	r2, r2, #27
 80048ec:	430a      	orrs	r2, r1
 80048ee:	491d      	ldr	r1, [pc, #116]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048f4:	4b1b      	ldr	r3, [pc, #108]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a1a      	ldr	r2, [pc, #104]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 80048fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004900:	4b18      	ldr	r3, [pc, #96]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4a17      	ldr	r2, [pc, #92]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 8004906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800490a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490c:	f7fd f932 	bl	8001b74 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004914:	f7fd f92e 	bl	8001b74 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e074      	b.n	8004a10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004926:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0f0      	beq.n	8004914 <HAL_RCC_OscConfig+0x528>
 8004932:	e06c      	b.n	8004a0e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004934:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a0a      	ldr	r2, [pc, #40]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 800493a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800493e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004940:	4b08      	ldr	r3, [pc, #32]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	4a07      	ldr	r2, [pc, #28]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 8004946:	f023 0303 	bic.w	r3, r3, #3
 800494a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800494c:	4b05      	ldr	r3, [pc, #20]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	4a04      	ldr	r2, [pc, #16]	; (8004964 <HAL_RCC_OscConfig+0x578>)
 8004952:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800495a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495c:	f7fd f90a 	bl	8001b74 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004962:	e00e      	b.n	8004982 <HAL_RCC_OscConfig+0x596>
 8004964:	40021000 	.word	0x40021000
 8004968:	40007000 	.word	0x40007000
 800496c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004970:	f7fd f900 	bl	8001b74 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e046      	b.n	8004a10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004982:	4b25      	ldr	r3, [pc, #148]	; (8004a18 <HAL_RCC_OscConfig+0x62c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f0      	bne.n	8004970 <HAL_RCC_OscConfig+0x584>
 800498e:	e03e      	b.n	8004a0e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e039      	b.n	8004a10 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800499c:	4b1e      	ldr	r3, [pc, #120]	; (8004a18 <HAL_RCC_OscConfig+0x62c>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f003 0203 	and.w	r2, r3, #3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d12c      	bne.n	8004a0a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	3b01      	subs	r3, #1
 80049bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049be:	429a      	cmp	r2, r3
 80049c0:	d123      	bne.n	8004a0a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d11b      	bne.n	8004a0a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80049de:	429a      	cmp	r2, r3
 80049e0:	d113      	bne.n	8004a0a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ec:	085b      	lsrs	r3, r3, #1
 80049ee:	3b01      	subs	r3, #1
 80049f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d109      	bne.n	8004a0a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a00:	085b      	lsrs	r3, r3, #1
 8004a02:	3b01      	subs	r3, #1
 8004a04:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d001      	beq.n	8004a0e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3720      	adds	r7, #32
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40021000 	.word	0x40021000

08004a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a26:	2300      	movs	r3, #0
 8004a28:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e11e      	b.n	8004c72 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a34:	4b91      	ldr	r3, [pc, #580]	; (8004c7c <HAL_RCC_ClockConfig+0x260>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 030f 	and.w	r3, r3, #15
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d910      	bls.n	8004a64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a42:	4b8e      	ldr	r3, [pc, #568]	; (8004c7c <HAL_RCC_ClockConfig+0x260>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f023 020f 	bic.w	r2, r3, #15
 8004a4a:	498c      	ldr	r1, [pc, #560]	; (8004c7c <HAL_RCC_ClockConfig+0x260>)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a52:	4b8a      	ldr	r3, [pc, #552]	; (8004c7c <HAL_RCC_ClockConfig+0x260>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e106      	b.n	8004c72 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d073      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d129      	bne.n	8004acc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a78:	4b81      	ldr	r3, [pc, #516]	; (8004c80 <HAL_RCC_ClockConfig+0x264>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e0f4      	b.n	8004c72 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004a88:	f000 f99e 	bl	8004dc8 <RCC_GetSysClockFreqFromPLLSource>
 8004a8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	4a7c      	ldr	r2, [pc, #496]	; (8004c84 <HAL_RCC_ClockConfig+0x268>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d93f      	bls.n	8004b16 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a96:	4b7a      	ldr	r3, [pc, #488]	; (8004c80 <HAL_RCC_ClockConfig+0x264>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d009      	beq.n	8004ab6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d033      	beq.n	8004b16 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d12f      	bne.n	8004b16 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ab6:	4b72      	ldr	r3, [pc, #456]	; (8004c80 <HAL_RCC_ClockConfig+0x264>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004abe:	4a70      	ldr	r2, [pc, #448]	; (8004c80 <HAL_RCC_ClockConfig+0x264>)
 8004ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ac4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ac6:	2380      	movs	r3, #128	; 0x80
 8004ac8:	617b      	str	r3, [r7, #20]
 8004aca:	e024      	b.n	8004b16 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d107      	bne.n	8004ae4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ad4:	4b6a      	ldr	r3, [pc, #424]	; (8004c80 <HAL_RCC_ClockConfig+0x264>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d109      	bne.n	8004af4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e0c6      	b.n	8004c72 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae4:	4b66      	ldr	r3, [pc, #408]	; (8004c80 <HAL_RCC_ClockConfig+0x264>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0be      	b.n	8004c72 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004af4:	f000 f8ce 	bl	8004c94 <HAL_RCC_GetSysClockFreq>
 8004af8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	4a61      	ldr	r2, [pc, #388]	; (8004c84 <HAL_RCC_ClockConfig+0x268>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d909      	bls.n	8004b16 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b02:	4b5f      	ldr	r3, [pc, #380]	; (8004c80 <HAL_RCC_ClockConfig+0x264>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b0a:	4a5d      	ldr	r2, [pc, #372]	; (8004c80 <HAL_RCC_ClockConfig+0x264>)
 8004b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b10:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004b12:	2380      	movs	r3, #128	; 0x80
 8004b14:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b16:	4b5a      	ldr	r3, [pc, #360]	; (8004c80 <HAL_RCC_ClockConfig+0x264>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f023 0203 	bic.w	r2, r3, #3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	4957      	ldr	r1, [pc, #348]	; (8004c80 <HAL_RCC_ClockConfig+0x264>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b28:	f7fd f824 	bl	8001b74 <HAL_GetTick>
 8004b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b2e:	e00a      	b.n	8004b46 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b30:	f7fd f820 	bl	8001b74 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e095      	b.n	8004c72 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b46:	4b4e      	ldr	r3, [pc, #312]	; (8004c80 <HAL_RCC_ClockConfig+0x264>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 020c 	and.w	r2, r3, #12
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d1eb      	bne.n	8004b30 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d023      	beq.n	8004bac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d005      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b70:	4b43      	ldr	r3, [pc, #268]	; (8004c80 <HAL_RCC_ClockConfig+0x264>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	4a42      	ldr	r2, [pc, #264]	; (8004c80 <HAL_RCC_ClockConfig+0x264>)
 8004b76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b7a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d007      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004b88:	4b3d      	ldr	r3, [pc, #244]	; (8004c80 <HAL_RCC_ClockConfig+0x264>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004b90:	4a3b      	ldr	r2, [pc, #236]	; (8004c80 <HAL_RCC_ClockConfig+0x264>)
 8004b92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b98:	4b39      	ldr	r3, [pc, #228]	; (8004c80 <HAL_RCC_ClockConfig+0x264>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	4936      	ldr	r1, [pc, #216]	; (8004c80 <HAL_RCC_ClockConfig+0x264>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	608b      	str	r3, [r1, #8]
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2b80      	cmp	r3, #128	; 0x80
 8004bb0:	d105      	bne.n	8004bbe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004bb2:	4b33      	ldr	r3, [pc, #204]	; (8004c80 <HAL_RCC_ClockConfig+0x264>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	4a32      	ldr	r2, [pc, #200]	; (8004c80 <HAL_RCC_ClockConfig+0x264>)
 8004bb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bbc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bbe:	4b2f      	ldr	r3, [pc, #188]	; (8004c7c <HAL_RCC_ClockConfig+0x260>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d21d      	bcs.n	8004c08 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bcc:	4b2b      	ldr	r3, [pc, #172]	; (8004c7c <HAL_RCC_ClockConfig+0x260>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f023 020f 	bic.w	r2, r3, #15
 8004bd4:	4929      	ldr	r1, [pc, #164]	; (8004c7c <HAL_RCC_ClockConfig+0x260>)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004bdc:	f7fc ffca 	bl	8001b74 <HAL_GetTick>
 8004be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be2:	e00a      	b.n	8004bfa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be4:	f7fc ffc6 	bl	8001b74 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e03b      	b.n	8004c72 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfa:	4b20      	ldr	r3, [pc, #128]	; (8004c7c <HAL_RCC_ClockConfig+0x260>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 030f 	and.w	r3, r3, #15
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d1ed      	bne.n	8004be4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d008      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c14:	4b1a      	ldr	r3, [pc, #104]	; (8004c80 <HAL_RCC_ClockConfig+0x264>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	4917      	ldr	r1, [pc, #92]	; (8004c80 <HAL_RCC_ClockConfig+0x264>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d009      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c32:	4b13      	ldr	r3, [pc, #76]	; (8004c80 <HAL_RCC_ClockConfig+0x264>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	490f      	ldr	r1, [pc, #60]	; (8004c80 <HAL_RCC_ClockConfig+0x264>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c46:	f000 f825 	bl	8004c94 <HAL_RCC_GetSysClockFreq>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <HAL_RCC_ClockConfig+0x264>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	091b      	lsrs	r3, r3, #4
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	490c      	ldr	r1, [pc, #48]	; (8004c88 <HAL_RCC_ClockConfig+0x26c>)
 8004c58:	5ccb      	ldrb	r3, [r1, r3]
 8004c5a:	f003 031f 	and.w	r3, r3, #31
 8004c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c62:	4a0a      	ldr	r2, [pc, #40]	; (8004c8c <HAL_RCC_ClockConfig+0x270>)
 8004c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c66:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <HAL_RCC_ClockConfig+0x274>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fc ff36 	bl	8001adc <HAL_InitTick>
 8004c70:	4603      	mov	r3, r0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40022000 	.word	0x40022000
 8004c80:	40021000 	.word	0x40021000
 8004c84:	04c4b400 	.word	0x04c4b400
 8004c88:	080073e8 	.word	0x080073e8
 8004c8c:	20002010 	.word	0x20002010
 8004c90:	20002014 	.word	0x20002014

08004c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004c9a:	4b2c      	ldr	r3, [pc, #176]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 030c 	and.w	r3, r3, #12
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d102      	bne.n	8004cac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ca6:	4b2a      	ldr	r3, [pc, #168]	; (8004d50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	e047      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004cac:	4b27      	ldr	r3, [pc, #156]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f003 030c 	and.w	r3, r3, #12
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d102      	bne.n	8004cbe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cb8:	4b26      	ldr	r3, [pc, #152]	; (8004d54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004cba:	613b      	str	r3, [r7, #16]
 8004cbc:	e03e      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004cbe:	4b23      	ldr	r3, [pc, #140]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 030c 	and.w	r3, r3, #12
 8004cc6:	2b0c      	cmp	r3, #12
 8004cc8:	d136      	bne.n	8004d38 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cca:	4b20      	ldr	r3, [pc, #128]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cd4:	4b1d      	ldr	r3, [pc, #116]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	091b      	lsrs	r3, r3, #4
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	3301      	adds	r3, #1
 8004ce0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b03      	cmp	r3, #3
 8004ce6:	d10c      	bne.n	8004d02 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ce8:	4a1a      	ldr	r2, [pc, #104]	; (8004d54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf0:	4a16      	ldr	r2, [pc, #88]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cf2:	68d2      	ldr	r2, [r2, #12]
 8004cf4:	0a12      	lsrs	r2, r2, #8
 8004cf6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004cfa:	fb02 f303 	mul.w	r3, r2, r3
 8004cfe:	617b      	str	r3, [r7, #20]
      break;
 8004d00:	e00c      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d02:	4a13      	ldr	r2, [pc, #76]	; (8004d50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0a:	4a10      	ldr	r2, [pc, #64]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d0c:	68d2      	ldr	r2, [r2, #12]
 8004d0e:	0a12      	lsrs	r2, r2, #8
 8004d10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d14:	fb02 f303 	mul.w	r3, r2, r3
 8004d18:	617b      	str	r3, [r7, #20]
      break;
 8004d1a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	0e5b      	lsrs	r3, r3, #25
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	3301      	adds	r3, #1
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d34:	613b      	str	r3, [r7, #16]
 8004d36:	e001      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004d3c:	693b      	ldr	r3, [r7, #16]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	371c      	adds	r7, #28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	00f42400 	.word	0x00f42400
 8004d54:	007a1200 	.word	0x007a1200

08004d58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d5c:	4b03      	ldr	r3, [pc, #12]	; (8004d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	20002010 	.word	0x20002010

08004d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d74:	f7ff fff0 	bl	8004d58 <HAL_RCC_GetHCLKFreq>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	0a1b      	lsrs	r3, r3, #8
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	4904      	ldr	r1, [pc, #16]	; (8004d98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d86:	5ccb      	ldrb	r3, [r1, r3]
 8004d88:	f003 031f 	and.w	r3, r3, #31
 8004d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40021000 	.word	0x40021000
 8004d98:	080073f8 	.word	0x080073f8

08004d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004da0:	f7ff ffda 	bl	8004d58 <HAL_RCC_GetHCLKFreq>
 8004da4:	4602      	mov	r2, r0
 8004da6:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	0adb      	lsrs	r3, r3, #11
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	4904      	ldr	r1, [pc, #16]	; (8004dc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004db2:	5ccb      	ldrb	r3, [r1, r3]
 8004db4:	f003 031f 	and.w	r3, r3, #31
 8004db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	080073f8 	.word	0x080073f8

08004dc8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dce:	4b1e      	ldr	r3, [pc, #120]	; (8004e48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dd8:	4b1b      	ldr	r3, [pc, #108]	; (8004e48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	091b      	lsrs	r3, r3, #4
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	3301      	adds	r3, #1
 8004de4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	2b03      	cmp	r3, #3
 8004dea:	d10c      	bne.n	8004e06 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dec:	4a17      	ldr	r2, [pc, #92]	; (8004e4c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df4:	4a14      	ldr	r2, [pc, #80]	; (8004e48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004df6:	68d2      	ldr	r2, [r2, #12]
 8004df8:	0a12      	lsrs	r2, r2, #8
 8004dfa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004dfe:	fb02 f303 	mul.w	r3, r2, r3
 8004e02:	617b      	str	r3, [r7, #20]
    break;
 8004e04:	e00c      	b.n	8004e20 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e06:	4a12      	ldr	r2, [pc, #72]	; (8004e50 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0e:	4a0e      	ldr	r2, [pc, #56]	; (8004e48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e10:	68d2      	ldr	r2, [r2, #12]
 8004e12:	0a12      	lsrs	r2, r2, #8
 8004e14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e18:	fb02 f303 	mul.w	r3, r2, r3
 8004e1c:	617b      	str	r3, [r7, #20]
    break;
 8004e1e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e20:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	0e5b      	lsrs	r3, r3, #25
 8004e26:	f003 0303 	and.w	r3, r3, #3
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e38:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004e3a:	687b      	ldr	r3, [r7, #4]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	371c      	adds	r7, #28
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	007a1200 	.word	0x007a1200
 8004e50:	00f42400 	.word	0x00f42400

08004e54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e60:	2300      	movs	r3, #0
 8004e62:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8098 	beq.w	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e72:	2300      	movs	r3, #0
 8004e74:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e76:	4b43      	ldr	r3, [pc, #268]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10d      	bne.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e82:	4b40      	ldr	r3, [pc, #256]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e86:	4a3f      	ldr	r2, [pc, #252]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e8c:	6593      	str	r3, [r2, #88]	; 0x58
 8004e8e:	4b3d      	ldr	r3, [pc, #244]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e96:	60bb      	str	r3, [r7, #8]
 8004e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e9e:	4b3a      	ldr	r3, [pc, #232]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a39      	ldr	r2, [pc, #228]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004eaa:	f7fc fe63 	bl	8001b74 <HAL_GetTick>
 8004eae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eb0:	e009      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb2:	f7fc fe5f 	bl	8001b74 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d902      	bls.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	74fb      	strb	r3, [r7, #19]
        break;
 8004ec4:	e005      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ec6:	4b30      	ldr	r3, [pc, #192]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0ef      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004ed2:	7cfb      	ldrb	r3, [r7, #19]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d159      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ed8:	4b2a      	ldr	r3, [pc, #168]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d01e      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d019      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ef4:	4b23      	ldr	r3, [pc, #140]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004efe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f00:	4b20      	ldr	r3, [pc, #128]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f06:	4a1f      	ldr	r2, [pc, #124]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f10:	4b1c      	ldr	r3, [pc, #112]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f16:	4a1b      	ldr	r2, [pc, #108]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f20:	4a18      	ldr	r2, [pc, #96]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d016      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f32:	f7fc fe1f 	bl	8001b74 <HAL_GetTick>
 8004f36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f38:	e00b      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f3a:	f7fc fe1b 	bl	8001b74 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d902      	bls.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	74fb      	strb	r3, [r7, #19]
            break;
 8004f50:	e006      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f52:	4b0c      	ldr	r3, [pc, #48]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0ec      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004f60:	7cfb      	ldrb	r3, [r7, #19]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10b      	bne.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f66:	4b07      	ldr	r3, [pc, #28]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	4903      	ldr	r1, [pc, #12]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f7c:	e008      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f7e:	7cfb      	ldrb	r3, [r7, #19]
 8004f80:	74bb      	strb	r3, [r7, #18]
 8004f82:	e005      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004f84:	40021000 	.word	0x40021000
 8004f88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f8c:	7cfb      	ldrb	r3, [r7, #19]
 8004f8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f90:	7c7b      	ldrb	r3, [r7, #17]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d105      	bne.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f96:	4ba6      	ldr	r3, [pc, #664]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9a:	4aa5      	ldr	r2, [pc, #660]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fa0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fae:	4ba0      	ldr	r3, [pc, #640]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb4:	f023 0203 	bic.w	r2, r3, #3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	499c      	ldr	r1, [pc, #624]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fd0:	4b97      	ldr	r3, [pc, #604]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd6:	f023 020c 	bic.w	r2, r3, #12
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	4994      	ldr	r1, [pc, #592]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ff2:	4b8f      	ldr	r3, [pc, #572]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	498b      	ldr	r1, [pc, #556]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0308 	and.w	r3, r3, #8
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005014:	4b86      	ldr	r3, [pc, #536]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	4983      	ldr	r1, [pc, #524]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005024:	4313      	orrs	r3, r2
 8005026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005036:	4b7e      	ldr	r3, [pc, #504]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	497a      	ldr	r1, [pc, #488]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005058:	4b75      	ldr	r3, [pc, #468]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800505a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	4972      	ldr	r1, [pc, #456]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800507a:	4b6d      	ldr	r3, [pc, #436]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800507c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005080:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	4969      	ldr	r1, [pc, #420]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800508a:	4313      	orrs	r3, r2
 800508c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00a      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800509c:	4b64      	ldr	r3, [pc, #400]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800509e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	4961      	ldr	r1, [pc, #388]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050be:	4b5c      	ldr	r3, [pc, #368]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	4958      	ldr	r1, [pc, #352]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d015      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050e0:	4b53      	ldr	r3, [pc, #332]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ee:	4950      	ldr	r1, [pc, #320]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050fe:	d105      	bne.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005100:	4b4b      	ldr	r3, [pc, #300]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	4a4a      	ldr	r2, [pc, #296]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005106:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800510a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005114:	2b00      	cmp	r3, #0
 8005116:	d015      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005118:	4b45      	ldr	r3, [pc, #276]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800511a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005126:	4942      	ldr	r1, [pc, #264]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005136:	d105      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005138:	4b3d      	ldr	r3, [pc, #244]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	4a3c      	ldr	r2, [pc, #240]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800513e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005142:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d015      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005150:	4b37      	ldr	r3, [pc, #220]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005156:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	4934      	ldr	r1, [pc, #208]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005160:	4313      	orrs	r3, r2
 8005162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800516e:	d105      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005170:	4b2f      	ldr	r3, [pc, #188]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	4a2e      	ldr	r2, [pc, #184]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005176:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800517a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d015      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005188:	4b29      	ldr	r3, [pc, #164]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800518a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005196:	4926      	ldr	r1, [pc, #152]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005198:	4313      	orrs	r3, r2
 800519a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051a6:	d105      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051a8:	4b21      	ldr	r3, [pc, #132]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	4a20      	ldr	r2, [pc, #128]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d015      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051c0:	4b1b      	ldr	r3, [pc, #108]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ce:	4918      	ldr	r1, [pc, #96]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051de:	d105      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051e0:	4b13      	ldr	r3, [pc, #76]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	4a12      	ldr	r2, [pc, #72]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d015      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80051f8:	4b0d      	ldr	r3, [pc, #52]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005206:	490a      	ldr	r1, [pc, #40]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005212:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005216:	d105      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005218:	4b05      	ldr	r3, [pc, #20]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	4a04      	ldr	r2, [pc, #16]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800521e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005222:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005224:	7cbb      	ldrb	r3, [r7, #18]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40021000 	.word	0x40021000

08005234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e049      	b.n	80052da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fc fb28 	bl	80018b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3304      	adds	r3, #4
 8005270:	4619      	mov	r1, r3
 8005272:	4610      	mov	r0, r2
 8005274:	f000 fa48 	bl	8005708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
	...

080052e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d001      	beq.n	80052fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e04a      	b.n	8005392 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a21      	ldr	r2, [pc, #132]	; (80053a0 <HAL_TIM_Base_Start_IT+0xbc>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d018      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x6c>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005326:	d013      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x6c>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a1d      	ldr	r2, [pc, #116]	; (80053a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d00e      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x6c>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a1c      	ldr	r2, [pc, #112]	; (80053a8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d009      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x6c>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a1a      	ldr	r2, [pc, #104]	; (80053ac <HAL_TIM_Base_Start_IT+0xc8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d004      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x6c>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a19      	ldr	r2, [pc, #100]	; (80053b0 <HAL_TIM_Base_Start_IT+0xcc>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d115      	bne.n	800537c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	4b17      	ldr	r3, [pc, #92]	; (80053b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005358:	4013      	ands	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b06      	cmp	r3, #6
 8005360:	d015      	beq.n	800538e <HAL_TIM_Base_Start_IT+0xaa>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005368:	d011      	beq.n	800538e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f042 0201 	orr.w	r2, r2, #1
 8005378:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537a:	e008      	b.n	800538e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	e000      	b.n	8005390 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800538e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	40012c00 	.word	0x40012c00
 80053a4:	40000400 	.word	0x40000400
 80053a8:	40000800 	.word	0x40000800
 80053ac:	40013400 	.word	0x40013400
 80053b0:	40014000 	.word	0x40014000
 80053b4:	00010007 	.word	0x00010007

080053b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d122      	bne.n	8005414 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d11b      	bne.n	8005414 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f06f 0202 	mvn.w	r2, #2
 80053e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f965 	bl	80056ca <HAL_TIM_IC_CaptureCallback>
 8005400:	e005      	b.n	800540e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f957 	bl	80056b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f968 	bl	80056de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	2b04      	cmp	r3, #4
 8005420:	d122      	bne.n	8005468 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b04      	cmp	r3, #4
 800542e:	d11b      	bne.n	8005468 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f06f 0204 	mvn.w	r2, #4
 8005438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2202      	movs	r2, #2
 800543e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f93b 	bl	80056ca <HAL_TIM_IC_CaptureCallback>
 8005454:	e005      	b.n	8005462 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f92d 	bl	80056b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f93e 	bl	80056de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f003 0308 	and.w	r3, r3, #8
 8005472:	2b08      	cmp	r3, #8
 8005474:	d122      	bne.n	80054bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f003 0308 	and.w	r3, r3, #8
 8005480:	2b08      	cmp	r3, #8
 8005482:	d11b      	bne.n	80054bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f06f 0208 	mvn.w	r2, #8
 800548c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2204      	movs	r2, #4
 8005492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f911 	bl	80056ca <HAL_TIM_IC_CaptureCallback>
 80054a8:	e005      	b.n	80054b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f903 	bl	80056b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f914 	bl	80056de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	f003 0310 	and.w	r3, r3, #16
 80054c6:	2b10      	cmp	r3, #16
 80054c8:	d122      	bne.n	8005510 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	2b10      	cmp	r3, #16
 80054d6:	d11b      	bne.n	8005510 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f06f 0210 	mvn.w	r2, #16
 80054e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2208      	movs	r2, #8
 80054e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f8e7 	bl	80056ca <HAL_TIM_IC_CaptureCallback>
 80054fc:	e005      	b.n	800550a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f8d9 	bl	80056b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f8ea 	bl	80056de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b01      	cmp	r3, #1
 800551c:	d10e      	bne.n	800553c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	2b01      	cmp	r3, #1
 800552a:	d107      	bne.n	800553c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f06f 0201 	mvn.w	r2, #1
 8005534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7fc fa7c 	bl	8001a34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005546:	2b80      	cmp	r3, #128	; 0x80
 8005548:	d10e      	bne.n	8005568 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005554:	2b80      	cmp	r3, #128	; 0x80
 8005556:	d107      	bne.n	8005568 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f96a 	bl	800583c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005576:	d10e      	bne.n	8005596 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005582:	2b80      	cmp	r3, #128	; 0x80
 8005584:	d107      	bne.n	8005596 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800558e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f95d 	bl	8005850 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a0:	2b40      	cmp	r3, #64	; 0x40
 80055a2:	d10e      	bne.n	80055c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ae:	2b40      	cmp	r3, #64	; 0x40
 80055b0:	d107      	bne.n	80055c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f898 	bl	80056f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	f003 0320 	and.w	r3, r3, #32
 80055cc:	2b20      	cmp	r3, #32
 80055ce:	d10e      	bne.n	80055ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f003 0320 	and.w	r3, r3, #32
 80055da:	2b20      	cmp	r3, #32
 80055dc:	d107      	bne.n	80055ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f06f 0220 	mvn.w	r2, #32
 80055e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f91d 	bl	8005828 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055fc:	d10f      	bne.n	800561e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005608:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800560c:	d107      	bne.n	800561e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f923 	bl	8005864 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005628:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800562c:	d10f      	bne.n	800564e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005638:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800563c:	d107      	bne.n	800564e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f915 	bl	8005878 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800565c:	d10f      	bne.n	800567e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005668:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800566c:	d107      	bne.n	800567e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f907 	bl	800588c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005688:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800568c:	d10f      	bne.n	80056ae <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005698:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800569c:	d107      	bne.n	80056ae <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80056a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f8f9 	bl	80058a0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056ae:	bf00      	nop
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056e6:	bf00      	nop
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
	...

08005708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a3c      	ldr	r2, [pc, #240]	; (800580c <TIM_Base_SetConfig+0x104>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00f      	beq.n	8005740 <TIM_Base_SetConfig+0x38>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005726:	d00b      	beq.n	8005740 <TIM_Base_SetConfig+0x38>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a39      	ldr	r2, [pc, #228]	; (8005810 <TIM_Base_SetConfig+0x108>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d007      	beq.n	8005740 <TIM_Base_SetConfig+0x38>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a38      	ldr	r2, [pc, #224]	; (8005814 <TIM_Base_SetConfig+0x10c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d003      	beq.n	8005740 <TIM_Base_SetConfig+0x38>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a37      	ldr	r2, [pc, #220]	; (8005818 <TIM_Base_SetConfig+0x110>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d108      	bne.n	8005752 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a2d      	ldr	r2, [pc, #180]	; (800580c <TIM_Base_SetConfig+0x104>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d01b      	beq.n	8005792 <TIM_Base_SetConfig+0x8a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005760:	d017      	beq.n	8005792 <TIM_Base_SetConfig+0x8a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a2a      	ldr	r2, [pc, #168]	; (8005810 <TIM_Base_SetConfig+0x108>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d013      	beq.n	8005792 <TIM_Base_SetConfig+0x8a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a29      	ldr	r2, [pc, #164]	; (8005814 <TIM_Base_SetConfig+0x10c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00f      	beq.n	8005792 <TIM_Base_SetConfig+0x8a>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a28      	ldr	r2, [pc, #160]	; (8005818 <TIM_Base_SetConfig+0x110>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00b      	beq.n	8005792 <TIM_Base_SetConfig+0x8a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a27      	ldr	r2, [pc, #156]	; (800581c <TIM_Base_SetConfig+0x114>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d007      	beq.n	8005792 <TIM_Base_SetConfig+0x8a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a26      	ldr	r2, [pc, #152]	; (8005820 <TIM_Base_SetConfig+0x118>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d003      	beq.n	8005792 <TIM_Base_SetConfig+0x8a>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a25      	ldr	r2, [pc, #148]	; (8005824 <TIM_Base_SetConfig+0x11c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d108      	bne.n	80057a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a10      	ldr	r2, [pc, #64]	; (800580c <TIM_Base_SetConfig+0x104>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00f      	beq.n	80057f0 <TIM_Base_SetConfig+0xe8>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a11      	ldr	r2, [pc, #68]	; (8005818 <TIM_Base_SetConfig+0x110>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d00b      	beq.n	80057f0 <TIM_Base_SetConfig+0xe8>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a10      	ldr	r2, [pc, #64]	; (800581c <TIM_Base_SetConfig+0x114>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d007      	beq.n	80057f0 <TIM_Base_SetConfig+0xe8>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a0f      	ldr	r2, [pc, #60]	; (8005820 <TIM_Base_SetConfig+0x118>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d003      	beq.n	80057f0 <TIM_Base_SetConfig+0xe8>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a0e      	ldr	r2, [pc, #56]	; (8005824 <TIM_Base_SetConfig+0x11c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d103      	bne.n	80057f8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	691a      	ldr	r2, [r3, #16]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	615a      	str	r2, [r3, #20]
}
 80057fe:	bf00      	nop
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	40012c00 	.word	0x40012c00
 8005810:	40000400 	.word	0x40000400
 8005814:	40000800 	.word	0x40000800
 8005818:	40013400 	.word	0x40013400
 800581c:	40014000 	.word	0x40014000
 8005820:	40014400 	.word	0x40014400
 8005824:	40014800 	.word	0x40014800

08005828 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e042      	b.n	800594c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d106      	bne.n	80058de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7fc f80f 	bl	80018fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2224      	movs	r2, #36	; 0x24
 80058e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0201 	bic.w	r2, r2, #1
 80058f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f82c 	bl	8005954 <UART_SetConfig>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e022      	b.n	800594c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 fabe 	bl	8005e90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005922:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005932:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 0201 	orr.w	r2, r2, #1
 8005942:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fb45 	bl	8005fd4 <UART_CheckIdleState>
 800594a:	4603      	mov	r3, r0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3708      	adds	r7, #8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005954:	b5b0      	push	{r4, r5, r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	431a      	orrs	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	431a      	orrs	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	69db      	ldr	r3, [r3, #28]
 8005974:	4313      	orrs	r3, r2
 8005976:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	4baf      	ldr	r3, [pc, #700]	; (8005c3c <UART_SetConfig+0x2e8>)
 8005980:	4013      	ands	r3, r2
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	6812      	ldr	r2, [r2, #0]
 8005986:	69f9      	ldr	r1, [r7, #28]
 8005988:	430b      	orrs	r3, r1
 800598a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4aa4      	ldr	r2, [pc, #656]	; (8005c40 <UART_SetConfig+0x2ec>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d004      	beq.n	80059bc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	69fa      	ldr	r2, [r7, #28]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80059c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6812      	ldr	r2, [r2, #0]
 80059ce:	69f9      	ldr	r1, [r7, #28]
 80059d0:	430b      	orrs	r3, r1
 80059d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059da:	f023 010f 	bic.w	r1, r3, #15
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a95      	ldr	r2, [pc, #596]	; (8005c44 <UART_SetConfig+0x2f0>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d120      	bne.n	8005a36 <UART_SetConfig+0xe2>
 80059f4:	4b94      	ldr	r3, [pc, #592]	; (8005c48 <UART_SetConfig+0x2f4>)
 80059f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	2b03      	cmp	r3, #3
 8005a00:	d816      	bhi.n	8005a30 <UART_SetConfig+0xdc>
 8005a02:	a201      	add	r2, pc, #4	; (adr r2, 8005a08 <UART_SetConfig+0xb4>)
 8005a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a08:	08005a19 	.word	0x08005a19
 8005a0c:	08005a25 	.word	0x08005a25
 8005a10:	08005a1f 	.word	0x08005a1f
 8005a14:	08005a2b 	.word	0x08005a2b
 8005a18:	2301      	movs	r3, #1
 8005a1a:	76fb      	strb	r3, [r7, #27]
 8005a1c:	e0bc      	b.n	8005b98 <UART_SetConfig+0x244>
 8005a1e:	2302      	movs	r3, #2
 8005a20:	76fb      	strb	r3, [r7, #27]
 8005a22:	e0b9      	b.n	8005b98 <UART_SetConfig+0x244>
 8005a24:	2304      	movs	r3, #4
 8005a26:	76fb      	strb	r3, [r7, #27]
 8005a28:	e0b6      	b.n	8005b98 <UART_SetConfig+0x244>
 8005a2a:	2308      	movs	r3, #8
 8005a2c:	76fb      	strb	r3, [r7, #27]
 8005a2e:	e0b3      	b.n	8005b98 <UART_SetConfig+0x244>
 8005a30:	2310      	movs	r3, #16
 8005a32:	76fb      	strb	r3, [r7, #27]
 8005a34:	e0b0      	b.n	8005b98 <UART_SetConfig+0x244>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a84      	ldr	r2, [pc, #528]	; (8005c4c <UART_SetConfig+0x2f8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d132      	bne.n	8005aa6 <UART_SetConfig+0x152>
 8005a40:	4b81      	ldr	r3, [pc, #516]	; (8005c48 <UART_SetConfig+0x2f4>)
 8005a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a46:	f003 030c 	and.w	r3, r3, #12
 8005a4a:	2b0c      	cmp	r3, #12
 8005a4c:	d828      	bhi.n	8005aa0 <UART_SetConfig+0x14c>
 8005a4e:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <UART_SetConfig+0x100>)
 8005a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a54:	08005a89 	.word	0x08005a89
 8005a58:	08005aa1 	.word	0x08005aa1
 8005a5c:	08005aa1 	.word	0x08005aa1
 8005a60:	08005aa1 	.word	0x08005aa1
 8005a64:	08005a95 	.word	0x08005a95
 8005a68:	08005aa1 	.word	0x08005aa1
 8005a6c:	08005aa1 	.word	0x08005aa1
 8005a70:	08005aa1 	.word	0x08005aa1
 8005a74:	08005a8f 	.word	0x08005a8f
 8005a78:	08005aa1 	.word	0x08005aa1
 8005a7c:	08005aa1 	.word	0x08005aa1
 8005a80:	08005aa1 	.word	0x08005aa1
 8005a84:	08005a9b 	.word	0x08005a9b
 8005a88:	2300      	movs	r3, #0
 8005a8a:	76fb      	strb	r3, [r7, #27]
 8005a8c:	e084      	b.n	8005b98 <UART_SetConfig+0x244>
 8005a8e:	2302      	movs	r3, #2
 8005a90:	76fb      	strb	r3, [r7, #27]
 8005a92:	e081      	b.n	8005b98 <UART_SetConfig+0x244>
 8005a94:	2304      	movs	r3, #4
 8005a96:	76fb      	strb	r3, [r7, #27]
 8005a98:	e07e      	b.n	8005b98 <UART_SetConfig+0x244>
 8005a9a:	2308      	movs	r3, #8
 8005a9c:	76fb      	strb	r3, [r7, #27]
 8005a9e:	e07b      	b.n	8005b98 <UART_SetConfig+0x244>
 8005aa0:	2310      	movs	r3, #16
 8005aa2:	76fb      	strb	r3, [r7, #27]
 8005aa4:	e078      	b.n	8005b98 <UART_SetConfig+0x244>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a69      	ldr	r2, [pc, #420]	; (8005c50 <UART_SetConfig+0x2fc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d120      	bne.n	8005af2 <UART_SetConfig+0x19e>
 8005ab0:	4b65      	ldr	r3, [pc, #404]	; (8005c48 <UART_SetConfig+0x2f4>)
 8005ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005aba:	2b30      	cmp	r3, #48	; 0x30
 8005abc:	d013      	beq.n	8005ae6 <UART_SetConfig+0x192>
 8005abe:	2b30      	cmp	r3, #48	; 0x30
 8005ac0:	d814      	bhi.n	8005aec <UART_SetConfig+0x198>
 8005ac2:	2b20      	cmp	r3, #32
 8005ac4:	d009      	beq.n	8005ada <UART_SetConfig+0x186>
 8005ac6:	2b20      	cmp	r3, #32
 8005ac8:	d810      	bhi.n	8005aec <UART_SetConfig+0x198>
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <UART_SetConfig+0x180>
 8005ace:	2b10      	cmp	r3, #16
 8005ad0:	d006      	beq.n	8005ae0 <UART_SetConfig+0x18c>
 8005ad2:	e00b      	b.n	8005aec <UART_SetConfig+0x198>
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	76fb      	strb	r3, [r7, #27]
 8005ad8:	e05e      	b.n	8005b98 <UART_SetConfig+0x244>
 8005ada:	2302      	movs	r3, #2
 8005adc:	76fb      	strb	r3, [r7, #27]
 8005ade:	e05b      	b.n	8005b98 <UART_SetConfig+0x244>
 8005ae0:	2304      	movs	r3, #4
 8005ae2:	76fb      	strb	r3, [r7, #27]
 8005ae4:	e058      	b.n	8005b98 <UART_SetConfig+0x244>
 8005ae6:	2308      	movs	r3, #8
 8005ae8:	76fb      	strb	r3, [r7, #27]
 8005aea:	e055      	b.n	8005b98 <UART_SetConfig+0x244>
 8005aec:	2310      	movs	r3, #16
 8005aee:	76fb      	strb	r3, [r7, #27]
 8005af0:	e052      	b.n	8005b98 <UART_SetConfig+0x244>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a57      	ldr	r2, [pc, #348]	; (8005c54 <UART_SetConfig+0x300>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d120      	bne.n	8005b3e <UART_SetConfig+0x1ea>
 8005afc:	4b52      	ldr	r3, [pc, #328]	; (8005c48 <UART_SetConfig+0x2f4>)
 8005afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b06:	2bc0      	cmp	r3, #192	; 0xc0
 8005b08:	d013      	beq.n	8005b32 <UART_SetConfig+0x1de>
 8005b0a:	2bc0      	cmp	r3, #192	; 0xc0
 8005b0c:	d814      	bhi.n	8005b38 <UART_SetConfig+0x1e4>
 8005b0e:	2b80      	cmp	r3, #128	; 0x80
 8005b10:	d009      	beq.n	8005b26 <UART_SetConfig+0x1d2>
 8005b12:	2b80      	cmp	r3, #128	; 0x80
 8005b14:	d810      	bhi.n	8005b38 <UART_SetConfig+0x1e4>
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d002      	beq.n	8005b20 <UART_SetConfig+0x1cc>
 8005b1a:	2b40      	cmp	r3, #64	; 0x40
 8005b1c:	d006      	beq.n	8005b2c <UART_SetConfig+0x1d8>
 8005b1e:	e00b      	b.n	8005b38 <UART_SetConfig+0x1e4>
 8005b20:	2300      	movs	r3, #0
 8005b22:	76fb      	strb	r3, [r7, #27]
 8005b24:	e038      	b.n	8005b98 <UART_SetConfig+0x244>
 8005b26:	2302      	movs	r3, #2
 8005b28:	76fb      	strb	r3, [r7, #27]
 8005b2a:	e035      	b.n	8005b98 <UART_SetConfig+0x244>
 8005b2c:	2304      	movs	r3, #4
 8005b2e:	76fb      	strb	r3, [r7, #27]
 8005b30:	e032      	b.n	8005b98 <UART_SetConfig+0x244>
 8005b32:	2308      	movs	r3, #8
 8005b34:	76fb      	strb	r3, [r7, #27]
 8005b36:	e02f      	b.n	8005b98 <UART_SetConfig+0x244>
 8005b38:	2310      	movs	r3, #16
 8005b3a:	76fb      	strb	r3, [r7, #27]
 8005b3c:	e02c      	b.n	8005b98 <UART_SetConfig+0x244>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a3f      	ldr	r2, [pc, #252]	; (8005c40 <UART_SetConfig+0x2ec>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d125      	bne.n	8005b94 <UART_SetConfig+0x240>
 8005b48:	4b3f      	ldr	r3, [pc, #252]	; (8005c48 <UART_SetConfig+0x2f4>)
 8005b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b56:	d017      	beq.n	8005b88 <UART_SetConfig+0x234>
 8005b58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b5c:	d817      	bhi.n	8005b8e <UART_SetConfig+0x23a>
 8005b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b62:	d00b      	beq.n	8005b7c <UART_SetConfig+0x228>
 8005b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b68:	d811      	bhi.n	8005b8e <UART_SetConfig+0x23a>
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <UART_SetConfig+0x222>
 8005b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b72:	d006      	beq.n	8005b82 <UART_SetConfig+0x22e>
 8005b74:	e00b      	b.n	8005b8e <UART_SetConfig+0x23a>
 8005b76:	2300      	movs	r3, #0
 8005b78:	76fb      	strb	r3, [r7, #27]
 8005b7a:	e00d      	b.n	8005b98 <UART_SetConfig+0x244>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	76fb      	strb	r3, [r7, #27]
 8005b80:	e00a      	b.n	8005b98 <UART_SetConfig+0x244>
 8005b82:	2304      	movs	r3, #4
 8005b84:	76fb      	strb	r3, [r7, #27]
 8005b86:	e007      	b.n	8005b98 <UART_SetConfig+0x244>
 8005b88:	2308      	movs	r3, #8
 8005b8a:	76fb      	strb	r3, [r7, #27]
 8005b8c:	e004      	b.n	8005b98 <UART_SetConfig+0x244>
 8005b8e:	2310      	movs	r3, #16
 8005b90:	76fb      	strb	r3, [r7, #27]
 8005b92:	e001      	b.n	8005b98 <UART_SetConfig+0x244>
 8005b94:	2310      	movs	r3, #16
 8005b96:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a28      	ldr	r2, [pc, #160]	; (8005c40 <UART_SetConfig+0x2ec>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	f040 809e 	bne.w	8005ce0 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ba4:	7efb      	ldrb	r3, [r7, #27]
 8005ba6:	2b08      	cmp	r3, #8
 8005ba8:	d823      	bhi.n	8005bf2 <UART_SetConfig+0x29e>
 8005baa:	a201      	add	r2, pc, #4	; (adr r2, 8005bb0 <UART_SetConfig+0x25c>)
 8005bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb0:	08005bd5 	.word	0x08005bd5
 8005bb4:	08005bf3 	.word	0x08005bf3
 8005bb8:	08005bdd 	.word	0x08005bdd
 8005bbc:	08005bf3 	.word	0x08005bf3
 8005bc0:	08005be3 	.word	0x08005be3
 8005bc4:	08005bf3 	.word	0x08005bf3
 8005bc8:	08005bf3 	.word	0x08005bf3
 8005bcc:	08005bf3 	.word	0x08005bf3
 8005bd0:	08005beb 	.word	0x08005beb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bd4:	f7ff f8cc 	bl	8004d70 <HAL_RCC_GetPCLK1Freq>
 8005bd8:	6178      	str	r0, [r7, #20]
        break;
 8005bda:	e00f      	b.n	8005bfc <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bdc:	4b1e      	ldr	r3, [pc, #120]	; (8005c58 <UART_SetConfig+0x304>)
 8005bde:	617b      	str	r3, [r7, #20]
        break;
 8005be0:	e00c      	b.n	8005bfc <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005be2:	f7ff f857 	bl	8004c94 <HAL_RCC_GetSysClockFreq>
 8005be6:	6178      	str	r0, [r7, #20]
        break;
 8005be8:	e008      	b.n	8005bfc <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bee:	617b      	str	r3, [r7, #20]
        break;
 8005bf0:	e004      	b.n	8005bfc <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	76bb      	strb	r3, [r7, #26]
        break;
 8005bfa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 812e 	beq.w	8005e60 <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	4a14      	ldr	r2, [pc, #80]	; (8005c5c <UART_SetConfig+0x308>)
 8005c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c16:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	4413      	add	r3, r2
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d305      	bcc.n	8005c34 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d915      	bls.n	8005c60 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	76bb      	strb	r3, [r7, #26]
 8005c38:	e112      	b.n	8005e60 <UART_SetConfig+0x50c>
 8005c3a:	bf00      	nop
 8005c3c:	cfff69f3 	.word	0xcfff69f3
 8005c40:	40008000 	.word	0x40008000
 8005c44:	40013800 	.word	0x40013800
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	40004400 	.word	0x40004400
 8005c50:	40004800 	.word	0x40004800
 8005c54:	40004c00 	.word	0x40004c00
 8005c58:	00f42400 	.word	0x00f42400
 8005c5c:	08007400 	.word	0x08007400
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f04f 0100 	mov.w	r1, #0
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	4a86      	ldr	r2, [pc, #536]	; (8005e88 <UART_SetConfig+0x534>)
 8005c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	f04f 0300 	mov.w	r3, #0
 8005c78:	f7fa ffaa 	bl	8000bd0 <__aeabi_uldivmod>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4610      	mov	r0, r2
 8005c82:	4619      	mov	r1, r3
 8005c84:	f04f 0200 	mov.w	r2, #0
 8005c88:	f04f 0300 	mov.w	r3, #0
 8005c8c:	020b      	lsls	r3, r1, #8
 8005c8e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c92:	0202      	lsls	r2, r0, #8
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	6849      	ldr	r1, [r1, #4]
 8005c98:	0849      	lsrs	r1, r1, #1
 8005c9a:	4608      	mov	r0, r1
 8005c9c:	f04f 0100 	mov.w	r1, #0
 8005ca0:	1814      	adds	r4, r2, r0
 8005ca2:	eb43 0501 	adc.w	r5, r3, r1
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	461a      	mov	r2, r3
 8005cac:	f04f 0300 	mov.w	r3, #0
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	4629      	mov	r1, r5
 8005cb4:	f7fa ff8c 	bl	8000bd0 <__aeabi_uldivmod>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cc6:	d308      	bcc.n	8005cda <UART_SetConfig+0x386>
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cce:	d204      	bcs.n	8005cda <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	60da      	str	r2, [r3, #12]
 8005cd8:	e0c2      	b.n	8005e60 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	76bb      	strb	r3, [r7, #26]
 8005cde:	e0bf      	b.n	8005e60 <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ce8:	d165      	bne.n	8005db6 <UART_SetConfig+0x462>
  {
    switch (clocksource)
 8005cea:	7efb      	ldrb	r3, [r7, #27]
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d828      	bhi.n	8005d42 <UART_SetConfig+0x3ee>
 8005cf0:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <UART_SetConfig+0x3a4>)
 8005cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf6:	bf00      	nop
 8005cf8:	08005d1d 	.word	0x08005d1d
 8005cfc:	08005d25 	.word	0x08005d25
 8005d00:	08005d2d 	.word	0x08005d2d
 8005d04:	08005d43 	.word	0x08005d43
 8005d08:	08005d33 	.word	0x08005d33
 8005d0c:	08005d43 	.word	0x08005d43
 8005d10:	08005d43 	.word	0x08005d43
 8005d14:	08005d43 	.word	0x08005d43
 8005d18:	08005d3b 	.word	0x08005d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d1c:	f7ff f828 	bl	8004d70 <HAL_RCC_GetPCLK1Freq>
 8005d20:	6178      	str	r0, [r7, #20]
        break;
 8005d22:	e013      	b.n	8005d4c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d24:	f7ff f83a 	bl	8004d9c <HAL_RCC_GetPCLK2Freq>
 8005d28:	6178      	str	r0, [r7, #20]
        break;
 8005d2a:	e00f      	b.n	8005d4c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d2c:	4b57      	ldr	r3, [pc, #348]	; (8005e8c <UART_SetConfig+0x538>)
 8005d2e:	617b      	str	r3, [r7, #20]
        break;
 8005d30:	e00c      	b.n	8005d4c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d32:	f7fe ffaf 	bl	8004c94 <HAL_RCC_GetSysClockFreq>
 8005d36:	6178      	str	r0, [r7, #20]
        break;
 8005d38:	e008      	b.n	8005d4c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d3e:	617b      	str	r3, [r7, #20]
        break;
 8005d40:	e004      	b.n	8005d4c <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	76bb      	strb	r3, [r7, #26]
        break;
 8005d4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 8086 	beq.w	8005e60 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	4a4b      	ldr	r2, [pc, #300]	; (8005e88 <UART_SetConfig+0x534>)
 8005d5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d66:	005a      	lsls	r2, r3, #1
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	085b      	lsrs	r3, r3, #1
 8005d6e:	441a      	add	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	2b0f      	cmp	r3, #15
 8005d80:	d916      	bls.n	8005db0 <UART_SetConfig+0x45c>
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d88:	d212      	bcs.n	8005db0 <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	f023 030f 	bic.w	r3, r3, #15
 8005d92:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	085b      	lsrs	r3, r3, #1
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	f003 0307 	and.w	r3, r3, #7
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	89fb      	ldrh	r3, [r7, #14]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	89fa      	ldrh	r2, [r7, #14]
 8005dac:	60da      	str	r2, [r3, #12]
 8005dae:	e057      	b.n	8005e60 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	76bb      	strb	r3, [r7, #26]
 8005db4:	e054      	b.n	8005e60 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005db6:	7efb      	ldrb	r3, [r7, #27]
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	d828      	bhi.n	8005e0e <UART_SetConfig+0x4ba>
 8005dbc:	a201      	add	r2, pc, #4	; (adr r2, 8005dc4 <UART_SetConfig+0x470>)
 8005dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc2:	bf00      	nop
 8005dc4:	08005de9 	.word	0x08005de9
 8005dc8:	08005df1 	.word	0x08005df1
 8005dcc:	08005df9 	.word	0x08005df9
 8005dd0:	08005e0f 	.word	0x08005e0f
 8005dd4:	08005dff 	.word	0x08005dff
 8005dd8:	08005e0f 	.word	0x08005e0f
 8005ddc:	08005e0f 	.word	0x08005e0f
 8005de0:	08005e0f 	.word	0x08005e0f
 8005de4:	08005e07 	.word	0x08005e07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005de8:	f7fe ffc2 	bl	8004d70 <HAL_RCC_GetPCLK1Freq>
 8005dec:	6178      	str	r0, [r7, #20]
        break;
 8005dee:	e013      	b.n	8005e18 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005df0:	f7fe ffd4 	bl	8004d9c <HAL_RCC_GetPCLK2Freq>
 8005df4:	6178      	str	r0, [r7, #20]
        break;
 8005df6:	e00f      	b.n	8005e18 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005df8:	4b24      	ldr	r3, [pc, #144]	; (8005e8c <UART_SetConfig+0x538>)
 8005dfa:	617b      	str	r3, [r7, #20]
        break;
 8005dfc:	e00c      	b.n	8005e18 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dfe:	f7fe ff49 	bl	8004c94 <HAL_RCC_GetSysClockFreq>
 8005e02:	6178      	str	r0, [r7, #20]
        break;
 8005e04:	e008      	b.n	8005e18 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e0a:	617b      	str	r3, [r7, #20]
        break;
 8005e0c:	e004      	b.n	8005e18 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	76bb      	strb	r3, [r7, #26]
        break;
 8005e16:	bf00      	nop
    }

    if (pclk != 0U)
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d020      	beq.n	8005e60 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	4a19      	ldr	r2, [pc, #100]	; (8005e88 <UART_SetConfig+0x534>)
 8005e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e28:	461a      	mov	r2, r3
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	085b      	lsrs	r3, r3, #1
 8005e36:	441a      	add	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	2b0f      	cmp	r3, #15
 8005e48:	d908      	bls.n	8005e5c <UART_SetConfig+0x508>
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e50:	d204      	bcs.n	8005e5c <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	60da      	str	r2, [r3, #12]
 8005e5a:	e001      	b.n	8005e60 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005e7c:	7ebb      	ldrb	r3, [r7, #26]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3720      	adds	r7, #32
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bdb0      	pop	{r4, r5, r7, pc}
 8005e86:	bf00      	nop
 8005e88:	08007400 	.word	0x08007400
 8005e8c:	00f42400 	.word	0x00f42400

08005e90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00a      	beq.n	8005eba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00a      	beq.n	8005edc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00a      	beq.n	8005efe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f02:	f003 0308 	and.w	r3, r3, #8
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00a      	beq.n	8005f20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f24:	f003 0310 	and.w	r3, r3, #16
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00a      	beq.n	8005f42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f46:	f003 0320 	and.w	r3, r3, #32
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d01a      	beq.n	8005fa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f8e:	d10a      	bne.n	8005fa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00a      	beq.n	8005fc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	605a      	str	r2, [r3, #4]
  }
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af02      	add	r7, sp, #8
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fe4:	f7fb fdc6 	bl	8001b74 <HAL_GetTick>
 8005fe8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0308 	and.w	r3, r3, #8
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d10e      	bne.n	8006016 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ff8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f82f 	bl	800606a <UART_WaitOnFlagUntilTimeout>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e025      	b.n	8006062 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0304 	and.w	r3, r3, #4
 8006020:	2b04      	cmp	r3, #4
 8006022:	d10e      	bne.n	8006042 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006024:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f819 	bl	800606a <UART_WaitOnFlagUntilTimeout>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e00f      	b.n	8006062 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2220      	movs	r2, #32
 8006046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2220      	movs	r2, #32
 800604e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b084      	sub	sp, #16
 800606e:	af00      	add	r7, sp, #0
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	603b      	str	r3, [r7, #0]
 8006076:	4613      	mov	r3, r2
 8006078:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800607a:	e062      	b.n	8006142 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006082:	d05e      	beq.n	8006142 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006084:	f7fb fd76 	bl	8001b74 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	69ba      	ldr	r2, [r7, #24]
 8006090:	429a      	cmp	r2, r3
 8006092:	d302      	bcc.n	800609a <UART_WaitOnFlagUntilTimeout+0x30>
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d11d      	bne.n	80060d6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80060a8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689a      	ldr	r2, [r3, #8]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0201 	bic.w	r2, r2, #1
 80060b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2220      	movs	r2, #32
 80060be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2220      	movs	r2, #32
 80060c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e045      	b.n	8006162 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d02e      	beq.n	8006142 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060f2:	d126      	bne.n	8006142 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800610c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f022 0201 	bic.w	r2, r2, #1
 800611c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2220      	movs	r2, #32
 8006122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2220      	movs	r2, #32
 800612a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2220      	movs	r2, #32
 8006132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e00f      	b.n	8006162 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69da      	ldr	r2, [r3, #28]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	4013      	ands	r3, r2
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	429a      	cmp	r2, r3
 8006150:	bf0c      	ite	eq
 8006152:	2301      	moveq	r3, #1
 8006154:	2300      	movne	r3, #0
 8006156:	b2db      	uxtb	r3, r3
 8006158:	461a      	mov	r2, r3
 800615a:	79fb      	ldrb	r3, [r7, #7]
 800615c:	429a      	cmp	r2, r3
 800615e:	d08d      	beq.n	800607c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800616a:	b480      	push	{r7}
 800616c:	b085      	sub	sp, #20
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <HAL_UARTEx_DisableFifoMode+0x16>
 800617c:	2302      	movs	r3, #2
 800617e:	e027      	b.n	80061d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2224      	movs	r2, #36	; 0x24
 800618c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 0201 	bic.w	r2, r2, #1
 80061a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e02d      	b.n	8006250 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2224      	movs	r2, #36	; 0x24
 8006200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0201 	bic.w	r2, r2, #1
 800621a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f84f 	bl	80062d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2220      	movs	r2, #32
 8006242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006268:	2b01      	cmp	r3, #1
 800626a:	d101      	bne.n	8006270 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800626c:	2302      	movs	r3, #2
 800626e:	e02d      	b.n	80062cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2224      	movs	r2, #36	; 0x24
 800627c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0201 	bic.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f811 	bl	80062d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2220      	movs	r2, #32
 80062be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d108      	bne.n	80062f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062f4:	e031      	b.n	800635a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062f6:	2308      	movs	r3, #8
 80062f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062fa:	2308      	movs	r3, #8
 80062fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	0e5b      	lsrs	r3, r3, #25
 8006306:	b2db      	uxtb	r3, r3
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	0f5b      	lsrs	r3, r3, #29
 8006316:	b2db      	uxtb	r3, r3
 8006318:	f003 0307 	and.w	r3, r3, #7
 800631c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800631e:	7bbb      	ldrb	r3, [r7, #14]
 8006320:	7b3a      	ldrb	r2, [r7, #12]
 8006322:	4911      	ldr	r1, [pc, #68]	; (8006368 <UARTEx_SetNbDataToProcess+0x94>)
 8006324:	5c8a      	ldrb	r2, [r1, r2]
 8006326:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800632a:	7b3a      	ldrb	r2, [r7, #12]
 800632c:	490f      	ldr	r1, [pc, #60]	; (800636c <UARTEx_SetNbDataToProcess+0x98>)
 800632e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006330:	fb93 f3f2 	sdiv	r3, r3, r2
 8006334:	b29a      	uxth	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800633c:	7bfb      	ldrb	r3, [r7, #15]
 800633e:	7b7a      	ldrb	r2, [r7, #13]
 8006340:	4909      	ldr	r1, [pc, #36]	; (8006368 <UARTEx_SetNbDataToProcess+0x94>)
 8006342:	5c8a      	ldrb	r2, [r1, r2]
 8006344:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006348:	7b7a      	ldrb	r2, [r7, #13]
 800634a:	4908      	ldr	r1, [pc, #32]	; (800636c <UARTEx_SetNbDataToProcess+0x98>)
 800634c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800634e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006352:	b29a      	uxth	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800635a:	bf00      	nop
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	08007418 	.word	0x08007418
 800636c:	08007420 	.word	0x08007420

08006370 <__errno>:
 8006370:	4b01      	ldr	r3, [pc, #4]	; (8006378 <__errno+0x8>)
 8006372:	6818      	ldr	r0, [r3, #0]
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	2000201c 	.word	0x2000201c

0800637c <__libc_init_array>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	4d0d      	ldr	r5, [pc, #52]	; (80063b4 <__libc_init_array+0x38>)
 8006380:	4c0d      	ldr	r4, [pc, #52]	; (80063b8 <__libc_init_array+0x3c>)
 8006382:	1b64      	subs	r4, r4, r5
 8006384:	10a4      	asrs	r4, r4, #2
 8006386:	2600      	movs	r6, #0
 8006388:	42a6      	cmp	r6, r4
 800638a:	d109      	bne.n	80063a0 <__libc_init_array+0x24>
 800638c:	4d0b      	ldr	r5, [pc, #44]	; (80063bc <__libc_init_array+0x40>)
 800638e:	4c0c      	ldr	r4, [pc, #48]	; (80063c0 <__libc_init_array+0x44>)
 8006390:	f001 f81c 	bl	80073cc <_init>
 8006394:	1b64      	subs	r4, r4, r5
 8006396:	10a4      	asrs	r4, r4, #2
 8006398:	2600      	movs	r6, #0
 800639a:	42a6      	cmp	r6, r4
 800639c:	d105      	bne.n	80063aa <__libc_init_array+0x2e>
 800639e:	bd70      	pop	{r4, r5, r6, pc}
 80063a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a4:	4798      	blx	r3
 80063a6:	3601      	adds	r6, #1
 80063a8:	e7ee      	b.n	8006388 <__libc_init_array+0xc>
 80063aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ae:	4798      	blx	r3
 80063b0:	3601      	adds	r6, #1
 80063b2:	e7f2      	b.n	800639a <__libc_init_array+0x1e>
 80063b4:	08007478 	.word	0x08007478
 80063b8:	08007478 	.word	0x08007478
 80063bc:	08007478 	.word	0x08007478
 80063c0:	0800747c 	.word	0x0800747c

080063c4 <memset>:
 80063c4:	4402      	add	r2, r0
 80063c6:	4603      	mov	r3, r0
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d100      	bne.n	80063ce <memset+0xa>
 80063cc:	4770      	bx	lr
 80063ce:	f803 1b01 	strb.w	r1, [r3], #1
 80063d2:	e7f9      	b.n	80063c8 <memset+0x4>

080063d4 <round>:
 80063d4:	ec51 0b10 	vmov	r0, r1, d0
 80063d8:	b570      	push	{r4, r5, r6, lr}
 80063da:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80063de:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80063e2:	2c13      	cmp	r4, #19
 80063e4:	ee10 2a10 	vmov	r2, s0
 80063e8:	460b      	mov	r3, r1
 80063ea:	dc19      	bgt.n	8006420 <round+0x4c>
 80063ec:	2c00      	cmp	r4, #0
 80063ee:	da09      	bge.n	8006404 <round+0x30>
 80063f0:	3401      	adds	r4, #1
 80063f2:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80063f6:	d103      	bne.n	8006400 <round+0x2c>
 80063f8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80063fc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006400:	2100      	movs	r1, #0
 8006402:	e028      	b.n	8006456 <round+0x82>
 8006404:	4d15      	ldr	r5, [pc, #84]	; (800645c <round+0x88>)
 8006406:	4125      	asrs	r5, r4
 8006408:	ea01 0605 	and.w	r6, r1, r5
 800640c:	4332      	orrs	r2, r6
 800640e:	d00e      	beq.n	800642e <round+0x5a>
 8006410:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006414:	fa42 f404 	asr.w	r4, r2, r4
 8006418:	4423      	add	r3, r4
 800641a:	ea23 0305 	bic.w	r3, r3, r5
 800641e:	e7ef      	b.n	8006400 <round+0x2c>
 8006420:	2c33      	cmp	r4, #51	; 0x33
 8006422:	dd07      	ble.n	8006434 <round+0x60>
 8006424:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8006428:	d101      	bne.n	800642e <round+0x5a>
 800642a:	f7f9 fefb 	bl	8000224 <__adddf3>
 800642e:	ec41 0b10 	vmov	d0, r0, r1
 8006432:	bd70      	pop	{r4, r5, r6, pc}
 8006434:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8006438:	f04f 35ff 	mov.w	r5, #4294967295
 800643c:	40f5      	lsrs	r5, r6
 800643e:	4228      	tst	r0, r5
 8006440:	d0f5      	beq.n	800642e <round+0x5a>
 8006442:	2101      	movs	r1, #1
 8006444:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8006448:	fa01 f404 	lsl.w	r4, r1, r4
 800644c:	1912      	adds	r2, r2, r4
 800644e:	bf28      	it	cs
 8006450:	185b      	addcs	r3, r3, r1
 8006452:	ea22 0105 	bic.w	r1, r2, r5
 8006456:	4608      	mov	r0, r1
 8006458:	4619      	mov	r1, r3
 800645a:	e7e8      	b.n	800642e <round+0x5a>
 800645c:	000fffff 	.word	0x000fffff

08006460 <pow>:
 8006460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006464:	ec59 8b10 	vmov	r8, r9, d0
 8006468:	ec57 6b11 	vmov	r6, r7, d1
 800646c:	f000 f8a8 	bl	80065c0 <__ieee754_pow>
 8006470:	4b4e      	ldr	r3, [pc, #312]	; (80065ac <pow+0x14c>)
 8006472:	f993 3000 	ldrsb.w	r3, [r3]
 8006476:	3301      	adds	r3, #1
 8006478:	ec55 4b10 	vmov	r4, r5, d0
 800647c:	d015      	beq.n	80064aa <pow+0x4a>
 800647e:	4632      	mov	r2, r6
 8006480:	463b      	mov	r3, r7
 8006482:	4630      	mov	r0, r6
 8006484:	4639      	mov	r1, r7
 8006486:	f7fa fb1d 	bl	8000ac4 <__aeabi_dcmpun>
 800648a:	b970      	cbnz	r0, 80064aa <pow+0x4a>
 800648c:	4642      	mov	r2, r8
 800648e:	464b      	mov	r3, r9
 8006490:	4640      	mov	r0, r8
 8006492:	4649      	mov	r1, r9
 8006494:	f7fa fb16 	bl	8000ac4 <__aeabi_dcmpun>
 8006498:	2200      	movs	r2, #0
 800649a:	2300      	movs	r3, #0
 800649c:	b148      	cbz	r0, 80064b2 <pow+0x52>
 800649e:	4630      	mov	r0, r6
 80064a0:	4639      	mov	r1, r7
 80064a2:	f7fa fadd 	bl	8000a60 <__aeabi_dcmpeq>
 80064a6:	2800      	cmp	r0, #0
 80064a8:	d17d      	bne.n	80065a6 <pow+0x146>
 80064aa:	ec45 4b10 	vmov	d0, r4, r5
 80064ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064b2:	4640      	mov	r0, r8
 80064b4:	4649      	mov	r1, r9
 80064b6:	f7fa fad3 	bl	8000a60 <__aeabi_dcmpeq>
 80064ba:	b1e0      	cbz	r0, 80064f6 <pow+0x96>
 80064bc:	2200      	movs	r2, #0
 80064be:	2300      	movs	r3, #0
 80064c0:	4630      	mov	r0, r6
 80064c2:	4639      	mov	r1, r7
 80064c4:	f7fa facc 	bl	8000a60 <__aeabi_dcmpeq>
 80064c8:	2800      	cmp	r0, #0
 80064ca:	d16c      	bne.n	80065a6 <pow+0x146>
 80064cc:	ec47 6b10 	vmov	d0, r6, r7
 80064d0:	f000 fe55 	bl	800717e <finite>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d0e8      	beq.n	80064aa <pow+0x4a>
 80064d8:	2200      	movs	r2, #0
 80064da:	2300      	movs	r3, #0
 80064dc:	4630      	mov	r0, r6
 80064de:	4639      	mov	r1, r7
 80064e0:	f7fa fac8 	bl	8000a74 <__aeabi_dcmplt>
 80064e4:	2800      	cmp	r0, #0
 80064e6:	d0e0      	beq.n	80064aa <pow+0x4a>
 80064e8:	f7ff ff42 	bl	8006370 <__errno>
 80064ec:	2321      	movs	r3, #33	; 0x21
 80064ee:	6003      	str	r3, [r0, #0]
 80064f0:	2400      	movs	r4, #0
 80064f2:	4d2f      	ldr	r5, [pc, #188]	; (80065b0 <pow+0x150>)
 80064f4:	e7d9      	b.n	80064aa <pow+0x4a>
 80064f6:	ec45 4b10 	vmov	d0, r4, r5
 80064fa:	f000 fe40 	bl	800717e <finite>
 80064fe:	bbb8      	cbnz	r0, 8006570 <pow+0x110>
 8006500:	ec49 8b10 	vmov	d0, r8, r9
 8006504:	f000 fe3b 	bl	800717e <finite>
 8006508:	b390      	cbz	r0, 8006570 <pow+0x110>
 800650a:	ec47 6b10 	vmov	d0, r6, r7
 800650e:	f000 fe36 	bl	800717e <finite>
 8006512:	b368      	cbz	r0, 8006570 <pow+0x110>
 8006514:	4622      	mov	r2, r4
 8006516:	462b      	mov	r3, r5
 8006518:	4620      	mov	r0, r4
 800651a:	4629      	mov	r1, r5
 800651c:	f7fa fad2 	bl	8000ac4 <__aeabi_dcmpun>
 8006520:	b160      	cbz	r0, 800653c <pow+0xdc>
 8006522:	f7ff ff25 	bl	8006370 <__errno>
 8006526:	2321      	movs	r3, #33	; 0x21
 8006528:	6003      	str	r3, [r0, #0]
 800652a:	2200      	movs	r2, #0
 800652c:	2300      	movs	r3, #0
 800652e:	4610      	mov	r0, r2
 8006530:	4619      	mov	r1, r3
 8006532:	f7fa f957 	bl	80007e4 <__aeabi_ddiv>
 8006536:	4604      	mov	r4, r0
 8006538:	460d      	mov	r5, r1
 800653a:	e7b6      	b.n	80064aa <pow+0x4a>
 800653c:	f7ff ff18 	bl	8006370 <__errno>
 8006540:	2322      	movs	r3, #34	; 0x22
 8006542:	6003      	str	r3, [r0, #0]
 8006544:	2200      	movs	r2, #0
 8006546:	2300      	movs	r3, #0
 8006548:	4640      	mov	r0, r8
 800654a:	4649      	mov	r1, r9
 800654c:	f7fa fa92 	bl	8000a74 <__aeabi_dcmplt>
 8006550:	2400      	movs	r4, #0
 8006552:	b158      	cbz	r0, 800656c <pow+0x10c>
 8006554:	ec47 6b10 	vmov	d0, r6, r7
 8006558:	f000 fe26 	bl	80071a8 <rint>
 800655c:	4632      	mov	r2, r6
 800655e:	ec51 0b10 	vmov	r0, r1, d0
 8006562:	463b      	mov	r3, r7
 8006564:	f7fa fa7c 	bl	8000a60 <__aeabi_dcmpeq>
 8006568:	2800      	cmp	r0, #0
 800656a:	d0c2      	beq.n	80064f2 <pow+0x92>
 800656c:	4d11      	ldr	r5, [pc, #68]	; (80065b4 <pow+0x154>)
 800656e:	e79c      	b.n	80064aa <pow+0x4a>
 8006570:	2200      	movs	r2, #0
 8006572:	2300      	movs	r3, #0
 8006574:	4620      	mov	r0, r4
 8006576:	4629      	mov	r1, r5
 8006578:	f7fa fa72 	bl	8000a60 <__aeabi_dcmpeq>
 800657c:	2800      	cmp	r0, #0
 800657e:	d094      	beq.n	80064aa <pow+0x4a>
 8006580:	ec49 8b10 	vmov	d0, r8, r9
 8006584:	f000 fdfb 	bl	800717e <finite>
 8006588:	2800      	cmp	r0, #0
 800658a:	d08e      	beq.n	80064aa <pow+0x4a>
 800658c:	ec47 6b10 	vmov	d0, r6, r7
 8006590:	f000 fdf5 	bl	800717e <finite>
 8006594:	2800      	cmp	r0, #0
 8006596:	d088      	beq.n	80064aa <pow+0x4a>
 8006598:	f7ff feea 	bl	8006370 <__errno>
 800659c:	2322      	movs	r3, #34	; 0x22
 800659e:	6003      	str	r3, [r0, #0]
 80065a0:	2400      	movs	r4, #0
 80065a2:	2500      	movs	r5, #0
 80065a4:	e781      	b.n	80064aa <pow+0x4a>
 80065a6:	4d04      	ldr	r5, [pc, #16]	; (80065b8 <pow+0x158>)
 80065a8:	2400      	movs	r4, #0
 80065aa:	e77e      	b.n	80064aa <pow+0x4a>
 80065ac:	20002080 	.word	0x20002080
 80065b0:	fff00000 	.word	0xfff00000
 80065b4:	7ff00000 	.word	0x7ff00000
 80065b8:	3ff00000 	.word	0x3ff00000
 80065bc:	00000000 	.word	0x00000000

080065c0 <__ieee754_pow>:
 80065c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c4:	ed2d 8b06 	vpush	{d8-d10}
 80065c8:	b08d      	sub	sp, #52	; 0x34
 80065ca:	ed8d 1b02 	vstr	d1, [sp, #8]
 80065ce:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80065d2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80065d6:	ea56 0100 	orrs.w	r1, r6, r0
 80065da:	ec53 2b10 	vmov	r2, r3, d0
 80065de:	f000 84d1 	beq.w	8006f84 <__ieee754_pow+0x9c4>
 80065e2:	497f      	ldr	r1, [pc, #508]	; (80067e0 <__ieee754_pow+0x220>)
 80065e4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80065e8:	428c      	cmp	r4, r1
 80065ea:	ee10 8a10 	vmov	r8, s0
 80065ee:	4699      	mov	r9, r3
 80065f0:	dc09      	bgt.n	8006606 <__ieee754_pow+0x46>
 80065f2:	d103      	bne.n	80065fc <__ieee754_pow+0x3c>
 80065f4:	b97a      	cbnz	r2, 8006616 <__ieee754_pow+0x56>
 80065f6:	42a6      	cmp	r6, r4
 80065f8:	dd02      	ble.n	8006600 <__ieee754_pow+0x40>
 80065fa:	e00c      	b.n	8006616 <__ieee754_pow+0x56>
 80065fc:	428e      	cmp	r6, r1
 80065fe:	dc02      	bgt.n	8006606 <__ieee754_pow+0x46>
 8006600:	428e      	cmp	r6, r1
 8006602:	d110      	bne.n	8006626 <__ieee754_pow+0x66>
 8006604:	b178      	cbz	r0, 8006626 <__ieee754_pow+0x66>
 8006606:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800660a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800660e:	ea54 0308 	orrs.w	r3, r4, r8
 8006612:	f000 84b7 	beq.w	8006f84 <__ieee754_pow+0x9c4>
 8006616:	4873      	ldr	r0, [pc, #460]	; (80067e4 <__ieee754_pow+0x224>)
 8006618:	b00d      	add	sp, #52	; 0x34
 800661a:	ecbd 8b06 	vpop	{d8-d10}
 800661e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006622:	f000 bdb9 	b.w	8007198 <nan>
 8006626:	f1b9 0f00 	cmp.w	r9, #0
 800662a:	da36      	bge.n	800669a <__ieee754_pow+0xda>
 800662c:	496e      	ldr	r1, [pc, #440]	; (80067e8 <__ieee754_pow+0x228>)
 800662e:	428e      	cmp	r6, r1
 8006630:	dc51      	bgt.n	80066d6 <__ieee754_pow+0x116>
 8006632:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8006636:	428e      	cmp	r6, r1
 8006638:	f340 84af 	ble.w	8006f9a <__ieee754_pow+0x9da>
 800663c:	1531      	asrs	r1, r6, #20
 800663e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006642:	2914      	cmp	r1, #20
 8006644:	dd0f      	ble.n	8006666 <__ieee754_pow+0xa6>
 8006646:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800664a:	fa20 fc01 	lsr.w	ip, r0, r1
 800664e:	fa0c f101 	lsl.w	r1, ip, r1
 8006652:	4281      	cmp	r1, r0
 8006654:	f040 84a1 	bne.w	8006f9a <__ieee754_pow+0x9da>
 8006658:	f00c 0c01 	and.w	ip, ip, #1
 800665c:	f1cc 0102 	rsb	r1, ip, #2
 8006660:	9100      	str	r1, [sp, #0]
 8006662:	b180      	cbz	r0, 8006686 <__ieee754_pow+0xc6>
 8006664:	e059      	b.n	800671a <__ieee754_pow+0x15a>
 8006666:	2800      	cmp	r0, #0
 8006668:	d155      	bne.n	8006716 <__ieee754_pow+0x156>
 800666a:	f1c1 0114 	rsb	r1, r1, #20
 800666e:	fa46 fc01 	asr.w	ip, r6, r1
 8006672:	fa0c f101 	lsl.w	r1, ip, r1
 8006676:	42b1      	cmp	r1, r6
 8006678:	f040 848c 	bne.w	8006f94 <__ieee754_pow+0x9d4>
 800667c:	f00c 0c01 	and.w	ip, ip, #1
 8006680:	f1cc 0102 	rsb	r1, ip, #2
 8006684:	9100      	str	r1, [sp, #0]
 8006686:	4959      	ldr	r1, [pc, #356]	; (80067ec <__ieee754_pow+0x22c>)
 8006688:	428e      	cmp	r6, r1
 800668a:	d12d      	bne.n	80066e8 <__ieee754_pow+0x128>
 800668c:	2f00      	cmp	r7, #0
 800668e:	da79      	bge.n	8006784 <__ieee754_pow+0x1c4>
 8006690:	4956      	ldr	r1, [pc, #344]	; (80067ec <__ieee754_pow+0x22c>)
 8006692:	2000      	movs	r0, #0
 8006694:	f7fa f8a6 	bl	80007e4 <__aeabi_ddiv>
 8006698:	e016      	b.n	80066c8 <__ieee754_pow+0x108>
 800669a:	2100      	movs	r1, #0
 800669c:	9100      	str	r1, [sp, #0]
 800669e:	2800      	cmp	r0, #0
 80066a0:	d13b      	bne.n	800671a <__ieee754_pow+0x15a>
 80066a2:	494f      	ldr	r1, [pc, #316]	; (80067e0 <__ieee754_pow+0x220>)
 80066a4:	428e      	cmp	r6, r1
 80066a6:	d1ee      	bne.n	8006686 <__ieee754_pow+0xc6>
 80066a8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80066ac:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80066b0:	ea53 0308 	orrs.w	r3, r3, r8
 80066b4:	f000 8466 	beq.w	8006f84 <__ieee754_pow+0x9c4>
 80066b8:	4b4d      	ldr	r3, [pc, #308]	; (80067f0 <__ieee754_pow+0x230>)
 80066ba:	429c      	cmp	r4, r3
 80066bc:	dd0d      	ble.n	80066da <__ieee754_pow+0x11a>
 80066be:	2f00      	cmp	r7, #0
 80066c0:	f280 8464 	bge.w	8006f8c <__ieee754_pow+0x9cc>
 80066c4:	2000      	movs	r0, #0
 80066c6:	2100      	movs	r1, #0
 80066c8:	ec41 0b10 	vmov	d0, r0, r1
 80066cc:	b00d      	add	sp, #52	; 0x34
 80066ce:	ecbd 8b06 	vpop	{d8-d10}
 80066d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d6:	2102      	movs	r1, #2
 80066d8:	e7e0      	b.n	800669c <__ieee754_pow+0xdc>
 80066da:	2f00      	cmp	r7, #0
 80066dc:	daf2      	bge.n	80066c4 <__ieee754_pow+0x104>
 80066de:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80066e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80066e6:	e7ef      	b.n	80066c8 <__ieee754_pow+0x108>
 80066e8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80066ec:	d104      	bne.n	80066f8 <__ieee754_pow+0x138>
 80066ee:	4610      	mov	r0, r2
 80066f0:	4619      	mov	r1, r3
 80066f2:	f7f9 ff4d 	bl	8000590 <__aeabi_dmul>
 80066f6:	e7e7      	b.n	80066c8 <__ieee754_pow+0x108>
 80066f8:	493e      	ldr	r1, [pc, #248]	; (80067f4 <__ieee754_pow+0x234>)
 80066fa:	428f      	cmp	r7, r1
 80066fc:	d10d      	bne.n	800671a <__ieee754_pow+0x15a>
 80066fe:	f1b9 0f00 	cmp.w	r9, #0
 8006702:	db0a      	blt.n	800671a <__ieee754_pow+0x15a>
 8006704:	ec43 2b10 	vmov	d0, r2, r3
 8006708:	b00d      	add	sp, #52	; 0x34
 800670a:	ecbd 8b06 	vpop	{d8-d10}
 800670e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006712:	f000 bc77 	b.w	8007004 <__ieee754_sqrt>
 8006716:	2100      	movs	r1, #0
 8006718:	9100      	str	r1, [sp, #0]
 800671a:	ec43 2b10 	vmov	d0, r2, r3
 800671e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006722:	f000 fd23 	bl	800716c <fabs>
 8006726:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800672a:	ec51 0b10 	vmov	r0, r1, d0
 800672e:	f1b8 0f00 	cmp.w	r8, #0
 8006732:	d12a      	bne.n	800678a <__ieee754_pow+0x1ca>
 8006734:	b12c      	cbz	r4, 8006742 <__ieee754_pow+0x182>
 8006736:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80067ec <__ieee754_pow+0x22c>
 800673a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800673e:	45e6      	cmp	lr, ip
 8006740:	d123      	bne.n	800678a <__ieee754_pow+0x1ca>
 8006742:	2f00      	cmp	r7, #0
 8006744:	da05      	bge.n	8006752 <__ieee754_pow+0x192>
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	2000      	movs	r0, #0
 800674c:	4927      	ldr	r1, [pc, #156]	; (80067ec <__ieee754_pow+0x22c>)
 800674e:	f7fa f849 	bl	80007e4 <__aeabi_ddiv>
 8006752:	f1b9 0f00 	cmp.w	r9, #0
 8006756:	dab7      	bge.n	80066c8 <__ieee754_pow+0x108>
 8006758:	9b00      	ldr	r3, [sp, #0]
 800675a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800675e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006762:	4323      	orrs	r3, r4
 8006764:	d108      	bne.n	8006778 <__ieee754_pow+0x1b8>
 8006766:	4602      	mov	r2, r0
 8006768:	460b      	mov	r3, r1
 800676a:	4610      	mov	r0, r2
 800676c:	4619      	mov	r1, r3
 800676e:	f7f9 fd57 	bl	8000220 <__aeabi_dsub>
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	e78d      	b.n	8006694 <__ieee754_pow+0xd4>
 8006778:	9b00      	ldr	r3, [sp, #0]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d1a4      	bne.n	80066c8 <__ieee754_pow+0x108>
 800677e:	4602      	mov	r2, r0
 8006780:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006784:	4610      	mov	r0, r2
 8006786:	4619      	mov	r1, r3
 8006788:	e79e      	b.n	80066c8 <__ieee754_pow+0x108>
 800678a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800678e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8006792:	950a      	str	r5, [sp, #40]	; 0x28
 8006794:	9d00      	ldr	r5, [sp, #0]
 8006796:	46ac      	mov	ip, r5
 8006798:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800679a:	ea5c 0505 	orrs.w	r5, ip, r5
 800679e:	d0e4      	beq.n	800676a <__ieee754_pow+0x1aa>
 80067a0:	4b15      	ldr	r3, [pc, #84]	; (80067f8 <__ieee754_pow+0x238>)
 80067a2:	429e      	cmp	r6, r3
 80067a4:	f340 80fc 	ble.w	80069a0 <__ieee754_pow+0x3e0>
 80067a8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80067ac:	429e      	cmp	r6, r3
 80067ae:	4b10      	ldr	r3, [pc, #64]	; (80067f0 <__ieee754_pow+0x230>)
 80067b0:	dd07      	ble.n	80067c2 <__ieee754_pow+0x202>
 80067b2:	429c      	cmp	r4, r3
 80067b4:	dc0a      	bgt.n	80067cc <__ieee754_pow+0x20c>
 80067b6:	2f00      	cmp	r7, #0
 80067b8:	da84      	bge.n	80066c4 <__ieee754_pow+0x104>
 80067ba:	a307      	add	r3, pc, #28	; (adr r3, 80067d8 <__ieee754_pow+0x218>)
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	e795      	b.n	80066ee <__ieee754_pow+0x12e>
 80067c2:	429c      	cmp	r4, r3
 80067c4:	dbf7      	blt.n	80067b6 <__ieee754_pow+0x1f6>
 80067c6:	4b09      	ldr	r3, [pc, #36]	; (80067ec <__ieee754_pow+0x22c>)
 80067c8:	429c      	cmp	r4, r3
 80067ca:	dd17      	ble.n	80067fc <__ieee754_pow+0x23c>
 80067cc:	2f00      	cmp	r7, #0
 80067ce:	dcf4      	bgt.n	80067ba <__ieee754_pow+0x1fa>
 80067d0:	e778      	b.n	80066c4 <__ieee754_pow+0x104>
 80067d2:	bf00      	nop
 80067d4:	f3af 8000 	nop.w
 80067d8:	8800759c 	.word	0x8800759c
 80067dc:	7e37e43c 	.word	0x7e37e43c
 80067e0:	7ff00000 	.word	0x7ff00000
 80067e4:	08007428 	.word	0x08007428
 80067e8:	433fffff 	.word	0x433fffff
 80067ec:	3ff00000 	.word	0x3ff00000
 80067f0:	3fefffff 	.word	0x3fefffff
 80067f4:	3fe00000 	.word	0x3fe00000
 80067f8:	41e00000 	.word	0x41e00000
 80067fc:	4b64      	ldr	r3, [pc, #400]	; (8006990 <__ieee754_pow+0x3d0>)
 80067fe:	2200      	movs	r2, #0
 8006800:	f7f9 fd0e 	bl	8000220 <__aeabi_dsub>
 8006804:	a356      	add	r3, pc, #344	; (adr r3, 8006960 <__ieee754_pow+0x3a0>)
 8006806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680a:	4604      	mov	r4, r0
 800680c:	460d      	mov	r5, r1
 800680e:	f7f9 febf 	bl	8000590 <__aeabi_dmul>
 8006812:	a355      	add	r3, pc, #340	; (adr r3, 8006968 <__ieee754_pow+0x3a8>)
 8006814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006818:	4606      	mov	r6, r0
 800681a:	460f      	mov	r7, r1
 800681c:	4620      	mov	r0, r4
 800681e:	4629      	mov	r1, r5
 8006820:	f7f9 feb6 	bl	8000590 <__aeabi_dmul>
 8006824:	4b5b      	ldr	r3, [pc, #364]	; (8006994 <__ieee754_pow+0x3d4>)
 8006826:	4682      	mov	sl, r0
 8006828:	468b      	mov	fp, r1
 800682a:	2200      	movs	r2, #0
 800682c:	4620      	mov	r0, r4
 800682e:	4629      	mov	r1, r5
 8006830:	f7f9 feae 	bl	8000590 <__aeabi_dmul>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	a14d      	add	r1, pc, #308	; (adr r1, 8006970 <__ieee754_pow+0x3b0>)
 800683a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800683e:	f7f9 fcef 	bl	8000220 <__aeabi_dsub>
 8006842:	4622      	mov	r2, r4
 8006844:	462b      	mov	r3, r5
 8006846:	f7f9 fea3 	bl	8000590 <__aeabi_dmul>
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	2000      	movs	r0, #0
 8006850:	4951      	ldr	r1, [pc, #324]	; (8006998 <__ieee754_pow+0x3d8>)
 8006852:	f7f9 fce5 	bl	8000220 <__aeabi_dsub>
 8006856:	4622      	mov	r2, r4
 8006858:	4680      	mov	r8, r0
 800685a:	4689      	mov	r9, r1
 800685c:	462b      	mov	r3, r5
 800685e:	4620      	mov	r0, r4
 8006860:	4629      	mov	r1, r5
 8006862:	f7f9 fe95 	bl	8000590 <__aeabi_dmul>
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
 800686a:	4640      	mov	r0, r8
 800686c:	4649      	mov	r1, r9
 800686e:	f7f9 fe8f 	bl	8000590 <__aeabi_dmul>
 8006872:	a341      	add	r3, pc, #260	; (adr r3, 8006978 <__ieee754_pow+0x3b8>)
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	f7f9 fe8a 	bl	8000590 <__aeabi_dmul>
 800687c:	4602      	mov	r2, r0
 800687e:	460b      	mov	r3, r1
 8006880:	4650      	mov	r0, sl
 8006882:	4659      	mov	r1, fp
 8006884:	f7f9 fccc 	bl	8000220 <__aeabi_dsub>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	4680      	mov	r8, r0
 800688e:	4689      	mov	r9, r1
 8006890:	4630      	mov	r0, r6
 8006892:	4639      	mov	r1, r7
 8006894:	f7f9 fcc6 	bl	8000224 <__adddf3>
 8006898:	2400      	movs	r4, #0
 800689a:	4632      	mov	r2, r6
 800689c:	463b      	mov	r3, r7
 800689e:	4620      	mov	r0, r4
 80068a0:	460d      	mov	r5, r1
 80068a2:	f7f9 fcbd 	bl	8000220 <__aeabi_dsub>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4640      	mov	r0, r8
 80068ac:	4649      	mov	r1, r9
 80068ae:	f7f9 fcb7 	bl	8000220 <__aeabi_dsub>
 80068b2:	9b00      	ldr	r3, [sp, #0]
 80068b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068b6:	3b01      	subs	r3, #1
 80068b8:	4313      	orrs	r3, r2
 80068ba:	4682      	mov	sl, r0
 80068bc:	468b      	mov	fp, r1
 80068be:	f040 81f1 	bne.w	8006ca4 <__ieee754_pow+0x6e4>
 80068c2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8006980 <__ieee754_pow+0x3c0>
 80068c6:	eeb0 8a47 	vmov.f32	s16, s14
 80068ca:	eef0 8a67 	vmov.f32	s17, s15
 80068ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80068d2:	2600      	movs	r6, #0
 80068d4:	4632      	mov	r2, r6
 80068d6:	463b      	mov	r3, r7
 80068d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068dc:	f7f9 fca0 	bl	8000220 <__aeabi_dsub>
 80068e0:	4622      	mov	r2, r4
 80068e2:	462b      	mov	r3, r5
 80068e4:	f7f9 fe54 	bl	8000590 <__aeabi_dmul>
 80068e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068ec:	4680      	mov	r8, r0
 80068ee:	4689      	mov	r9, r1
 80068f0:	4650      	mov	r0, sl
 80068f2:	4659      	mov	r1, fp
 80068f4:	f7f9 fe4c 	bl	8000590 <__aeabi_dmul>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4640      	mov	r0, r8
 80068fe:	4649      	mov	r1, r9
 8006900:	f7f9 fc90 	bl	8000224 <__adddf3>
 8006904:	4632      	mov	r2, r6
 8006906:	463b      	mov	r3, r7
 8006908:	4680      	mov	r8, r0
 800690a:	4689      	mov	r9, r1
 800690c:	4620      	mov	r0, r4
 800690e:	4629      	mov	r1, r5
 8006910:	f7f9 fe3e 	bl	8000590 <__aeabi_dmul>
 8006914:	460b      	mov	r3, r1
 8006916:	4604      	mov	r4, r0
 8006918:	460d      	mov	r5, r1
 800691a:	4602      	mov	r2, r0
 800691c:	4649      	mov	r1, r9
 800691e:	4640      	mov	r0, r8
 8006920:	f7f9 fc80 	bl	8000224 <__adddf3>
 8006924:	4b1d      	ldr	r3, [pc, #116]	; (800699c <__ieee754_pow+0x3dc>)
 8006926:	4299      	cmp	r1, r3
 8006928:	ec45 4b19 	vmov	d9, r4, r5
 800692c:	4606      	mov	r6, r0
 800692e:	460f      	mov	r7, r1
 8006930:	468b      	mov	fp, r1
 8006932:	f340 82fe 	ble.w	8006f32 <__ieee754_pow+0x972>
 8006936:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800693a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800693e:	4303      	orrs	r3, r0
 8006940:	f000 81f0 	beq.w	8006d24 <__ieee754_pow+0x764>
 8006944:	a310      	add	r3, pc, #64	; (adr r3, 8006988 <__ieee754_pow+0x3c8>)
 8006946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694a:	ec51 0b18 	vmov	r0, r1, d8
 800694e:	f7f9 fe1f 	bl	8000590 <__aeabi_dmul>
 8006952:	a30d      	add	r3, pc, #52	; (adr r3, 8006988 <__ieee754_pow+0x3c8>)
 8006954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006958:	e6cb      	b.n	80066f2 <__ieee754_pow+0x132>
 800695a:	bf00      	nop
 800695c:	f3af 8000 	nop.w
 8006960:	60000000 	.word	0x60000000
 8006964:	3ff71547 	.word	0x3ff71547
 8006968:	f85ddf44 	.word	0xf85ddf44
 800696c:	3e54ae0b 	.word	0x3e54ae0b
 8006970:	55555555 	.word	0x55555555
 8006974:	3fd55555 	.word	0x3fd55555
 8006978:	652b82fe 	.word	0x652b82fe
 800697c:	3ff71547 	.word	0x3ff71547
 8006980:	00000000 	.word	0x00000000
 8006984:	bff00000 	.word	0xbff00000
 8006988:	8800759c 	.word	0x8800759c
 800698c:	7e37e43c 	.word	0x7e37e43c
 8006990:	3ff00000 	.word	0x3ff00000
 8006994:	3fd00000 	.word	0x3fd00000
 8006998:	3fe00000 	.word	0x3fe00000
 800699c:	408fffff 	.word	0x408fffff
 80069a0:	4bd7      	ldr	r3, [pc, #860]	; (8006d00 <__ieee754_pow+0x740>)
 80069a2:	ea03 0309 	and.w	r3, r3, r9
 80069a6:	2200      	movs	r2, #0
 80069a8:	b92b      	cbnz	r3, 80069b6 <__ieee754_pow+0x3f6>
 80069aa:	4bd6      	ldr	r3, [pc, #856]	; (8006d04 <__ieee754_pow+0x744>)
 80069ac:	f7f9 fdf0 	bl	8000590 <__aeabi_dmul>
 80069b0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80069b4:	460c      	mov	r4, r1
 80069b6:	1523      	asrs	r3, r4, #20
 80069b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80069bc:	4413      	add	r3, r2
 80069be:	9309      	str	r3, [sp, #36]	; 0x24
 80069c0:	4bd1      	ldr	r3, [pc, #836]	; (8006d08 <__ieee754_pow+0x748>)
 80069c2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80069c6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80069ca:	429c      	cmp	r4, r3
 80069cc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80069d0:	dd08      	ble.n	80069e4 <__ieee754_pow+0x424>
 80069d2:	4bce      	ldr	r3, [pc, #824]	; (8006d0c <__ieee754_pow+0x74c>)
 80069d4:	429c      	cmp	r4, r3
 80069d6:	f340 8163 	ble.w	8006ca0 <__ieee754_pow+0x6e0>
 80069da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069dc:	3301      	adds	r3, #1
 80069de:	9309      	str	r3, [sp, #36]	; 0x24
 80069e0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80069e4:	2400      	movs	r4, #0
 80069e6:	00e3      	lsls	r3, r4, #3
 80069e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80069ea:	4bc9      	ldr	r3, [pc, #804]	; (8006d10 <__ieee754_pow+0x750>)
 80069ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80069f0:	ed93 7b00 	vldr	d7, [r3]
 80069f4:	4629      	mov	r1, r5
 80069f6:	ec53 2b17 	vmov	r2, r3, d7
 80069fa:	eeb0 8a47 	vmov.f32	s16, s14
 80069fe:	eef0 8a67 	vmov.f32	s17, s15
 8006a02:	4682      	mov	sl, r0
 8006a04:	f7f9 fc0c 	bl	8000220 <__aeabi_dsub>
 8006a08:	4652      	mov	r2, sl
 8006a0a:	4606      	mov	r6, r0
 8006a0c:	460f      	mov	r7, r1
 8006a0e:	462b      	mov	r3, r5
 8006a10:	ec51 0b18 	vmov	r0, r1, d8
 8006a14:	f7f9 fc06 	bl	8000224 <__adddf3>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	49bd      	ldr	r1, [pc, #756]	; (8006d14 <__ieee754_pow+0x754>)
 8006a20:	f7f9 fee0 	bl	80007e4 <__aeabi_ddiv>
 8006a24:	ec41 0b19 	vmov	d9, r0, r1
 8006a28:	4602      	mov	r2, r0
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	4639      	mov	r1, r7
 8006a30:	f7f9 fdae 	bl	8000590 <__aeabi_dmul>
 8006a34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006a38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a40:	2300      	movs	r3, #0
 8006a42:	9304      	str	r3, [sp, #16]
 8006a44:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006a48:	46ab      	mov	fp, r5
 8006a4a:	106d      	asrs	r5, r5, #1
 8006a4c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006a50:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006a54:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006a58:	2200      	movs	r2, #0
 8006a5a:	4640      	mov	r0, r8
 8006a5c:	4649      	mov	r1, r9
 8006a5e:	4614      	mov	r4, r2
 8006a60:	461d      	mov	r5, r3
 8006a62:	f7f9 fd95 	bl	8000590 <__aeabi_dmul>
 8006a66:	4602      	mov	r2, r0
 8006a68:	460b      	mov	r3, r1
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	4639      	mov	r1, r7
 8006a6e:	f7f9 fbd7 	bl	8000220 <__aeabi_dsub>
 8006a72:	ec53 2b18 	vmov	r2, r3, d8
 8006a76:	4606      	mov	r6, r0
 8006a78:	460f      	mov	r7, r1
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	4629      	mov	r1, r5
 8006a7e:	f7f9 fbcf 	bl	8000220 <__aeabi_dsub>
 8006a82:	4602      	mov	r2, r0
 8006a84:	460b      	mov	r3, r1
 8006a86:	4650      	mov	r0, sl
 8006a88:	4659      	mov	r1, fp
 8006a8a:	f7f9 fbc9 	bl	8000220 <__aeabi_dsub>
 8006a8e:	4642      	mov	r2, r8
 8006a90:	464b      	mov	r3, r9
 8006a92:	f7f9 fd7d 	bl	8000590 <__aeabi_dmul>
 8006a96:	4602      	mov	r2, r0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	4639      	mov	r1, r7
 8006a9e:	f7f9 fbbf 	bl	8000220 <__aeabi_dsub>
 8006aa2:	ec53 2b19 	vmov	r2, r3, d9
 8006aa6:	f7f9 fd73 	bl	8000590 <__aeabi_dmul>
 8006aaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006aae:	ec41 0b18 	vmov	d8, r0, r1
 8006ab2:	4610      	mov	r0, r2
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	f7f9 fd6b 	bl	8000590 <__aeabi_dmul>
 8006aba:	a37d      	add	r3, pc, #500	; (adr r3, 8006cb0 <__ieee754_pow+0x6f0>)
 8006abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	460d      	mov	r5, r1
 8006ac4:	f7f9 fd64 	bl	8000590 <__aeabi_dmul>
 8006ac8:	a37b      	add	r3, pc, #492	; (adr r3, 8006cb8 <__ieee754_pow+0x6f8>)
 8006aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ace:	f7f9 fba9 	bl	8000224 <__adddf3>
 8006ad2:	4622      	mov	r2, r4
 8006ad4:	462b      	mov	r3, r5
 8006ad6:	f7f9 fd5b 	bl	8000590 <__aeabi_dmul>
 8006ada:	a379      	add	r3, pc, #484	; (adr r3, 8006cc0 <__ieee754_pow+0x700>)
 8006adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae0:	f7f9 fba0 	bl	8000224 <__adddf3>
 8006ae4:	4622      	mov	r2, r4
 8006ae6:	462b      	mov	r3, r5
 8006ae8:	f7f9 fd52 	bl	8000590 <__aeabi_dmul>
 8006aec:	a376      	add	r3, pc, #472	; (adr r3, 8006cc8 <__ieee754_pow+0x708>)
 8006aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af2:	f7f9 fb97 	bl	8000224 <__adddf3>
 8006af6:	4622      	mov	r2, r4
 8006af8:	462b      	mov	r3, r5
 8006afa:	f7f9 fd49 	bl	8000590 <__aeabi_dmul>
 8006afe:	a374      	add	r3, pc, #464	; (adr r3, 8006cd0 <__ieee754_pow+0x710>)
 8006b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b04:	f7f9 fb8e 	bl	8000224 <__adddf3>
 8006b08:	4622      	mov	r2, r4
 8006b0a:	462b      	mov	r3, r5
 8006b0c:	f7f9 fd40 	bl	8000590 <__aeabi_dmul>
 8006b10:	a371      	add	r3, pc, #452	; (adr r3, 8006cd8 <__ieee754_pow+0x718>)
 8006b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b16:	f7f9 fb85 	bl	8000224 <__adddf3>
 8006b1a:	4622      	mov	r2, r4
 8006b1c:	4606      	mov	r6, r0
 8006b1e:	460f      	mov	r7, r1
 8006b20:	462b      	mov	r3, r5
 8006b22:	4620      	mov	r0, r4
 8006b24:	4629      	mov	r1, r5
 8006b26:	f7f9 fd33 	bl	8000590 <__aeabi_dmul>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	4630      	mov	r0, r6
 8006b30:	4639      	mov	r1, r7
 8006b32:	f7f9 fd2d 	bl	8000590 <__aeabi_dmul>
 8006b36:	4642      	mov	r2, r8
 8006b38:	4604      	mov	r4, r0
 8006b3a:	460d      	mov	r5, r1
 8006b3c:	464b      	mov	r3, r9
 8006b3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b42:	f7f9 fb6f 	bl	8000224 <__adddf3>
 8006b46:	ec53 2b18 	vmov	r2, r3, d8
 8006b4a:	f7f9 fd21 	bl	8000590 <__aeabi_dmul>
 8006b4e:	4622      	mov	r2, r4
 8006b50:	462b      	mov	r3, r5
 8006b52:	f7f9 fb67 	bl	8000224 <__adddf3>
 8006b56:	4642      	mov	r2, r8
 8006b58:	4682      	mov	sl, r0
 8006b5a:	468b      	mov	fp, r1
 8006b5c:	464b      	mov	r3, r9
 8006b5e:	4640      	mov	r0, r8
 8006b60:	4649      	mov	r1, r9
 8006b62:	f7f9 fd15 	bl	8000590 <__aeabi_dmul>
 8006b66:	4b6c      	ldr	r3, [pc, #432]	; (8006d18 <__ieee754_pow+0x758>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	4606      	mov	r6, r0
 8006b6c:	460f      	mov	r7, r1
 8006b6e:	f7f9 fb59 	bl	8000224 <__adddf3>
 8006b72:	4652      	mov	r2, sl
 8006b74:	465b      	mov	r3, fp
 8006b76:	f7f9 fb55 	bl	8000224 <__adddf3>
 8006b7a:	9c04      	ldr	r4, [sp, #16]
 8006b7c:	460d      	mov	r5, r1
 8006b7e:	4622      	mov	r2, r4
 8006b80:	460b      	mov	r3, r1
 8006b82:	4640      	mov	r0, r8
 8006b84:	4649      	mov	r1, r9
 8006b86:	f7f9 fd03 	bl	8000590 <__aeabi_dmul>
 8006b8a:	4b63      	ldr	r3, [pc, #396]	; (8006d18 <__ieee754_pow+0x758>)
 8006b8c:	4680      	mov	r8, r0
 8006b8e:	4689      	mov	r9, r1
 8006b90:	2200      	movs	r2, #0
 8006b92:	4620      	mov	r0, r4
 8006b94:	4629      	mov	r1, r5
 8006b96:	f7f9 fb43 	bl	8000220 <__aeabi_dsub>
 8006b9a:	4632      	mov	r2, r6
 8006b9c:	463b      	mov	r3, r7
 8006b9e:	f7f9 fb3f 	bl	8000220 <__aeabi_dsub>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	4650      	mov	r0, sl
 8006ba8:	4659      	mov	r1, fp
 8006baa:	f7f9 fb39 	bl	8000220 <__aeabi_dsub>
 8006bae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bb2:	f7f9 fced 	bl	8000590 <__aeabi_dmul>
 8006bb6:	4622      	mov	r2, r4
 8006bb8:	4606      	mov	r6, r0
 8006bba:	460f      	mov	r7, r1
 8006bbc:	462b      	mov	r3, r5
 8006bbe:	ec51 0b18 	vmov	r0, r1, d8
 8006bc2:	f7f9 fce5 	bl	8000590 <__aeabi_dmul>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4630      	mov	r0, r6
 8006bcc:	4639      	mov	r1, r7
 8006bce:	f7f9 fb29 	bl	8000224 <__adddf3>
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	460f      	mov	r7, r1
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	460b      	mov	r3, r1
 8006bda:	4640      	mov	r0, r8
 8006bdc:	4649      	mov	r1, r9
 8006bde:	f7f9 fb21 	bl	8000224 <__adddf3>
 8006be2:	9c04      	ldr	r4, [sp, #16]
 8006be4:	a33e      	add	r3, pc, #248	; (adr r3, 8006ce0 <__ieee754_pow+0x720>)
 8006be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bea:	4620      	mov	r0, r4
 8006bec:	460d      	mov	r5, r1
 8006bee:	f7f9 fccf 	bl	8000590 <__aeabi_dmul>
 8006bf2:	4642      	mov	r2, r8
 8006bf4:	ec41 0b18 	vmov	d8, r0, r1
 8006bf8:	464b      	mov	r3, r9
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	4629      	mov	r1, r5
 8006bfe:	f7f9 fb0f 	bl	8000220 <__aeabi_dsub>
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
 8006c06:	4630      	mov	r0, r6
 8006c08:	4639      	mov	r1, r7
 8006c0a:	f7f9 fb09 	bl	8000220 <__aeabi_dsub>
 8006c0e:	a336      	add	r3, pc, #216	; (adr r3, 8006ce8 <__ieee754_pow+0x728>)
 8006c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c14:	f7f9 fcbc 	bl	8000590 <__aeabi_dmul>
 8006c18:	a335      	add	r3, pc, #212	; (adr r3, 8006cf0 <__ieee754_pow+0x730>)
 8006c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1e:	4606      	mov	r6, r0
 8006c20:	460f      	mov	r7, r1
 8006c22:	4620      	mov	r0, r4
 8006c24:	4629      	mov	r1, r5
 8006c26:	f7f9 fcb3 	bl	8000590 <__aeabi_dmul>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4630      	mov	r0, r6
 8006c30:	4639      	mov	r1, r7
 8006c32:	f7f9 faf7 	bl	8000224 <__adddf3>
 8006c36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c38:	4b38      	ldr	r3, [pc, #224]	; (8006d1c <__ieee754_pow+0x75c>)
 8006c3a:	4413      	add	r3, r2
 8006c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c40:	f7f9 faf0 	bl	8000224 <__adddf3>
 8006c44:	4682      	mov	sl, r0
 8006c46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c48:	468b      	mov	fp, r1
 8006c4a:	f7f9 fc37 	bl	80004bc <__aeabi_i2d>
 8006c4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c50:	4b33      	ldr	r3, [pc, #204]	; (8006d20 <__ieee754_pow+0x760>)
 8006c52:	4413      	add	r3, r2
 8006c54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c58:	4606      	mov	r6, r0
 8006c5a:	460f      	mov	r7, r1
 8006c5c:	4652      	mov	r2, sl
 8006c5e:	465b      	mov	r3, fp
 8006c60:	ec51 0b18 	vmov	r0, r1, d8
 8006c64:	f7f9 fade 	bl	8000224 <__adddf3>
 8006c68:	4642      	mov	r2, r8
 8006c6a:	464b      	mov	r3, r9
 8006c6c:	f7f9 fada 	bl	8000224 <__adddf3>
 8006c70:	4632      	mov	r2, r6
 8006c72:	463b      	mov	r3, r7
 8006c74:	f7f9 fad6 	bl	8000224 <__adddf3>
 8006c78:	9c04      	ldr	r4, [sp, #16]
 8006c7a:	4632      	mov	r2, r6
 8006c7c:	463b      	mov	r3, r7
 8006c7e:	4620      	mov	r0, r4
 8006c80:	460d      	mov	r5, r1
 8006c82:	f7f9 facd 	bl	8000220 <__aeabi_dsub>
 8006c86:	4642      	mov	r2, r8
 8006c88:	464b      	mov	r3, r9
 8006c8a:	f7f9 fac9 	bl	8000220 <__aeabi_dsub>
 8006c8e:	ec53 2b18 	vmov	r2, r3, d8
 8006c92:	f7f9 fac5 	bl	8000220 <__aeabi_dsub>
 8006c96:	4602      	mov	r2, r0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4650      	mov	r0, sl
 8006c9c:	4659      	mov	r1, fp
 8006c9e:	e606      	b.n	80068ae <__ieee754_pow+0x2ee>
 8006ca0:	2401      	movs	r4, #1
 8006ca2:	e6a0      	b.n	80069e6 <__ieee754_pow+0x426>
 8006ca4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8006cf8 <__ieee754_pow+0x738>
 8006ca8:	e60d      	b.n	80068c6 <__ieee754_pow+0x306>
 8006caa:	bf00      	nop
 8006cac:	f3af 8000 	nop.w
 8006cb0:	4a454eef 	.word	0x4a454eef
 8006cb4:	3fca7e28 	.word	0x3fca7e28
 8006cb8:	93c9db65 	.word	0x93c9db65
 8006cbc:	3fcd864a 	.word	0x3fcd864a
 8006cc0:	a91d4101 	.word	0xa91d4101
 8006cc4:	3fd17460 	.word	0x3fd17460
 8006cc8:	518f264d 	.word	0x518f264d
 8006ccc:	3fd55555 	.word	0x3fd55555
 8006cd0:	db6fabff 	.word	0xdb6fabff
 8006cd4:	3fdb6db6 	.word	0x3fdb6db6
 8006cd8:	33333303 	.word	0x33333303
 8006cdc:	3fe33333 	.word	0x3fe33333
 8006ce0:	e0000000 	.word	0xe0000000
 8006ce4:	3feec709 	.word	0x3feec709
 8006ce8:	dc3a03fd 	.word	0xdc3a03fd
 8006cec:	3feec709 	.word	0x3feec709
 8006cf0:	145b01f5 	.word	0x145b01f5
 8006cf4:	be3e2fe0 	.word	0xbe3e2fe0
 8006cf8:	00000000 	.word	0x00000000
 8006cfc:	3ff00000 	.word	0x3ff00000
 8006d00:	7ff00000 	.word	0x7ff00000
 8006d04:	43400000 	.word	0x43400000
 8006d08:	0003988e 	.word	0x0003988e
 8006d0c:	000bb679 	.word	0x000bb679
 8006d10:	08007430 	.word	0x08007430
 8006d14:	3ff00000 	.word	0x3ff00000
 8006d18:	40080000 	.word	0x40080000
 8006d1c:	08007450 	.word	0x08007450
 8006d20:	08007440 	.word	0x08007440
 8006d24:	a3b5      	add	r3, pc, #724	; (adr r3, 8006ffc <__ieee754_pow+0xa3c>)
 8006d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2a:	4640      	mov	r0, r8
 8006d2c:	4649      	mov	r1, r9
 8006d2e:	f7f9 fa79 	bl	8000224 <__adddf3>
 8006d32:	4622      	mov	r2, r4
 8006d34:	ec41 0b1a 	vmov	d10, r0, r1
 8006d38:	462b      	mov	r3, r5
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	4639      	mov	r1, r7
 8006d3e:	f7f9 fa6f 	bl	8000220 <__aeabi_dsub>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	ec51 0b1a 	vmov	r0, r1, d10
 8006d4a:	f7f9 feb1 	bl	8000ab0 <__aeabi_dcmpgt>
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	f47f adf8 	bne.w	8006944 <__ieee754_pow+0x384>
 8006d54:	4aa4      	ldr	r2, [pc, #656]	; (8006fe8 <__ieee754_pow+0xa28>)
 8006d56:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	f340 810b 	ble.w	8006f76 <__ieee754_pow+0x9b6>
 8006d60:	151b      	asrs	r3, r3, #20
 8006d62:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006d66:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006d6a:	fa4a f303 	asr.w	r3, sl, r3
 8006d6e:	445b      	add	r3, fp
 8006d70:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006d74:	4e9d      	ldr	r6, [pc, #628]	; (8006fec <__ieee754_pow+0xa2c>)
 8006d76:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006d7a:	4116      	asrs	r6, r2
 8006d7c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006d80:	2000      	movs	r0, #0
 8006d82:	ea23 0106 	bic.w	r1, r3, r6
 8006d86:	f1c2 0214 	rsb	r2, r2, #20
 8006d8a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006d8e:	fa4a fa02 	asr.w	sl, sl, r2
 8006d92:	f1bb 0f00 	cmp.w	fp, #0
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	4629      	mov	r1, r5
 8006d9e:	bfb8      	it	lt
 8006da0:	f1ca 0a00 	rsblt	sl, sl, #0
 8006da4:	f7f9 fa3c 	bl	8000220 <__aeabi_dsub>
 8006da8:	ec41 0b19 	vmov	d9, r0, r1
 8006dac:	4642      	mov	r2, r8
 8006dae:	464b      	mov	r3, r9
 8006db0:	ec51 0b19 	vmov	r0, r1, d9
 8006db4:	f7f9 fa36 	bl	8000224 <__adddf3>
 8006db8:	2400      	movs	r4, #0
 8006dba:	a379      	add	r3, pc, #484	; (adr r3, 8006fa0 <__ieee754_pow+0x9e0>)
 8006dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	460d      	mov	r5, r1
 8006dc4:	f7f9 fbe4 	bl	8000590 <__aeabi_dmul>
 8006dc8:	ec53 2b19 	vmov	r2, r3, d9
 8006dcc:	4606      	mov	r6, r0
 8006dce:	460f      	mov	r7, r1
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	4629      	mov	r1, r5
 8006dd4:	f7f9 fa24 	bl	8000220 <__aeabi_dsub>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	460b      	mov	r3, r1
 8006ddc:	4640      	mov	r0, r8
 8006dde:	4649      	mov	r1, r9
 8006de0:	f7f9 fa1e 	bl	8000220 <__aeabi_dsub>
 8006de4:	a370      	add	r3, pc, #448	; (adr r3, 8006fa8 <__ieee754_pow+0x9e8>)
 8006de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dea:	f7f9 fbd1 	bl	8000590 <__aeabi_dmul>
 8006dee:	a370      	add	r3, pc, #448	; (adr r3, 8006fb0 <__ieee754_pow+0x9f0>)
 8006df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df4:	4680      	mov	r8, r0
 8006df6:	4689      	mov	r9, r1
 8006df8:	4620      	mov	r0, r4
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	f7f9 fbc8 	bl	8000590 <__aeabi_dmul>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	4640      	mov	r0, r8
 8006e06:	4649      	mov	r1, r9
 8006e08:	f7f9 fa0c 	bl	8000224 <__adddf3>
 8006e0c:	4604      	mov	r4, r0
 8006e0e:	460d      	mov	r5, r1
 8006e10:	4602      	mov	r2, r0
 8006e12:	460b      	mov	r3, r1
 8006e14:	4630      	mov	r0, r6
 8006e16:	4639      	mov	r1, r7
 8006e18:	f7f9 fa04 	bl	8000224 <__adddf3>
 8006e1c:	4632      	mov	r2, r6
 8006e1e:	463b      	mov	r3, r7
 8006e20:	4680      	mov	r8, r0
 8006e22:	4689      	mov	r9, r1
 8006e24:	f7f9 f9fc 	bl	8000220 <__aeabi_dsub>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	4629      	mov	r1, r5
 8006e30:	f7f9 f9f6 	bl	8000220 <__aeabi_dsub>
 8006e34:	4642      	mov	r2, r8
 8006e36:	4606      	mov	r6, r0
 8006e38:	460f      	mov	r7, r1
 8006e3a:	464b      	mov	r3, r9
 8006e3c:	4640      	mov	r0, r8
 8006e3e:	4649      	mov	r1, r9
 8006e40:	f7f9 fba6 	bl	8000590 <__aeabi_dmul>
 8006e44:	a35c      	add	r3, pc, #368	; (adr r3, 8006fb8 <__ieee754_pow+0x9f8>)
 8006e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	460d      	mov	r5, r1
 8006e4e:	f7f9 fb9f 	bl	8000590 <__aeabi_dmul>
 8006e52:	a35b      	add	r3, pc, #364	; (adr r3, 8006fc0 <__ieee754_pow+0xa00>)
 8006e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e58:	f7f9 f9e2 	bl	8000220 <__aeabi_dsub>
 8006e5c:	4622      	mov	r2, r4
 8006e5e:	462b      	mov	r3, r5
 8006e60:	f7f9 fb96 	bl	8000590 <__aeabi_dmul>
 8006e64:	a358      	add	r3, pc, #352	; (adr r3, 8006fc8 <__ieee754_pow+0xa08>)
 8006e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6a:	f7f9 f9db 	bl	8000224 <__adddf3>
 8006e6e:	4622      	mov	r2, r4
 8006e70:	462b      	mov	r3, r5
 8006e72:	f7f9 fb8d 	bl	8000590 <__aeabi_dmul>
 8006e76:	a356      	add	r3, pc, #344	; (adr r3, 8006fd0 <__ieee754_pow+0xa10>)
 8006e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7c:	f7f9 f9d0 	bl	8000220 <__aeabi_dsub>
 8006e80:	4622      	mov	r2, r4
 8006e82:	462b      	mov	r3, r5
 8006e84:	f7f9 fb84 	bl	8000590 <__aeabi_dmul>
 8006e88:	a353      	add	r3, pc, #332	; (adr r3, 8006fd8 <__ieee754_pow+0xa18>)
 8006e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8e:	f7f9 f9c9 	bl	8000224 <__adddf3>
 8006e92:	4622      	mov	r2, r4
 8006e94:	462b      	mov	r3, r5
 8006e96:	f7f9 fb7b 	bl	8000590 <__aeabi_dmul>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4640      	mov	r0, r8
 8006ea0:	4649      	mov	r1, r9
 8006ea2:	f7f9 f9bd 	bl	8000220 <__aeabi_dsub>
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	460d      	mov	r5, r1
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	4640      	mov	r0, r8
 8006eb0:	4649      	mov	r1, r9
 8006eb2:	f7f9 fb6d 	bl	8000590 <__aeabi_dmul>
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	ec41 0b19 	vmov	d9, r0, r1
 8006ebc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	f7f9 f9ac 	bl	8000220 <__aeabi_dsub>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	ec51 0b19 	vmov	r0, r1, d9
 8006ed0:	f7f9 fc88 	bl	80007e4 <__aeabi_ddiv>
 8006ed4:	4632      	mov	r2, r6
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	460d      	mov	r5, r1
 8006eda:	463b      	mov	r3, r7
 8006edc:	4640      	mov	r0, r8
 8006ede:	4649      	mov	r1, r9
 8006ee0:	f7f9 fb56 	bl	8000590 <__aeabi_dmul>
 8006ee4:	4632      	mov	r2, r6
 8006ee6:	463b      	mov	r3, r7
 8006ee8:	f7f9 f99c 	bl	8000224 <__adddf3>
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	f7f9 f994 	bl	8000220 <__aeabi_dsub>
 8006ef8:	4642      	mov	r2, r8
 8006efa:	464b      	mov	r3, r9
 8006efc:	f7f9 f990 	bl	8000220 <__aeabi_dsub>
 8006f00:	460b      	mov	r3, r1
 8006f02:	4602      	mov	r2, r0
 8006f04:	493a      	ldr	r1, [pc, #232]	; (8006ff0 <__ieee754_pow+0xa30>)
 8006f06:	2000      	movs	r0, #0
 8006f08:	f7f9 f98a 	bl	8000220 <__aeabi_dsub>
 8006f0c:	e9cd 0100 	strd	r0, r1, [sp]
 8006f10:	9b01      	ldr	r3, [sp, #4]
 8006f12:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f1a:	da2f      	bge.n	8006f7c <__ieee754_pow+0x9bc>
 8006f1c:	4650      	mov	r0, sl
 8006f1e:	ed9d 0b00 	vldr	d0, [sp]
 8006f22:	f000 f9cd 	bl	80072c0 <scalbn>
 8006f26:	ec51 0b10 	vmov	r0, r1, d0
 8006f2a:	ec53 2b18 	vmov	r2, r3, d8
 8006f2e:	f7ff bbe0 	b.w	80066f2 <__ieee754_pow+0x132>
 8006f32:	4b30      	ldr	r3, [pc, #192]	; (8006ff4 <__ieee754_pow+0xa34>)
 8006f34:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006f38:	429e      	cmp	r6, r3
 8006f3a:	f77f af0b 	ble.w	8006d54 <__ieee754_pow+0x794>
 8006f3e:	4b2e      	ldr	r3, [pc, #184]	; (8006ff8 <__ieee754_pow+0xa38>)
 8006f40:	440b      	add	r3, r1
 8006f42:	4303      	orrs	r3, r0
 8006f44:	d00b      	beq.n	8006f5e <__ieee754_pow+0x99e>
 8006f46:	a326      	add	r3, pc, #152	; (adr r3, 8006fe0 <__ieee754_pow+0xa20>)
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	ec51 0b18 	vmov	r0, r1, d8
 8006f50:	f7f9 fb1e 	bl	8000590 <__aeabi_dmul>
 8006f54:	a322      	add	r3, pc, #136	; (adr r3, 8006fe0 <__ieee754_pow+0xa20>)
 8006f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5a:	f7ff bbca 	b.w	80066f2 <__ieee754_pow+0x132>
 8006f5e:	4622      	mov	r2, r4
 8006f60:	462b      	mov	r3, r5
 8006f62:	f7f9 f95d 	bl	8000220 <__aeabi_dsub>
 8006f66:	4642      	mov	r2, r8
 8006f68:	464b      	mov	r3, r9
 8006f6a:	f7f9 fd97 	bl	8000a9c <__aeabi_dcmpge>
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	f43f aef0 	beq.w	8006d54 <__ieee754_pow+0x794>
 8006f74:	e7e7      	b.n	8006f46 <__ieee754_pow+0x986>
 8006f76:	f04f 0a00 	mov.w	sl, #0
 8006f7a:	e717      	b.n	8006dac <__ieee754_pow+0x7ec>
 8006f7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f80:	4619      	mov	r1, r3
 8006f82:	e7d2      	b.n	8006f2a <__ieee754_pow+0x96a>
 8006f84:	491a      	ldr	r1, [pc, #104]	; (8006ff0 <__ieee754_pow+0xa30>)
 8006f86:	2000      	movs	r0, #0
 8006f88:	f7ff bb9e 	b.w	80066c8 <__ieee754_pow+0x108>
 8006f8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f90:	f7ff bb9a 	b.w	80066c8 <__ieee754_pow+0x108>
 8006f94:	9000      	str	r0, [sp, #0]
 8006f96:	f7ff bb76 	b.w	8006686 <__ieee754_pow+0xc6>
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	f7ff bb60 	b.w	8006660 <__ieee754_pow+0xa0>
 8006fa0:	00000000 	.word	0x00000000
 8006fa4:	3fe62e43 	.word	0x3fe62e43
 8006fa8:	fefa39ef 	.word	0xfefa39ef
 8006fac:	3fe62e42 	.word	0x3fe62e42
 8006fb0:	0ca86c39 	.word	0x0ca86c39
 8006fb4:	be205c61 	.word	0xbe205c61
 8006fb8:	72bea4d0 	.word	0x72bea4d0
 8006fbc:	3e663769 	.word	0x3e663769
 8006fc0:	c5d26bf1 	.word	0xc5d26bf1
 8006fc4:	3ebbbd41 	.word	0x3ebbbd41
 8006fc8:	af25de2c 	.word	0xaf25de2c
 8006fcc:	3f11566a 	.word	0x3f11566a
 8006fd0:	16bebd93 	.word	0x16bebd93
 8006fd4:	3f66c16c 	.word	0x3f66c16c
 8006fd8:	5555553e 	.word	0x5555553e
 8006fdc:	3fc55555 	.word	0x3fc55555
 8006fe0:	c2f8f359 	.word	0xc2f8f359
 8006fe4:	01a56e1f 	.word	0x01a56e1f
 8006fe8:	3fe00000 	.word	0x3fe00000
 8006fec:	000fffff 	.word	0x000fffff
 8006ff0:	3ff00000 	.word	0x3ff00000
 8006ff4:	4090cbff 	.word	0x4090cbff
 8006ff8:	3f6f3400 	.word	0x3f6f3400
 8006ffc:	652b82fe 	.word	0x652b82fe
 8007000:	3c971547 	.word	0x3c971547

08007004 <__ieee754_sqrt>:
 8007004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007008:	ec55 4b10 	vmov	r4, r5, d0
 800700c:	4e56      	ldr	r6, [pc, #344]	; (8007168 <__ieee754_sqrt+0x164>)
 800700e:	43ae      	bics	r6, r5
 8007010:	ee10 0a10 	vmov	r0, s0
 8007014:	ee10 3a10 	vmov	r3, s0
 8007018:	4629      	mov	r1, r5
 800701a:	462a      	mov	r2, r5
 800701c:	d110      	bne.n	8007040 <__ieee754_sqrt+0x3c>
 800701e:	ee10 2a10 	vmov	r2, s0
 8007022:	462b      	mov	r3, r5
 8007024:	f7f9 fab4 	bl	8000590 <__aeabi_dmul>
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	4620      	mov	r0, r4
 800702e:	4629      	mov	r1, r5
 8007030:	f7f9 f8f8 	bl	8000224 <__adddf3>
 8007034:	4604      	mov	r4, r0
 8007036:	460d      	mov	r5, r1
 8007038:	ec45 4b10 	vmov	d0, r4, r5
 800703c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007040:	2d00      	cmp	r5, #0
 8007042:	dc10      	bgt.n	8007066 <__ieee754_sqrt+0x62>
 8007044:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007048:	4330      	orrs	r0, r6
 800704a:	d0f5      	beq.n	8007038 <__ieee754_sqrt+0x34>
 800704c:	b15d      	cbz	r5, 8007066 <__ieee754_sqrt+0x62>
 800704e:	ee10 2a10 	vmov	r2, s0
 8007052:	462b      	mov	r3, r5
 8007054:	ee10 0a10 	vmov	r0, s0
 8007058:	f7f9 f8e2 	bl	8000220 <__aeabi_dsub>
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	f7f9 fbc0 	bl	80007e4 <__aeabi_ddiv>
 8007064:	e7e6      	b.n	8007034 <__ieee754_sqrt+0x30>
 8007066:	1509      	asrs	r1, r1, #20
 8007068:	d076      	beq.n	8007158 <__ieee754_sqrt+0x154>
 800706a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800706e:	07ce      	lsls	r6, r1, #31
 8007070:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007074:	bf5e      	ittt	pl
 8007076:	0fda      	lsrpl	r2, r3, #31
 8007078:	005b      	lslpl	r3, r3, #1
 800707a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800707e:	0fda      	lsrs	r2, r3, #31
 8007080:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007084:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007088:	2000      	movs	r0, #0
 800708a:	106d      	asrs	r5, r5, #1
 800708c:	005b      	lsls	r3, r3, #1
 800708e:	f04f 0e16 	mov.w	lr, #22
 8007092:	4684      	mov	ip, r0
 8007094:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007098:	eb0c 0401 	add.w	r4, ip, r1
 800709c:	4294      	cmp	r4, r2
 800709e:	bfde      	ittt	le
 80070a0:	1b12      	suble	r2, r2, r4
 80070a2:	eb04 0c01 	addle.w	ip, r4, r1
 80070a6:	1840      	addle	r0, r0, r1
 80070a8:	0052      	lsls	r2, r2, #1
 80070aa:	f1be 0e01 	subs.w	lr, lr, #1
 80070ae:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80070b2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80070b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80070ba:	d1ed      	bne.n	8007098 <__ieee754_sqrt+0x94>
 80070bc:	4671      	mov	r1, lr
 80070be:	2720      	movs	r7, #32
 80070c0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80070c4:	4562      	cmp	r2, ip
 80070c6:	eb04 060e 	add.w	r6, r4, lr
 80070ca:	dc02      	bgt.n	80070d2 <__ieee754_sqrt+0xce>
 80070cc:	d113      	bne.n	80070f6 <__ieee754_sqrt+0xf2>
 80070ce:	429e      	cmp	r6, r3
 80070d0:	d811      	bhi.n	80070f6 <__ieee754_sqrt+0xf2>
 80070d2:	2e00      	cmp	r6, #0
 80070d4:	eb06 0e04 	add.w	lr, r6, r4
 80070d8:	da43      	bge.n	8007162 <__ieee754_sqrt+0x15e>
 80070da:	f1be 0f00 	cmp.w	lr, #0
 80070de:	db40      	blt.n	8007162 <__ieee754_sqrt+0x15e>
 80070e0:	f10c 0801 	add.w	r8, ip, #1
 80070e4:	eba2 020c 	sub.w	r2, r2, ip
 80070e8:	429e      	cmp	r6, r3
 80070ea:	bf88      	it	hi
 80070ec:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80070f0:	1b9b      	subs	r3, r3, r6
 80070f2:	4421      	add	r1, r4
 80070f4:	46c4      	mov	ip, r8
 80070f6:	0052      	lsls	r2, r2, #1
 80070f8:	3f01      	subs	r7, #1
 80070fa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80070fe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007102:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007106:	d1dd      	bne.n	80070c4 <__ieee754_sqrt+0xc0>
 8007108:	4313      	orrs	r3, r2
 800710a:	d006      	beq.n	800711a <__ieee754_sqrt+0x116>
 800710c:	1c4c      	adds	r4, r1, #1
 800710e:	bf13      	iteet	ne
 8007110:	3101      	addne	r1, #1
 8007112:	3001      	addeq	r0, #1
 8007114:	4639      	moveq	r1, r7
 8007116:	f021 0101 	bicne.w	r1, r1, #1
 800711a:	1043      	asrs	r3, r0, #1
 800711c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007120:	0849      	lsrs	r1, r1, #1
 8007122:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007126:	07c2      	lsls	r2, r0, #31
 8007128:	bf48      	it	mi
 800712a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800712e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007132:	460c      	mov	r4, r1
 8007134:	463d      	mov	r5, r7
 8007136:	e77f      	b.n	8007038 <__ieee754_sqrt+0x34>
 8007138:	0ada      	lsrs	r2, r3, #11
 800713a:	3815      	subs	r0, #21
 800713c:	055b      	lsls	r3, r3, #21
 800713e:	2a00      	cmp	r2, #0
 8007140:	d0fa      	beq.n	8007138 <__ieee754_sqrt+0x134>
 8007142:	02d7      	lsls	r7, r2, #11
 8007144:	d50a      	bpl.n	800715c <__ieee754_sqrt+0x158>
 8007146:	f1c1 0420 	rsb	r4, r1, #32
 800714a:	fa23 f404 	lsr.w	r4, r3, r4
 800714e:	1e4d      	subs	r5, r1, #1
 8007150:	408b      	lsls	r3, r1
 8007152:	4322      	orrs	r2, r4
 8007154:	1b41      	subs	r1, r0, r5
 8007156:	e788      	b.n	800706a <__ieee754_sqrt+0x66>
 8007158:	4608      	mov	r0, r1
 800715a:	e7f0      	b.n	800713e <__ieee754_sqrt+0x13a>
 800715c:	0052      	lsls	r2, r2, #1
 800715e:	3101      	adds	r1, #1
 8007160:	e7ef      	b.n	8007142 <__ieee754_sqrt+0x13e>
 8007162:	46e0      	mov	r8, ip
 8007164:	e7be      	b.n	80070e4 <__ieee754_sqrt+0xe0>
 8007166:	bf00      	nop
 8007168:	7ff00000 	.word	0x7ff00000

0800716c <fabs>:
 800716c:	ec51 0b10 	vmov	r0, r1, d0
 8007170:	ee10 2a10 	vmov	r2, s0
 8007174:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007178:	ec43 2b10 	vmov	d0, r2, r3
 800717c:	4770      	bx	lr

0800717e <finite>:
 800717e:	b082      	sub	sp, #8
 8007180:	ed8d 0b00 	vstr	d0, [sp]
 8007184:	9801      	ldr	r0, [sp, #4]
 8007186:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800718a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800718e:	0fc0      	lsrs	r0, r0, #31
 8007190:	b002      	add	sp, #8
 8007192:	4770      	bx	lr
 8007194:	0000      	movs	r0, r0
	...

08007198 <nan>:
 8007198:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80071a0 <nan+0x8>
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	00000000 	.word	0x00000000
 80071a4:	7ff80000 	.word	0x7ff80000

080071a8 <rint>:
 80071a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071aa:	ec51 0b10 	vmov	r0, r1, d0
 80071ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80071b2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80071b6:	2e13      	cmp	r6, #19
 80071b8:	ee10 4a10 	vmov	r4, s0
 80071bc:	460b      	mov	r3, r1
 80071be:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80071c2:	dc58      	bgt.n	8007276 <rint+0xce>
 80071c4:	2e00      	cmp	r6, #0
 80071c6:	da2b      	bge.n	8007220 <rint+0x78>
 80071c8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80071cc:	4302      	orrs	r2, r0
 80071ce:	d023      	beq.n	8007218 <rint+0x70>
 80071d0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80071d4:	4302      	orrs	r2, r0
 80071d6:	4254      	negs	r4, r2
 80071d8:	4314      	orrs	r4, r2
 80071da:	0c4b      	lsrs	r3, r1, #17
 80071dc:	0b24      	lsrs	r4, r4, #12
 80071de:	045b      	lsls	r3, r3, #17
 80071e0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80071e4:	ea44 0103 	orr.w	r1, r4, r3
 80071e8:	4b32      	ldr	r3, [pc, #200]	; (80072b4 <rint+0x10c>)
 80071ea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80071ee:	e9d3 6700 	ldrd	r6, r7, [r3]
 80071f2:	4602      	mov	r2, r0
 80071f4:	460b      	mov	r3, r1
 80071f6:	4630      	mov	r0, r6
 80071f8:	4639      	mov	r1, r7
 80071fa:	f7f9 f813 	bl	8000224 <__adddf3>
 80071fe:	e9cd 0100 	strd	r0, r1, [sp]
 8007202:	463b      	mov	r3, r7
 8007204:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007208:	4632      	mov	r2, r6
 800720a:	f7f9 f809 	bl	8000220 <__aeabi_dsub>
 800720e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007212:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007216:	4639      	mov	r1, r7
 8007218:	ec41 0b10 	vmov	d0, r0, r1
 800721c:	b003      	add	sp, #12
 800721e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007220:	4a25      	ldr	r2, [pc, #148]	; (80072b8 <rint+0x110>)
 8007222:	4132      	asrs	r2, r6
 8007224:	ea01 0702 	and.w	r7, r1, r2
 8007228:	4307      	orrs	r7, r0
 800722a:	d0f5      	beq.n	8007218 <rint+0x70>
 800722c:	0851      	lsrs	r1, r2, #1
 800722e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8007232:	4314      	orrs	r4, r2
 8007234:	d00c      	beq.n	8007250 <rint+0xa8>
 8007236:	ea23 0201 	bic.w	r2, r3, r1
 800723a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800723e:	2e13      	cmp	r6, #19
 8007240:	fa43 f606 	asr.w	r6, r3, r6
 8007244:	bf0c      	ite	eq
 8007246:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800724a:	2400      	movne	r4, #0
 800724c:	ea42 0306 	orr.w	r3, r2, r6
 8007250:	4918      	ldr	r1, [pc, #96]	; (80072b4 <rint+0x10c>)
 8007252:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007256:	4622      	mov	r2, r4
 8007258:	e9d5 4500 	ldrd	r4, r5, [r5]
 800725c:	4620      	mov	r0, r4
 800725e:	4629      	mov	r1, r5
 8007260:	f7f8 ffe0 	bl	8000224 <__adddf3>
 8007264:	e9cd 0100 	strd	r0, r1, [sp]
 8007268:	e9dd 0100 	ldrd	r0, r1, [sp]
 800726c:	4622      	mov	r2, r4
 800726e:	462b      	mov	r3, r5
 8007270:	f7f8 ffd6 	bl	8000220 <__aeabi_dsub>
 8007274:	e7d0      	b.n	8007218 <rint+0x70>
 8007276:	2e33      	cmp	r6, #51	; 0x33
 8007278:	dd07      	ble.n	800728a <rint+0xe2>
 800727a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800727e:	d1cb      	bne.n	8007218 <rint+0x70>
 8007280:	ee10 2a10 	vmov	r2, s0
 8007284:	f7f8 ffce 	bl	8000224 <__adddf3>
 8007288:	e7c6      	b.n	8007218 <rint+0x70>
 800728a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800728e:	f04f 36ff 	mov.w	r6, #4294967295
 8007292:	40d6      	lsrs	r6, r2
 8007294:	4230      	tst	r0, r6
 8007296:	d0bf      	beq.n	8007218 <rint+0x70>
 8007298:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800729c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80072a0:	bf1f      	itttt	ne
 80072a2:	ea24 0101 	bicne.w	r1, r4, r1
 80072a6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80072aa:	fa44 f202 	asrne.w	r2, r4, r2
 80072ae:	ea41 0402 	orrne.w	r4, r1, r2
 80072b2:	e7cd      	b.n	8007250 <rint+0xa8>
 80072b4:	08007460 	.word	0x08007460
 80072b8:	000fffff 	.word	0x000fffff
 80072bc:	00000000 	.word	0x00000000

080072c0 <scalbn>:
 80072c0:	b570      	push	{r4, r5, r6, lr}
 80072c2:	ec55 4b10 	vmov	r4, r5, d0
 80072c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80072ca:	4606      	mov	r6, r0
 80072cc:	462b      	mov	r3, r5
 80072ce:	b99a      	cbnz	r2, 80072f8 <scalbn+0x38>
 80072d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80072d4:	4323      	orrs	r3, r4
 80072d6:	d036      	beq.n	8007346 <scalbn+0x86>
 80072d8:	4b39      	ldr	r3, [pc, #228]	; (80073c0 <scalbn+0x100>)
 80072da:	4629      	mov	r1, r5
 80072dc:	ee10 0a10 	vmov	r0, s0
 80072e0:	2200      	movs	r2, #0
 80072e2:	f7f9 f955 	bl	8000590 <__aeabi_dmul>
 80072e6:	4b37      	ldr	r3, [pc, #220]	; (80073c4 <scalbn+0x104>)
 80072e8:	429e      	cmp	r6, r3
 80072ea:	4604      	mov	r4, r0
 80072ec:	460d      	mov	r5, r1
 80072ee:	da10      	bge.n	8007312 <scalbn+0x52>
 80072f0:	a32b      	add	r3, pc, #172	; (adr r3, 80073a0 <scalbn+0xe0>)
 80072f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f6:	e03a      	b.n	800736e <scalbn+0xae>
 80072f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80072fc:	428a      	cmp	r2, r1
 80072fe:	d10c      	bne.n	800731a <scalbn+0x5a>
 8007300:	ee10 2a10 	vmov	r2, s0
 8007304:	4620      	mov	r0, r4
 8007306:	4629      	mov	r1, r5
 8007308:	f7f8 ff8c 	bl	8000224 <__adddf3>
 800730c:	4604      	mov	r4, r0
 800730e:	460d      	mov	r5, r1
 8007310:	e019      	b.n	8007346 <scalbn+0x86>
 8007312:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007316:	460b      	mov	r3, r1
 8007318:	3a36      	subs	r2, #54	; 0x36
 800731a:	4432      	add	r2, r6
 800731c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007320:	428a      	cmp	r2, r1
 8007322:	dd08      	ble.n	8007336 <scalbn+0x76>
 8007324:	2d00      	cmp	r5, #0
 8007326:	a120      	add	r1, pc, #128	; (adr r1, 80073a8 <scalbn+0xe8>)
 8007328:	e9d1 0100 	ldrd	r0, r1, [r1]
 800732c:	da1c      	bge.n	8007368 <scalbn+0xa8>
 800732e:	a120      	add	r1, pc, #128	; (adr r1, 80073b0 <scalbn+0xf0>)
 8007330:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007334:	e018      	b.n	8007368 <scalbn+0xa8>
 8007336:	2a00      	cmp	r2, #0
 8007338:	dd08      	ble.n	800734c <scalbn+0x8c>
 800733a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800733e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007342:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007346:	ec45 4b10 	vmov	d0, r4, r5
 800734a:	bd70      	pop	{r4, r5, r6, pc}
 800734c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007350:	da19      	bge.n	8007386 <scalbn+0xc6>
 8007352:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007356:	429e      	cmp	r6, r3
 8007358:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800735c:	dd0a      	ble.n	8007374 <scalbn+0xb4>
 800735e:	a112      	add	r1, pc, #72	; (adr r1, 80073a8 <scalbn+0xe8>)
 8007360:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1e2      	bne.n	800732e <scalbn+0x6e>
 8007368:	a30f      	add	r3, pc, #60	; (adr r3, 80073a8 <scalbn+0xe8>)
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	f7f9 f90f 	bl	8000590 <__aeabi_dmul>
 8007372:	e7cb      	b.n	800730c <scalbn+0x4c>
 8007374:	a10a      	add	r1, pc, #40	; (adr r1, 80073a0 <scalbn+0xe0>)
 8007376:	e9d1 0100 	ldrd	r0, r1, [r1]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0b8      	beq.n	80072f0 <scalbn+0x30>
 800737e:	a10e      	add	r1, pc, #56	; (adr r1, 80073b8 <scalbn+0xf8>)
 8007380:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007384:	e7b4      	b.n	80072f0 <scalbn+0x30>
 8007386:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800738a:	3236      	adds	r2, #54	; 0x36
 800738c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007390:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007394:	4620      	mov	r0, r4
 8007396:	4b0c      	ldr	r3, [pc, #48]	; (80073c8 <scalbn+0x108>)
 8007398:	2200      	movs	r2, #0
 800739a:	e7e8      	b.n	800736e <scalbn+0xae>
 800739c:	f3af 8000 	nop.w
 80073a0:	c2f8f359 	.word	0xc2f8f359
 80073a4:	01a56e1f 	.word	0x01a56e1f
 80073a8:	8800759c 	.word	0x8800759c
 80073ac:	7e37e43c 	.word	0x7e37e43c
 80073b0:	8800759c 	.word	0x8800759c
 80073b4:	fe37e43c 	.word	0xfe37e43c
 80073b8:	c2f8f359 	.word	0xc2f8f359
 80073bc:	81a56e1f 	.word	0x81a56e1f
 80073c0:	43500000 	.word	0x43500000
 80073c4:	ffff3cb0 	.word	0xffff3cb0
 80073c8:	3c900000 	.word	0x3c900000

080073cc <_init>:
 80073cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ce:	bf00      	nop
 80073d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d2:	bc08      	pop	{r3}
 80073d4:	469e      	mov	lr, r3
 80073d6:	4770      	bx	lr

080073d8 <_fini>:
 80073d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073da:	bf00      	nop
 80073dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073de:	bc08      	pop	{r3}
 80073e0:	469e      	mov	lr, r3
 80073e2:	4770      	bx	lr
