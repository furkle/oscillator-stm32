
oscillator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d44  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007f20  08007f20  00017f20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fc0  08007fc0  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08007fc0  08007fc0  00017fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fc8  08007fc8  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fc8  08007fc8  00017fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fcc  08007fcc  00017fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08007fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  200000a4  08008074  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08008074  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd63  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003270  00000000  00000000  0003ce37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  000400a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e0  00000000  00000000  000416c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021fb3  00000000  00000000  00042ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a87  00000000  00000000  00064b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1793  00000000  00000000  0007c5da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015dd6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000633c  00000000  00000000  0015ddc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000a4 	.word	0x200000a4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007f04 	.word	0x08007f04

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000a8 	.word	0x200000a8
 8000214:	08007f04 	.word	0x08007f04

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b96e 	b.w	8000e84 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468c      	mov	ip, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 8083 	bne.w	8000cd6 <__udivmoddi4+0x116>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	d947      	bls.n	8000c66 <__udivmoddi4+0xa6>
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	b142      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bdc:	f1c2 0020 	rsb	r0, r2, #32
 8000be0:	fa24 f000 	lsr.w	r0, r4, r0
 8000be4:	4091      	lsls	r1, r2
 8000be6:	4097      	lsls	r7, r2
 8000be8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf8:	fa1f fe87 	uxth.w	lr, r7
 8000bfc:	fb08 c116 	mls	r1, r8, r6, ip
 8000c00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c04:	fb06 f10e 	mul.w	r1, r6, lr
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c12:	f080 8119 	bcs.w	8000e48 <__udivmoddi4+0x288>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8116 	bls.w	8000e48 <__udivmoddi4+0x288>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	443b      	add	r3, r7
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	f080 8105 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8102 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c50:	eba4 040e 	sub.w	r4, r4, lr
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	b902      	cbnz	r2, 8000c6a <__udivmoddi4+0xaa>
 8000c68:	deff      	udf	#255	; 0xff
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d150      	bne.n	8000d14 <__udivmoddi4+0x154>
 8000c72:	1bcb      	subs	r3, r1, r7
 8000c74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c78:	fa1f f887 	uxth.w	r8, r7
 8000c7c:	2601      	movs	r6, #1
 8000c7e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c82:	0c21      	lsrs	r1, r4, #16
 8000c84:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000c94:	1879      	adds	r1, r7, r1
 8000c96:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0xe2>
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	f200 80e9 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000ca2:	4684      	mov	ip, r0
 8000ca4:	1ac9      	subs	r1, r1, r3
 8000ca6:	b2a3      	uxth	r3, r4
 8000ca8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cac:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb4:	fb08 f800 	mul.w	r8, r8, r0
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x10c>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x10a>
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	f200 80d9 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000cca:	4618      	mov	r0, r3
 8000ccc:	eba4 0408 	sub.w	r4, r4, r8
 8000cd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd4:	e7bf      	b.n	8000c56 <__udivmoddi4+0x96>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0x12e>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	f000 80b1 	beq.w	8000e42 <__udivmoddi4+0x282>
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	fab3 f683 	clz	r6, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d14a      	bne.n	8000d8c <__udivmoddi4+0x1cc>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0x140>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 80b8 	bhi.w	8000e70 <__udivmoddi4+0x2b0>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb61 0103 	sbc.w	r1, r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	468c      	mov	ip, r1
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0a8      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000d0e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f603 	lsr.w	r6, r0, r3
 8000d1c:	4097      	lsls	r7, r2
 8000d1e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d22:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d26:	40d9      	lsrs	r1, r3
 8000d28:	4330      	orrs	r0, r6
 8000d2a:	0c03      	lsrs	r3, r0, #16
 8000d2c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f108 	mul.w	r1, r6, r8
 8000d40:	4299      	cmp	r1, r3
 8000d42:	fa04 f402 	lsl.w	r4, r4, r2
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x19c>
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d4e:	f080 808d 	bcs.w	8000e6c <__udivmoddi4+0x2ac>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 808a 	bls.w	8000e6c <__udivmoddi4+0x2ac>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	443b      	add	r3, r7
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b281      	uxth	r1, r0
 8000d60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb00 f308 	mul.w	r3, r0, r8
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x1c4>
 8000d74:	1879      	adds	r1, r7, r1
 8000d76:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d7a:	d273      	bcs.n	8000e64 <__udivmoddi4+0x2a4>
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d971      	bls.n	8000e64 <__udivmoddi4+0x2a4>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4439      	add	r1, r7
 8000d84:	1acb      	subs	r3, r1, r3
 8000d86:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d8a:	e778      	b.n	8000c7e <__udivmoddi4+0xbe>
 8000d8c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d90:	fa03 f406 	lsl.w	r4, r3, r6
 8000d94:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000da2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000da6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000daa:	431f      	orrs	r7, r3
 8000dac:	0c3b      	lsrs	r3, r7, #16
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fa1f f884 	uxth.w	r8, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dbe:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x220>
 8000dce:	1861      	adds	r1, r4, r1
 8000dd0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd4:	d248      	bcs.n	8000e68 <__udivmoddi4+0x2a8>
 8000dd6:	458a      	cmp	sl, r1
 8000dd8:	d946      	bls.n	8000e68 <__udivmoddi4+0x2a8>
 8000dda:	f1a9 0902 	sub.w	r9, r9, #2
 8000dde:	4421      	add	r1, r4
 8000de0:	eba1 010a 	sub.w	r1, r1, sl
 8000de4:	b2bf      	uxth	r7, r7
 8000de6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dea:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000df2:	fb00 f808 	mul.w	r8, r0, r8
 8000df6:	45b8      	cmp	r8, r7
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x24a>
 8000dfa:	19e7      	adds	r7, r4, r7
 8000dfc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e00:	d22e      	bcs.n	8000e60 <__udivmoddi4+0x2a0>
 8000e02:	45b8      	cmp	r8, r7
 8000e04:	d92c      	bls.n	8000e60 <__udivmoddi4+0x2a0>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4427      	add	r7, r4
 8000e0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0e:	eba7 0708 	sub.w	r7, r7, r8
 8000e12:	fba0 8902 	umull	r8, r9, r0, r2
 8000e16:	454f      	cmp	r7, r9
 8000e18:	46c6      	mov	lr, r8
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	d31a      	bcc.n	8000e54 <__udivmoddi4+0x294>
 8000e1e:	d017      	beq.n	8000e50 <__udivmoddi4+0x290>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x27a>
 8000e22:	ebb3 020e 	subs.w	r2, r3, lr
 8000e26:	eb67 0701 	sbc.w	r7, r7, r1
 8000e2a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e2e:	40f2      	lsrs	r2, r6
 8000e30:	ea4c 0202 	orr.w	r2, ip, r2
 8000e34:	40f7      	lsrs	r7, r6
 8000e36:	e9c5 2700 	strd	r2, r7, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e70b      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e9      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fd      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e50:	4543      	cmp	r3, r8
 8000e52:	d2e5      	bcs.n	8000e20 <__udivmoddi4+0x260>
 8000e54:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e58:	eb69 0104 	sbc.w	r1, r9, r4
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7df      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e7d2      	b.n	8000e0a <__udivmoddi4+0x24a>
 8000e64:	4660      	mov	r0, ip
 8000e66:	e78d      	b.n	8000d84 <__udivmoddi4+0x1c4>
 8000e68:	4681      	mov	r9, r0
 8000e6a:	e7b9      	b.n	8000de0 <__udivmoddi4+0x220>
 8000e6c:	4666      	mov	r6, ip
 8000e6e:	e775      	b.n	8000d5c <__udivmoddi4+0x19c>
 8000e70:	4630      	mov	r0, r6
 8000e72:	e74a      	b.n	8000d0a <__udivmoddi4+0x14a>
 8000e74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e78:	4439      	add	r1, r7
 8000e7a:	e713      	b.n	8000ca4 <__udivmoddi4+0xe4>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	443c      	add	r4, r7
 8000e80:	e724      	b.n	8000ccc <__udivmoddi4+0x10c>
 8000e82:	bf00      	nop

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <HAL_ADC_ConvCpltCallback>:
float phase_delta = 0.0f;
float note_number = -1.0f;
float target_frequency = -1.0f;
float pulse_width = 0.5f;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e98:	d148      	bne.n	8000f2c <HAL_ADC_ConvCpltCallback+0xa4>
		last_note_number = note_number;
 8000e9a:	4b41      	ldr	r3, [pc, #260]	; (8000fa0 <HAL_ADC_ConvCpltCallback+0x118>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a41      	ldr	r2, [pc, #260]	; (8000fa4 <HAL_ADC_ConvCpltCallback+0x11c>)
 8000ea0:	6013      	str	r3, [r2, #0]
		note_number = (float)HAL_ADC_GetValue(hadc) / 32.0f;
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f001 fea8 	bl	8002bf8 <HAL_ADC_GetValue>
 8000ea8:	ee07 0a90 	vmov	s15, r0
 8000eac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000eb0:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8000fa8 <HAL_ADC_ConvCpltCallback+0x120>
 8000eb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eb8:	4b39      	ldr	r3, [pc, #228]	; (8000fa0 <HAL_ADC_ConvCpltCallback+0x118>)
 8000eba:	edc3 7a00 	vstr	s15, [r3]
		target_frequency = 440.0f * pow(2.0f + FINE_TUNE, (note_number - 69.0f) / 12.0f);
 8000ebe:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <HAL_ADC_ConvCpltCallback+0x118>)
 8000ec0:	edd3 7a00 	vldr	s15, [r3]
 8000ec4:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8000fac <HAL_ADC_ConvCpltCallback+0x124>
 8000ec8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ecc:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000ed0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000ed4:	ee16 0a90 	vmov	r0, s13
 8000ed8:	f7ff fb02 	bl	80004e0 <__aeabi_f2d>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	ec43 2b11 	vmov	d1, r2, r3
 8000ee4:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8000f98 <HAL_ADC_ConvCpltCallback+0x110>
 8000ee8:	f005 ff44 	bl	8006d74 <pow>
 8000eec:	ec51 0b10 	vmov	r0, r1, d0
 8000ef0:	f04f 0200 	mov.w	r2, #0
 8000ef4:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <HAL_ADC_ConvCpltCallback+0x128>)
 8000ef6:	f7ff fb4b 	bl	8000590 <__aeabi_dmul>
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	4610      	mov	r0, r2
 8000f00:	4619      	mov	r1, r3
 8000f02:	f7ff fdf5 	bl	8000af0 <__aeabi_d2f>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4a2a      	ldr	r2, [pc, #168]	; (8000fb4 <HAL_ADC_ConvCpltCallback+0x12c>)
 8000f0a:	6013      	str	r3, [r2, #0]
		phase_delta = target_frequency * twoPI / SAMPLE_RATE; // (DAC_OUTPUT_MAX + 1.0f) * target_frequency / SAMPLE_RATE;
 8000f0c:	4b29      	ldr	r3, [pc, #164]	; (8000fb4 <HAL_ADC_ConvCpltCallback+0x12c>)
 8000f0e:	ed93 7a00 	vldr	s14, [r3]
 8000f12:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <HAL_ADC_ConvCpltCallback+0x130>)
 8000f14:	edd3 7a00 	vldr	s15, [r3]
 8000f18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f1c:	eddf 6a27 	vldr	s13, [pc, #156]	; 8000fbc <HAL_ADC_ConvCpltCallback+0x134>
 8000f20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f24:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <HAL_ADC_ConvCpltCallback+0x138>)
 8000f26:	edc3 7a00 	vstr	s15, [r3]
			pulse_width = 0.0f;
		} else if (pulse_width > 0.9875f) {
			pulse_width = 1.0f;
		}
	}
}
 8000f2a:	e030      	b.n	8000f8e <HAL_ADC_ConvCpltCallback+0x106>
	} else if (hadc->Instance == ADC2) {
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a24      	ldr	r2, [pc, #144]	; (8000fc4 <HAL_ADC_ConvCpltCallback+0x13c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d12b      	bne.n	8000f8e <HAL_ADC_ConvCpltCallback+0x106>
		pulse_width = (float)HAL_ADC_GetValue(hadc) / DAC_OUTPUT_MAX;
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f001 fe5e 	bl	8002bf8 <HAL_ADC_GetValue>
 8000f3c:	ee07 0a90 	vmov	s15, r0
 8000f40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f44:	eddf 6a20 	vldr	s13, [pc, #128]	; 8000fc8 <HAL_ADC_ConvCpltCallback+0x140>
 8000f48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <HAL_ADC_ConvCpltCallback+0x144>)
 8000f4e:	edc3 7a00 	vstr	s15, [r3]
		if (pulse_width < 0.0125f) {
 8000f52:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <HAL_ADC_ConvCpltCallback+0x144>)
 8000f54:	edd3 7a00 	vldr	s15, [r3]
 8000f58:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000fd0 <HAL_ADC_ConvCpltCallback+0x148>
 8000f5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f64:	d504      	bpl.n	8000f70 <HAL_ADC_ConvCpltCallback+0xe8>
			pulse_width = 0.0f;
 8000f66:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <HAL_ADC_ConvCpltCallback+0x144>)
 8000f68:	f04f 0200 	mov.w	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
}
 8000f6e:	e00e      	b.n	8000f8e <HAL_ADC_ConvCpltCallback+0x106>
		} else if (pulse_width > 0.9875f) {
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <HAL_ADC_ConvCpltCallback+0x144>)
 8000f72:	edd3 7a00 	vldr	s15, [r3]
 8000f76:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000fd4 <HAL_ADC_ConvCpltCallback+0x14c>
 8000f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f82:	dc00      	bgt.n	8000f86 <HAL_ADC_ConvCpltCallback+0xfe>
}
 8000f84:	e003      	b.n	8000f8e <HAL_ADC_ConvCpltCallback+0x106>
			pulse_width = 1.0f;
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <HAL_ADC_ConvCpltCallback+0x144>)
 8000f88:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f8c:	601a      	str	r2, [r3, #0]
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	00000000 	.word	0x00000000
 8000f9c:	40000000 	.word	0x40000000
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	200000d4 	.word	0x200000d4
 8000fa8:	42000000 	.word	0x42000000
 8000fac:	428a0000 	.word	0x428a0000
 8000fb0:	407b8000 	.word	0x407b8000
 8000fb4:	20000004 	.word	0x20000004
 8000fb8:	08007f24 	.word	0x08007f24
 8000fbc:	473b8000 	.word	0x473b8000
 8000fc0:	200000c0 	.word	0x200000c0
 8000fc4:	50000100 	.word	0x50000100
 8000fc8:	457ff000 	.word	0x457ff000
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	3c4ccccd 	.word	0x3c4ccccd
 8000fd4:	3f7ccccd 	.word	0x3f7ccccd

08000fd8 <HAL_COMP_TriggerCallback>:
#include "comp.h"
#include "adc.h"

SyncType sync_type = Soft_Sync_Falling;

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	if (HAL_COMP_GetOutputLevel(hcomp) == COMP_OUTPUT_LEVEL_LOW) {
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f003 f89f 	bl	8004124 <HAL_COMP_GetOutputLevel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d115      	bne.n	8001018 <HAL_COMP_TriggerCallback+0x40>
		if (sync_type == Hard_Sync_Both || sync_type == Hard_Sync_Falling) {
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_COMP_TriggerCallback+0x74>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d003      	beq.n	8000ffc <HAL_COMP_TriggerCallback+0x24>
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_COMP_TriggerCallback+0x74>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d102      	bne.n	8001002 <HAL_COMP_TriggerCallback+0x2a>
			hard_sync();
 8000ffc:	f000 f828 	bl	8001050 <hard_sync>
 8001000:	e020      	b.n	8001044 <HAL_COMP_TriggerCallback+0x6c>
		} else if (sync_type == Soft_Sync_Both || sync_type == Soft_Sync_Falling) {
 8001002:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_COMP_TriggerCallback+0x74>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b05      	cmp	r3, #5
 8001008:	d003      	beq.n	8001012 <HAL_COMP_TriggerCallback+0x3a>
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <HAL_COMP_TriggerCallback+0x74>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b04      	cmp	r3, #4
 8001010:	d118      	bne.n	8001044 <HAL_COMP_TriggerCallback+0x6c>
			soft_sync();
 8001012:	f000 f82d 	bl	8001070 <soft_sync>
			hard_sync();
		} else if (sync_type == Soft_Sync_Both || sync_type == Soft_Sync_Rising) {
			soft_sync();
		}
	}
}
 8001016:	e015      	b.n	8001044 <HAL_COMP_TriggerCallback+0x6c>
		if (sync_type == Hard_Sync_Both || sync_type == Hard_Sync_Rising) {
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <HAL_COMP_TriggerCallback+0x74>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d003      	beq.n	8001028 <HAL_COMP_TriggerCallback+0x50>
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_COMP_TriggerCallback+0x74>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <HAL_COMP_TriggerCallback+0x56>
			hard_sync();
 8001028:	f000 f812 	bl	8001050 <hard_sync>
 800102c:	e00a      	b.n	8001044 <HAL_COMP_TriggerCallback+0x6c>
		} else if (sync_type == Soft_Sync_Both || sync_type == Soft_Sync_Rising) {
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <HAL_COMP_TriggerCallback+0x74>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b05      	cmp	r3, #5
 8001034:	d003      	beq.n	800103e <HAL_COMP_TriggerCallback+0x66>
 8001036:	4b05      	ldr	r3, [pc, #20]	; (800104c <HAL_COMP_TriggerCallback+0x74>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b03      	cmp	r3, #3
 800103c:	d102      	bne.n	8001044 <HAL_COMP_TriggerCallback+0x6c>
			soft_sync();
 800103e:	f000 f817 	bl	8001070 <soft_sync>
}
 8001042:	e7ff      	b.n	8001044 <HAL_COMP_TriggerCallback+0x6c>
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2000000c 	.word	0x2000000c

08001050 <hard_sync>:

// Reset the phase increment back to the "zero"-crossing point.
void hard_sync() {
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
	waveform_phase = PI;
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <hard_sync+0x18>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <hard_sync+0x1c>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	08007f20 	.word	0x08007f20
 800106c:	200000c8 	.word	0x200000c8

08001070 <soft_sync>:

// "Reverse" the phase of the wave, or in other terms, mirror the position
// around the "zero"-crossing point.
void soft_sync() {
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
	waveform_phase = twoPI - waveform_phase;
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <soft_sync+0x24>)
 8001076:	ed93 7a00 	vldr	s14, [r3]
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <soft_sync+0x28>)
 800107c:	edd3 7a00 	vldr	s15, [r3]
 8001080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <soft_sync+0x28>)
 8001086:	edc3 7a00 	vstr	s15, [r3]
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	08007f24 	.word	0x08007f24
 8001098:	200000c8 	.word	0x200000c8

0800109c <render_waves>:
WaveType dac2_wave_type = Triangle_Wave;

float waveform_phase = 0.0f;
float last_output = 0.0f;

void render_waves() {
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	render_wave(&hdac1, DAC_CHANNEL_1, dac1_wave_type);
 80010a0:	4b1a      	ldr	r3, [pc, #104]	; (800110c <render_waves+0x70>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	2100      	movs	r1, #0
 80010a8:	4819      	ldr	r0, [pc, #100]	; (8001110 <render_waves+0x74>)
 80010aa:	f000 f8a5 	bl	80011f8 <render_wave>
	render_wave(&hdac1, DAC_CHANNEL_2, dac2_wave_type);
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <render_waves+0x78>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	2110      	movs	r1, #16
 80010b6:	4816      	ldr	r0, [pc, #88]	; (8001110 <render_waves+0x74>)
 80010b8:	f000 f89e 	bl	80011f8 <render_wave>
	render_pulse(GPIOA, GPIO_PIN_6);
 80010bc:	2140      	movs	r1, #64	; 0x40
 80010be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c2:	f000 fa05 	bl	80014d0 <render_pulse>

	waveform_phase += phase_delta;
 80010c6:	4b14      	ldr	r3, [pc, #80]	; (8001118 <render_waves+0x7c>)
 80010c8:	ed93 7a00 	vldr	s14, [r3]
 80010cc:	4b13      	ldr	r3, [pc, #76]	; (800111c <render_waves+0x80>)
 80010ce:	edd3 7a00 	vldr	s15, [r3]
 80010d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <render_waves+0x7c>)
 80010d8:	edc3 7a00 	vstr	s15, [r3]
	while (waveform_phase >= twoPI) {
 80010dc:	e009      	b.n	80010f2 <render_waves+0x56>
		waveform_phase -= twoPI;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <render_waves+0x7c>)
 80010e0:	edd3 7a00 	vldr	s15, [r3]
 80010e4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001120 <render_waves+0x84>
 80010e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <render_waves+0x7c>)
 80010ee:	edc3 7a00 	vstr	s15, [r3]
	while (waveform_phase >= twoPI) {
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <render_waves+0x7c>)
 80010f4:	edd3 7a00 	vldr	s15, [r3]
 80010f8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001120 <render_waves+0x84>
 80010fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001104:	daeb      	bge.n	80010de <render_waves+0x42>
	}
}
 8001106:	bf00      	nop
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	2000000d 	.word	0x2000000d
 8001110:	200000ec 	.word	0x200000ec
 8001114:	200000c4 	.word	0x200000c4
 8001118:	200000c8 	.word	0x200000c8
 800111c:	200000c0 	.word	0x200000c0
 8001120:	40c90fdb 	.word	0x40c90fdb

08001124 <poly_blep>:

// from http://www.martin-finke.de/blog/articles/audio-plugins-018-polyblep-oscillator/
float poly_blep(float t)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	ed87 0a01 	vstr	s0, [r7, #4]
    float dt = phase_delta / twoPI;
 800112e:	4b2e      	ldr	r3, [pc, #184]	; (80011e8 <poly_blep+0xc4>)
 8001130:	ed93 7a00 	vldr	s14, [r3]
 8001134:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80011ec <poly_blep+0xc8>
 8001138:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800113c:	edc7 7a03 	vstr	s15, [r7, #12]
    // 0 <= t < 1
    if (t < dt) {
 8001140:	ed97 7a01 	vldr	s14, [r7, #4]
 8001144:	edd7 7a03 	vldr	s15, [r7, #12]
 8001148:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800114c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001150:	d516      	bpl.n	8001180 <poly_blep+0x5c>
        t /= dt;
 8001152:	edd7 6a01 	vldr	s13, [r7, #4]
 8001156:	ed97 7a03 	vldr	s14, [r7, #12]
 800115a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800115e:	edc7 7a01 	vstr	s15, [r7, #4]
        return t+t - t*t - 1.0f;
 8001162:	edd7 7a01 	vldr	s15, [r7, #4]
 8001166:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800116a:	edd7 7a01 	vldr	s15, [r7, #4]
 800116e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001172:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001176:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800117a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800117e:	e02b      	b.n	80011d8 <poly_blep+0xb4>
    }
    // -1 < t < 0
    else if (t > 1.0f - dt) {
 8001180:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001184:	edd7 7a03 	vldr	s15, [r7, #12]
 8001188:	ee77 7a67 	vsub.f32	s15, s14, s15
 800118c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001190:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001198:	dd1c      	ble.n	80011d4 <poly_blep+0xb0>
        t = (t - 1.0f) / dt;
 800119a:	edd7 7a01 	vldr	s15, [r7, #4]
 800119e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011a2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80011a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80011aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ae:	edc7 7a01 	vstr	s15, [r7, #4]
        return t*t + t+t + 1.0f;
 80011b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80011b6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80011ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80011be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80011c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011d2:	e001      	b.n	80011d8 <poly_blep+0xb4>
    }
    // 0 otherwise
    else return 0.0f;
 80011d4:	eddf 7a06 	vldr	s15, [pc, #24]	; 80011f0 <poly_blep+0xcc>
}
 80011d8:	eeb0 0a67 	vmov.f32	s0, s15
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	200000c0 	.word	0x200000c0
 80011ec:	40c90fdb 	.word	0x40c90fdb
	...

080011f8 <render_wave>:

void render_wave(DAC_HandleTypeDef* dac, uint8_t channel, WaveType wave_type) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	70fb      	strb	r3, [r7, #3]
 8001204:	4613      	mov	r3, r2
 8001206:	70bb      	strb	r3, [r7, #2]
	float value = 0.0f;
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
    float t = waveform_phase / twoPI;
 800120e:	4ba6      	ldr	r3, [pc, #664]	; (80014a8 <render_wave+0x2b0>)
 8001210:	ed93 7a00 	vldr	s14, [r3]
 8001214:	eddf 6aa5 	vldr	s13, [pc, #660]	; 80014ac <render_wave+0x2b4>
 8001218:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800121c:	edc7 7a03 	vstr	s15, [r7, #12]

	switch (wave_type) {
 8001220:	78bb      	ldrb	r3, [r7, #2]
 8001222:	2b04      	cmp	r3, #4
 8001224:	f200 80f7 	bhi.w	8001416 <render_wave+0x21e>
 8001228:	a201      	add	r2, pc, #4	; (adr r2, 8001230 <render_wave+0x38>)
 800122a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122e:	bf00      	nop
 8001230:	0800135f 	.word	0x0800135f
 8001234:	08001299 	.word	0x08001299
 8001238:	08001261 	.word	0x08001261
 800123c:	08001245 	.word	0x08001245
 8001240:	080012d1 	.word	0x080012d1
		case Sine_Wave:
			value = fast_sine(waveform_phase - PI);
 8001244:	4b98      	ldr	r3, [pc, #608]	; (80014a8 <render_wave+0x2b0>)
 8001246:	edd3 7a00 	vldr	s15, [r3]
 800124a:	ed9f 7a99 	vldr	s14, [pc, #612]	; 80014b0 <render_wave+0x2b8>
 800124e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001252:	eeb0 0a67 	vmov.f32	s0, s15
 8001256:	f000 f963 	bl	8001520 <fast_sine>
 800125a:	ed87 0a05 	vstr	s0, [r7, #20]
			break;
 800125e:	e0da      	b.n	8001416 <render_wave+0x21e>

		case Sawtooth_Down_Wave:
			value = 1.0f - (2.0f * waveform_phase / twoPI);
 8001260:	4b91      	ldr	r3, [pc, #580]	; (80014a8 <render_wave+0x2b0>)
 8001262:	edd3 7a00 	vldr	s15, [r3]
 8001266:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800126a:	eddf 6a90 	vldr	s13, [pc, #576]	; 80014ac <render_wave+0x2b4>
 800126e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001272:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001276:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127a:	edc7 7a05 	vstr	s15, [r7, #20]
	        value += poly_blep(t);
 800127e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001282:	f7ff ff4f 	bl	8001124 <poly_blep>
 8001286:	eeb0 7a40 	vmov.f32	s14, s0
 800128a:	edd7 7a05 	vldr	s15, [r7, #20]
 800128e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001292:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001296:	e0be      	b.n	8001416 <render_wave+0x21e>

		case Sawtooth_Up_Wave:
			value = -1.0f + (2.0f * waveform_phase / twoPI);
 8001298:	4b83      	ldr	r3, [pc, #524]	; (80014a8 <render_wave+0x2b0>)
 800129a:	edd3 7a00 	vldr	s15, [r3]
 800129e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80012a2:	eddf 6a82 	vldr	s13, [pc, #520]	; 80014ac <render_wave+0x2b4>
 80012a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012b2:	edc7 7a05 	vstr	s15, [r7, #20]
	        value -= poly_blep(t);
 80012b6:	ed97 0a03 	vldr	s0, [r7, #12]
 80012ba:	f7ff ff33 	bl	8001124 <poly_blep>
 80012be:	eeb0 7a40 	vmov.f32	s14, s0
 80012c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80012c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012ca:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 80012ce:	e0a2      	b.n	8001416 <render_wave+0x21e>

		case Pulse_Wave:
			if (waveform_phase <= twoPI * pulse_width) {
 80012d0:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80014ac <render_wave+0x2b4>
 80012d4:	4b77      	ldr	r3, [pc, #476]	; (80014b4 <render_wave+0x2bc>)
 80012d6:	edd3 7a00 	vldr	s15, [r3]
 80012da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012de:	4b72      	ldr	r3, [pc, #456]	; (80014a8 <render_wave+0x2b0>)
 80012e0:	edd3 7a00 	vldr	s15, [r3]
 80012e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ec:	db03      	blt.n	80012f6 <render_wave+0xfe>
				value = 1.0f;
 80012ee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	e001      	b.n	80012fa <render_wave+0x102>
			} else {
				value = -1.0f;
 80012f6:	4b70      	ldr	r3, [pc, #448]	; (80014b8 <render_wave+0x2c0>)
 80012f8:	617b      	str	r3, [r7, #20]
			}

	        value += poly_blep(t);
 80012fa:	ed97 0a03 	vldr	s0, [r7, #12]
 80012fe:	f7ff ff11 	bl	8001124 <poly_blep>
 8001302:	eeb0 7a40 	vmov.f32	s14, s0
 8001306:	edd7 7a05 	vldr	s15, [r7, #20]
 800130a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800130e:	edc7 7a05 	vstr	s15, [r7, #20]
	        value -= poly_blep(fmod(t + 0.5f, 1.0f));
 8001312:	edd7 7a03 	vldr	s15, [r7, #12]
 8001316:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800131a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800131e:	ee17 0a90 	vmov	r0, s15
 8001322:	f7ff f8dd 	bl	80004e0 <__aeabi_f2d>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 80014a0 <render_wave+0x2a8>
 800132e:	ec43 2b10 	vmov	d0, r2, r3
 8001332:	f005 fce3 	bl	8006cfc <fmod>
 8001336:	ec53 2b10 	vmov	r2, r3, d0
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fbd7 	bl	8000af0 <__aeabi_d2f>
 8001342:	4603      	mov	r3, r0
 8001344:	ee00 3a10 	vmov	s0, r3
 8001348:	f7ff feec 	bl	8001124 <poly_blep>
 800134c:	eeb0 7a40 	vmov.f32	s14, s0
 8001350:	edd7 7a05 	vldr	s15, [r7, #20]
 8001354:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001358:	edc7 7a05 	vstr	s15, [r7, #20]
	        break;
 800135c:	e05b      	b.n	8001416 <render_wave+0x21e>

		case Triangle_Wave:
			if (waveform_phase <= PI) {
 800135e:	4b52      	ldr	r3, [pc, #328]	; (80014a8 <render_wave+0x2b0>)
 8001360:	edd3 7a00 	vldr	s15, [r3]
 8001364:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80014b0 <render_wave+0x2b8>
 8001368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800136c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001370:	d803      	bhi.n	800137a <render_wave+0x182>
				value = 1.0f;
 8001372:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	e001      	b.n	800137e <render_wave+0x186>
			} else {
				value = -1.0f;
 800137a:	4b4f      	ldr	r3, [pc, #316]	; (80014b8 <render_wave+0x2c0>)
 800137c:	617b      	str	r3, [r7, #20]
			}

	        value += poly_blep(t);
 800137e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001382:	f7ff fecf 	bl	8001124 <poly_blep>
 8001386:	eeb0 7a40 	vmov.f32	s14, s0
 800138a:	edd7 7a05 	vldr	s15, [r7, #20]
 800138e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001392:	edc7 7a05 	vstr	s15, [r7, #20]
	        value -= poly_blep(fmod(t + 0.5f, 1.0f));
 8001396:	edd7 7a03 	vldr	s15, [r7, #12]
 800139a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800139e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013a2:	ee17 0a90 	vmov	r0, s15
 80013a6:	f7ff f89b 	bl	80004e0 <__aeabi_f2d>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	ed9f 1b3c 	vldr	d1, [pc, #240]	; 80014a0 <render_wave+0x2a8>
 80013b2:	ec43 2b10 	vmov	d0, r2, r3
 80013b6:	f005 fca1 	bl	8006cfc <fmod>
 80013ba:	ec53 2b10 	vmov	r2, r3, d0
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	f7ff fb95 	bl	8000af0 <__aeabi_d2f>
 80013c6:	4603      	mov	r3, r0
 80013c8:	ee00 3a10 	vmov	s0, r3
 80013cc:	f7ff feaa 	bl	8001124 <poly_blep>
 80013d0:	eeb0 7a40 	vmov.f32	s14, s0
 80013d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80013d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013dc:	edc7 7a05 	vstr	s15, [r7, #20]

			// Leaky integrator: y[n] = A * x[n] + (1 - A) * y[n-1]
			value = phase_delta * value + (1.0f - phase_delta) * last_output;
 80013e0:	4b36      	ldr	r3, [pc, #216]	; (80014bc <render_wave+0x2c4>)
 80013e2:	ed93 7a00 	vldr	s14, [r3]
 80013e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80013ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ee:	4b33      	ldr	r3, [pc, #204]	; (80014bc <render_wave+0x2c4>)
 80013f0:	edd3 7a00 	vldr	s15, [r3]
 80013f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80013f8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80013fc:	4b30      	ldr	r3, [pc, #192]	; (80014c0 <render_wave+0x2c8>)
 80013fe:	edd3 7a00 	vldr	s15, [r3]
 8001402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140a:	edc7 7a05 	vstr	s15, [r7, #20]
			last_output = value;
 800140e:	4a2c      	ldr	r2, [pc, #176]	; (80014c0 <render_wave+0x2c8>)
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	6013      	str	r3, [r2, #0]
			break;
 8001414:	bf00      	nop
	}

	// Normalize above zero and then scale to fit the 12-bit ADC space.
	float dac_value = round((value + 1.0f) * ((DAC_OUTPUT_MAX + 1.0f) / 2));
 8001416:	edd7 7a05 	vldr	s15, [r7, #20]
 800141a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800141e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001422:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80014c4 <render_wave+0x2cc>
 8001426:	ee67 7a87 	vmul.f32	s15, s15, s14
 800142a:	ee17 0a90 	vmov	r0, s15
 800142e:	f7ff f857 	bl	80004e0 <__aeabi_f2d>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	ec43 2b10 	vmov	d0, r2, r3
 800143a:	f005 fc19 	bl	8006c70 <round>
 800143e:	ec53 2b10 	vmov	r2, r3, d0
 8001442:	4610      	mov	r0, r2
 8001444:	4619      	mov	r1, r3
 8001446:	f7ff fb53 	bl	8000af0 <__aeabi_d2f>
 800144a:	4603      	mov	r3, r0
 800144c:	613b      	str	r3, [r7, #16]
	if (dac_value < 0) {
 800144e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001452:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145a:	d503      	bpl.n	8001464 <render_wave+0x26c>
		dac_value = 0;
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	e00a      	b.n	800147a <render_wave+0x282>
	} else if (dac_value > DAC_OUTPUT_MAX) {
 8001464:	edd7 7a04 	vldr	s15, [r7, #16]
 8001468:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80014c8 <render_wave+0x2d0>
 800146c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	dd01      	ble.n	800147a <render_wave+0x282>
		dac_value = DAC_OUTPUT_MAX;
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <render_wave+0x2d4>)
 8001478:	613b      	str	r3, [r7, #16]
	}

	HAL_DAC_SetValue(dac, channel, DAC_ALIGN_12B_R, (uint16_t)dac_value);
 800147a:	78f9      	ldrb	r1, [r7, #3]
 800147c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001484:	ee17 3a90 	vmov	r3, s15
 8001488:	b29b      	uxth	r3, r3
 800148a:	2200      	movs	r2, #0
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f002 ffdd 	bl	800444c <HAL_DAC_SetValue>
}
 8001492:	bf00      	nop
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	f3af 8000 	nop.w
 80014a0:	00000000 	.word	0x00000000
 80014a4:	3ff00000 	.word	0x3ff00000
 80014a8:	200000c8 	.word	0x200000c8
 80014ac:	40c90fdb 	.word	0x40c90fdb
 80014b0:	40490fdb 	.word	0x40490fdb
 80014b4:	20000008 	.word	0x20000008
 80014b8:	bf800000 	.word	0xbf800000
 80014bc:	200000c0 	.word	0x200000c0
 80014c0:	200000cc 	.word	0x200000cc
 80014c4:	45000000 	.word	0x45000000
 80014c8:	457ff000 	.word	0x457ff000
 80014cc:	457ff000 	.word	0x457ff000

080014d0 <render_pulse>:

void render_pulse(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, waveform_phase / twoPI < pulse_width);
 80014dc:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <render_pulse+0x44>)
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001518 <render_pulse+0x48>
 80014e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <render_pulse+0x4c>)
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f8:	bf4c      	ite	mi
 80014fa:	2301      	movmi	r3, #1
 80014fc:	2300      	movpl	r3, #0
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	461a      	mov	r2, r3
 8001502:	887b      	ldrh	r3, [r7, #2]
 8001504:	4619      	mov	r1, r3
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f003 faf2 	bl	8004af0 <HAL_GPIO_WritePin>
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200000c8 	.word	0x200000c8
 8001518:	40c90fdb 	.word	0x40c90fdb
 800151c:	20000008 	.word	0x20000008

08001520 <fast_sine>:
};

float pi_major = 3.1415927f;
float pi_minor = -0.00000008742278f;

float fast_sine(float x) {
 8001520:	b480      	push	{r7}
 8001522:	b08b      	sub	sp, #44	; 0x2c
 8001524:	af00      	add	r7, sp, #0
 8001526:	ed87 0a01 	vstr	s0, [r7, #4]
	float x2 = x*x;
 800152a:	edd7 7a01 	vldr	s15, [r7, #4]
 800152e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001532:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float p11 = coeffs[5];
 8001536:	4b36      	ldr	r3, [pc, #216]	; (8001610 <fast_sine+0xf0>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	623b      	str	r3, [r7, #32]
	float p9  = p11*x2 + coeffs[4];
 800153c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001540:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001544:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001548:	4b31      	ldr	r3, [pc, #196]	; (8001610 <fast_sine+0xf0>)
 800154a:	edd3 7a04 	vldr	s15, [r3, #16]
 800154e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001552:	edc7 7a07 	vstr	s15, [r7, #28]
	float p7  = p9*x2  + coeffs[3];
 8001556:	ed97 7a07 	vldr	s14, [r7, #28]
 800155a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800155e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001562:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <fast_sine+0xf0>)
 8001564:	edd3 7a03 	vldr	s15, [r3, #12]
 8001568:	ee77 7a27 	vadd.f32	s15, s14, s15
 800156c:	edc7 7a06 	vstr	s15, [r7, #24]
	float p5  = p7*x2  + coeffs[2];
 8001570:	ed97 7a06 	vldr	s14, [r7, #24]
 8001574:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001578:	ee27 7a27 	vmul.f32	s14, s14, s15
 800157c:	4b24      	ldr	r3, [pc, #144]	; (8001610 <fast_sine+0xf0>)
 800157e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001586:	edc7 7a05 	vstr	s15, [r7, #20]
	float p3  = p5*x2  + coeffs[1];
 800158a:	ed97 7a05 	vldr	s14, [r7, #20]
 800158e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001592:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001596:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <fast_sine+0xf0>)
 8001598:	edd3 7a01 	vldr	s15, [r3, #4]
 800159c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a0:	edc7 7a04 	vstr	s15, [r7, #16]
	float p1  = p3*x2  + coeffs[0];
 80015a4:	ed97 7a04 	vldr	s14, [r7, #16]
 80015a8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80015ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <fast_sine+0xf0>)
 80015b2:	edd3 7a00 	vldr	s15, [r3]
 80015b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ba:	edc7 7a03 	vstr	s15, [r7, #12]
	return (x - pi_major - pi_minor) *
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <fast_sine+0xf4>)
 80015c0:	edd3 7a00 	vldr	s15, [r3]
 80015c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80015c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <fast_sine+0xf8>)
 80015ce:	edd3 7a00 	vldr	s15, [r3]
 80015d2:	ee37 7a67 	vsub.f32	s14, s14, s15
			(x + pi_major + pi_minor) * p1 * x;
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <fast_sine+0xf4>)
 80015d8:	edd3 6a00 	vldr	s13, [r3]
 80015dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80015e0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <fast_sine+0xf8>)
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
	return (x - pi_major - pi_minor) *
 80015ee:	ee27 7a27 	vmul.f32	s14, s14, s15
			(x + pi_major + pi_minor) * p1 * x;
 80015f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80015f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80015fe:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001602:	eeb0 0a67 	vmov.f32	s0, s15
 8001606:	372c      	adds	r7, #44	; 0x2c
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	20000010 	.word	0x20000010
 8001614:	20000028 	.word	0x20000028
 8001618:	2000002c 	.word	0x2000002c

0800161c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001620:	f000 fd35 	bl	800208e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001624:	f000 f838 	bl	8001698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001628:	f000 fa96 	bl	8001b58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800162c:	f000 fa48 	bl	8001ac0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001630:	f000 f89c 	bl	800176c <MX_ADC1_Init>
  MX_DAC1_Init();
 8001634:	f000 f9a0 	bl	8001978 <MX_DAC1_Init>
  MX_TIM16_Init();
 8001638:	f000 fa1c 	bl	8001a74 <MX_TIM16_Init>
  MX_COMP1_Init();
 800163c:	f000 f974 	bl	8001928 <MX_COMP1_Init>
  MX_ADC2_Init();
 8001640:	f000 f90c 	bl	800185c <MX_ADC2_Init>
  MX_DAC3_Init();
 8001644:	f000 f9dc 	bl	8001a00 <MX_DAC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001648:	217f      	movs	r1, #127	; 0x7f
 800164a:	480e      	ldr	r0, [pc, #56]	; (8001684 <main+0x68>)
 800164c:	f002 fa14 	bl	8003a78 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);
 8001650:	480c      	ldr	r0, [pc, #48]	; (8001684 <main+0x68>)
 8001652:	f001 f99f 	bl	8002994 <HAL_ADC_Start_IT>

  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001656:	217f      	movs	r1, #127	; 0x7f
 8001658:	480b      	ldr	r0, [pc, #44]	; (8001688 <main+0x6c>)
 800165a:	f002 fa0d 	bl	8003a78 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc2);
 800165e:	480a      	ldr	r0, [pc, #40]	; (8001688 <main+0x6c>)
 8001660:	f001 f998 	bl	8002994 <HAL_ADC_Start_IT>

  HAL_COMP_Start(&hcomp1);
 8001664:	4809      	ldr	r0, [pc, #36]	; (800168c <main+0x70>)
 8001666:	f002 fcd9 	bl	800401c <HAL_COMP_Start>

  HAL_TIM_Base_Start_IT(&htim16);
 800166a:	4809      	ldr	r0, [pc, #36]	; (8001690 <main+0x74>)
 800166c:	f004 fa88 	bl	8005b80 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001670:	2100      	movs	r1, #0
 8001672:	4808      	ldr	r0, [pc, #32]	; (8001694 <main+0x78>)
 8001674:	f002 fe97 	bl	80043a6 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8001678:	2110      	movs	r1, #16
 800167a:	4806      	ldr	r0, [pc, #24]	; (8001694 <main+0x78>)
 800167c:	f002 fe93 	bl	80043a6 <HAL_DAC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001680:	e7fe      	b.n	8001680 <main+0x64>
 8001682:	bf00      	nop
 8001684:	20000190 	.word	0x20000190
 8001688:	20000100 	.word	0x20000100
 800168c:	2000016c 	.word	0x2000016c
 8001690:	2000028c 	.word	0x2000028c
 8001694:	200000ec 	.word	0x200000ec

08001698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b0a4      	sub	sp, #144	; 0x90
 800169c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016a2:	2238      	movs	r2, #56	; 0x38
 80016a4:	2100      	movs	r1, #0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f005 fada 	bl	8006c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016bc:	463b      	mov	r3, r7
 80016be:	2244      	movs	r2, #68	; 0x44
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f005 facc 	bl	8006c60 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016cc:	f003 fa28 	bl	8004b20 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016d0:	2302      	movs	r3, #2
 80016d2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016da:	2340      	movs	r3, #64	; 0x40
 80016dc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016de:	2302      	movs	r3, #2
 80016e0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016e2:	2302      	movs	r3, #2
 80016e4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80016e6:	2301      	movs	r3, #1
 80016e8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 18;
 80016ea:	2312      	movs	r3, #18
 80016ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f0:	2302      	movs	r3, #2
 80016f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016f6:	2302      	movs	r3, #2
 80016f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016fc:	2302      	movs	r3, #2
 80016fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001702:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001706:	4618      	mov	r0, r3
 8001708:	f003 fabe 	bl	8004c88 <HAL_RCC_OscConfig>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001712:	f000 fa77 	bl	8001c04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001716:	230f      	movs	r3, #15
 8001718:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800171a:	2303      	movs	r3, #3
 800171c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800171e:	2300      	movs	r3, #0
 8001720:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001726:	2300      	movs	r3, #0
 8001728:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800172a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800172e:	2104      	movs	r1, #4
 8001730:	4618      	mov	r0, r3
 8001732:	f003 fdc1 	bl	80052b8 <HAL_RCC_ClockConfig>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800173c:	f000 fa62 	bl	8001c04 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8001740:	f248 0302 	movw	r3, #32770	; 0x8002
 8001744:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800174a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800174e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001750:	463b      	mov	r3, r7
 8001752:	4618      	mov	r0, r3
 8001754:	f003 ffcc 	bl	80056f0 <HAL_RCCEx_PeriphCLKConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800175e:	f000 fa51 	bl	8001c04 <Error_Handler>
  }
}
 8001762:	bf00      	nop
 8001764:	3790      	adds	r7, #144	; 0x90
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	2220      	movs	r2, #32
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f005 fa6b 	bl	8006c60 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800178a:	4b32      	ldr	r3, [pc, #200]	; (8001854 <MX_ADC1_Init+0xe8>)
 800178c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001790:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001792:	4b30      	ldr	r3, [pc, #192]	; (8001854 <MX_ADC1_Init+0xe8>)
 8001794:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001798:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800179a:	4b2e      	ldr	r3, [pc, #184]	; (8001854 <MX_ADC1_Init+0xe8>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017a0:	4b2c      	ldr	r3, [pc, #176]	; (8001854 <MX_ADC1_Init+0xe8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80017a6:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <MX_ADC1_Init+0xe8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017ac:	4b29      	ldr	r3, [pc, #164]	; (8001854 <MX_ADC1_Init+0xe8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017b2:	4b28      	ldr	r3, [pc, #160]	; (8001854 <MX_ADC1_Init+0xe8>)
 80017b4:	2204      	movs	r2, #4
 80017b6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017b8:	4b26      	ldr	r3, [pc, #152]	; (8001854 <MX_ADC1_Init+0xe8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017be:	4b25      	ldr	r3, [pc, #148]	; (8001854 <MX_ADC1_Init+0xe8>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80017c4:	4b23      	ldr	r3, [pc, #140]	; (8001854 <MX_ADC1_Init+0xe8>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017ca:	4b22      	ldr	r3, [pc, #136]	; (8001854 <MX_ADC1_Init+0xe8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <MX_ADC1_Init+0xe8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017d8:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <MX_ADC1_Init+0xe8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017de:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <MX_ADC1_Init+0xe8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017e6:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <MX_ADC1_Init+0xe8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80017ec:	4b19      	ldr	r3, [pc, #100]	; (8001854 <MX_ADC1_Init+0xe8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017f4:	4817      	ldr	r0, [pc, #92]	; (8001854 <MX_ADC1_Init+0xe8>)
 80017f6:	f000 ff43 	bl	8002680 <HAL_ADC_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001800:	f000 fa00 	bl	8001c04 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001804:	2300      	movs	r3, #0
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180c:	4619      	mov	r1, r3
 800180e:	4811      	ldr	r0, [pc, #68]	; (8001854 <MX_ADC1_Init+0xe8>)
 8001810:	f002 f9c6 	bl	8003ba0 <HAL_ADCEx_MultiModeConfigChannel>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800181a:	f000 f9f3 	bl	8001c04 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_ADC1_Init+0xec>)
 8001820:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001822:	2306      	movs	r3, #6
 8001824:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800182a:	237f      	movs	r3, #127	; 0x7f
 800182c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800182e:	2304      	movs	r3, #4
 8001830:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	4619      	mov	r1, r3
 800183a:	4806      	ldr	r0, [pc, #24]	; (8001854 <MX_ADC1_Init+0xe8>)
 800183c:	f001 fc18 	bl	8003070 <HAL_ADC_ConfigChannel>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001846:	f000 f9dd 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	3730      	adds	r7, #48	; 0x30
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000190 	.word	0x20000190
 8001858:	04300002 	.word	0x04300002

0800185c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001862:	463b      	mov	r3, r7
 8001864:	2220      	movs	r2, #32
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f005 f9f9 	bl	8006c60 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800186e:	4b2b      	ldr	r3, [pc, #172]	; (800191c <MX_ADC2_Init+0xc0>)
 8001870:	4a2b      	ldr	r2, [pc, #172]	; (8001920 <MX_ADC2_Init+0xc4>)
 8001872:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001874:	4b29      	ldr	r3, [pc, #164]	; (800191c <MX_ADC2_Init+0xc0>)
 8001876:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 800187a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800187c:	4b27      	ldr	r3, [pc, #156]	; (800191c <MX_ADC2_Init+0xc0>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001882:	4b26      	ldr	r3, [pc, #152]	; (800191c <MX_ADC2_Init+0xc0>)
 8001884:	2200      	movs	r2, #0
 8001886:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001888:	4b24      	ldr	r3, [pc, #144]	; (800191c <MX_ADC2_Init+0xc0>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800188e:	4b23      	ldr	r3, [pc, #140]	; (800191c <MX_ADC2_Init+0xc0>)
 8001890:	2200      	movs	r2, #0
 8001892:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001894:	4b21      	ldr	r3, [pc, #132]	; (800191c <MX_ADC2_Init+0xc0>)
 8001896:	2204      	movs	r2, #4
 8001898:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800189a:	4b20      	ldr	r3, [pc, #128]	; (800191c <MX_ADC2_Init+0xc0>)
 800189c:	2200      	movs	r2, #0
 800189e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80018a0:	4b1e      	ldr	r3, [pc, #120]	; (800191c <MX_ADC2_Init+0xc0>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80018a6:	4b1d      	ldr	r3, [pc, #116]	; (800191c <MX_ADC2_Init+0xc0>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <MX_ADC2_Init+0xc0>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <MX_ADC2_Init+0xc0>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018ba:	4b18      	ldr	r3, [pc, #96]	; (800191c <MX_ADC2_Init+0xc0>)
 80018bc:	2200      	movs	r2, #0
 80018be:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80018c0:	4b16      	ldr	r3, [pc, #88]	; (800191c <MX_ADC2_Init+0xc0>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018c8:	4b14      	ldr	r3, [pc, #80]	; (800191c <MX_ADC2_Init+0xc0>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <MX_ADC2_Init+0xc0>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018d6:	4811      	ldr	r0, [pc, #68]	; (800191c <MX_ADC2_Init+0xc0>)
 80018d8:	f000 fed2 	bl	8002680 <HAL_ADC_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80018e2:	f000 f98f 	bl	8001c04 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <MX_ADC2_Init+0xc8>)
 80018e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018ea:	2306      	movs	r3, #6
 80018ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018f2:	237f      	movs	r3, #127	; 0x7f
 80018f4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018f6:	2304      	movs	r3, #4
 80018f8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018fe:	463b      	mov	r3, r7
 8001900:	4619      	mov	r1, r3
 8001902:	4806      	ldr	r0, [pc, #24]	; (800191c <MX_ADC2_Init+0xc0>)
 8001904:	f001 fbb4 	bl	8003070 <HAL_ADC_ConfigChannel>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800190e:	f000 f979 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	3720      	adds	r7, #32
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000100 	.word	0x20000100
 8001920:	50000100 	.word	0x50000100
 8001924:	10c00010 	.word	0x10c00010

08001928 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <MX_COMP1_Init+0x44>)
 800192e:	4a10      	ldr	r2, [pc, #64]	; (8001970 <MX_COMP1_Init+0x48>)
 8001930:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <MX_COMP1_Init+0x44>)
 8001934:	2200      	movs	r2, #0
 8001936:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_2VREFINT;
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <MX_COMP1_Init+0x44>)
 800193a:	4a0e      	ldr	r2, [pc, #56]	; (8001974 <MX_COMP1_Init+0x4c>)
 800193c:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <MX_COMP1_Init+0x44>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <MX_COMP1_Init+0x44>)
 8001946:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800194a:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800194c:	4b07      	ldr	r3, [pc, #28]	; (800196c <MX_COMP1_Init+0x44>)
 800194e:	2200      	movs	r2, #0
 8001950:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <MX_COMP1_Init+0x44>)
 8001954:	2231      	movs	r2, #49	; 0x31
 8001956:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001958:	4804      	ldr	r0, [pc, #16]	; (800196c <MX_COMP1_Init+0x44>)
 800195a:	f002 fa83 	bl	8003e64 <HAL_COMP_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 8001964:	f000 f94e 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}
 800196c:	2000016c 	.word	0x2000016c
 8001970:	40010200 	.word	0x40010200
 8001974:	00c00010 	.word	0x00c00010

08001978 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08c      	sub	sp, #48	; 0x30
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800197e:	463b      	mov	r3, r7
 8001980:	2230      	movs	r2, #48	; 0x30
 8001982:	2100      	movs	r1, #0
 8001984:	4618      	mov	r0, r3
 8001986:	f005 f96b 	bl	8006c60 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800198a:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <MX_DAC1_Init+0x80>)
 800198c:	4a1b      	ldr	r2, [pc, #108]	; (80019fc <MX_DAC1_Init+0x84>)
 800198e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001990:	4819      	ldr	r0, [pc, #100]	; (80019f8 <MX_DAC1_Init+0x80>)
 8001992:	f002 fce6 	bl	8004362 <HAL_DAC_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800199c:	f000 f932 	bl	8001c04 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80019a0:	2302      	movs	r3, #2
 80019a2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80019bc:	2301      	movs	r3, #1
 80019be:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80019c4:	463b      	mov	r3, r7
 80019c6:	2200      	movs	r2, #0
 80019c8:	4619      	mov	r1, r3
 80019ca:	480b      	ldr	r0, [pc, #44]	; (80019f8 <MX_DAC1_Init+0x80>)
 80019cc:	f002 fd66 	bl	800449c <HAL_DAC_ConfigChannel>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80019d6:	f000 f915 	bl	8001c04 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80019da:	463b      	mov	r3, r7
 80019dc:	2210      	movs	r2, #16
 80019de:	4619      	mov	r1, r3
 80019e0:	4805      	ldr	r0, [pc, #20]	; (80019f8 <MX_DAC1_Init+0x80>)
 80019e2:	f002 fd5b 	bl	800449c <HAL_DAC_ConfigChannel>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 80019ec:	f000 f90a 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	3730      	adds	r7, #48	; 0x30
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200000ec 	.word	0x200000ec
 80019fc:	50000800 	.word	0x50000800

08001a00 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08c      	sub	sp, #48	; 0x30
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001a06:	463b      	mov	r3, r7
 8001a08:	2230      	movs	r2, #48	; 0x30
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f005 f927 	bl	8006c60 <memset>
  /* USER CODE BEGIN DAC3_Init 1 */

  /* USER CODE END DAC3_Init 1 */
  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <MX_DAC3_Init+0x6c>)
 8001a14:	4a16      	ldr	r2, [pc, #88]	; (8001a70 <MX_DAC3_Init+0x70>)
 8001a16:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001a18:	4814      	ldr	r0, [pc, #80]	; (8001a6c <MX_DAC3_Init+0x6c>)
 8001a1a:	f002 fca2 	bl	8004362 <HAL_DAC_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8001a24:	f000 f8ee 	bl	8001c04 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001a40:	2302      	movs	r3, #2
 8001a42:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001a44:	2302      	movs	r3, #2
 8001a46:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001a4c:	463b      	mov	r3, r7
 8001a4e:	2200      	movs	r2, #0
 8001a50:	4619      	mov	r1, r3
 8001a52:	4806      	ldr	r0, [pc, #24]	; (8001a6c <MX_DAC3_Init+0x6c>)
 8001a54:	f002 fd22 	bl	800449c <HAL_DAC_ConfigChannel>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8001a5e:	f000 f8d1 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	3730      	adds	r7, #48	; 0x30
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200000d8 	.word	0x200000d8
 8001a70:	50001000 	.word	0x50001000

08001a74 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <MX_TIM16_Init+0x44>)
 8001a7a:	4a10      	ldr	r2, [pc, #64]	; (8001abc <MX_TIM16_Init+0x48>)
 8001a7c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <MX_TIM16_Init+0x44>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <MX_TIM16_Init+0x44>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2999;
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <MX_TIM16_Init+0x44>)
 8001a8c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001a90:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <MX_TIM16_Init+0x44>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <MX_TIM16_Init+0x44>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <MX_TIM16_Init+0x44>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001aa4:	4804      	ldr	r0, [pc, #16]	; (8001ab8 <MX_TIM16_Init+0x44>)
 8001aa6:	f004 f813 	bl	8005ad0 <HAL_TIM_Base_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001ab0:	f000 f8a8 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	2000028c 	.word	0x2000028c
 8001abc:	40014400 	.word	0x40014400

08001ac0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ac4:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <MX_USART2_UART_Init+0x90>)
 8001ac6:	4a23      	ldr	r2, [pc, #140]	; (8001b54 <MX_USART2_UART_Init+0x94>)
 8001ac8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001aca:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <MX_USART2_UART_Init+0x90>)
 8001acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ad0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <MX_USART2_UART_Init+0x90>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <MX_USART2_UART_Init+0x90>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ade:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <MX_USART2_UART_Init+0x90>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <MX_USART2_UART_Init+0x90>)
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aea:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <MX_USART2_UART_Init+0x90>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af0:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <MX_USART2_UART_Init+0x90>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001af6:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <MX_USART2_UART_Init+0x90>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001afc:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <MX_USART2_UART_Init+0x90>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b02:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <MX_USART2_UART_Init+0x90>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b08:	4811      	ldr	r0, [pc, #68]	; (8001b50 <MX_USART2_UART_Init+0x90>)
 8001b0a:	f004 fb21 	bl	8006150 <HAL_UART_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001b14:	f000 f876 	bl	8001c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b18:	2100      	movs	r1, #0
 8001b1a:	480d      	ldr	r0, [pc, #52]	; (8001b50 <MX_USART2_UART_Init+0x90>)
 8001b1c:	f004 ffac 	bl	8006a78 <HAL_UARTEx_SetTxFifoThreshold>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001b26:	f000 f86d 	bl	8001c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4808      	ldr	r0, [pc, #32]	; (8001b50 <MX_USART2_UART_Init+0x90>)
 8001b2e:	f004 ffe1 	bl	8006af4 <HAL_UARTEx_SetRxFifoThreshold>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001b38:	f000 f864 	bl	8001c04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b3c:	4804      	ldr	r0, [pc, #16]	; (8001b50 <MX_USART2_UART_Init+0x90>)
 8001b3e:	f004 ff62 	bl	8006a06 <HAL_UARTEx_DisableFifoMode>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001b48:	f000 f85c 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	200001fc 	.word	0x200001fc
 8001b54:	40004400 	.word	0x40004400

08001b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]
 8001b6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6e:	4b23      	ldr	r3, [pc, #140]	; (8001bfc <MX_GPIO_Init+0xa4>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b72:	4a22      	ldr	r2, [pc, #136]	; (8001bfc <MX_GPIO_Init+0xa4>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7a:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <MX_GPIO_Init+0xa4>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b86:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <MX_GPIO_Init+0xa4>)
 8001b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8a:	4a1c      	ldr	r2, [pc, #112]	; (8001bfc <MX_GPIO_Init+0xa4>)
 8001b8c:	f043 0302 	orr.w	r3, r3, #2
 8001b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b92:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <MX_GPIO_Init+0xa4>)
 8001b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Square_Osc_GPIO_Port, Square_Osc_Pin, GPIO_PIN_RESET);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2140      	movs	r1, #64	; 0x40
 8001ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba6:	f002 ffa3 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001baa:	2200      	movs	r2, #0
 8001bac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bb0:	4813      	ldr	r0, [pc, #76]	; (8001c00 <MX_GPIO_Init+0xa8>)
 8001bb2:	f002 ff9d 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Square_Osc_Pin */
  GPIO_InitStruct.Pin = Square_Osc_Pin;
 8001bb6:	2340      	movs	r3, #64	; 0x40
 8001bb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Square_Osc_GPIO_Port, &GPIO_InitStruct);
 8001bc6:	f107 030c 	add.w	r3, r7, #12
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd0:	f002 fe0c 	bl	80047ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	4619      	mov	r1, r3
 8001bec:	4804      	ldr	r0, [pc, #16]	; (8001c00 <MX_GPIO_Init+0xa8>)
 8001bee:	f002 fdfd 	bl	80047ec <HAL_GPIO_Init>

}
 8001bf2:	bf00      	nop
 8001bf4:	3720      	adds	r7, #32
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	48000400 	.word	0x48000400

08001c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c08:	b672      	cpsid	i
}
 8001c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <Error_Handler+0x8>
	...

08001c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_MspInit+0x44>)
 8001c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1a:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <HAL_MspInit+0x44>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6613      	str	r3, [r2, #96]	; 0x60
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <HAL_MspInit+0x44>)
 8001c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_MspInit+0x44>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c32:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <HAL_MspInit+0x44>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	6593      	str	r3, [r2, #88]	; 0x58
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_MspInit+0x44>)
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c46:	f003 f80f 	bl	8004c68 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000

08001c58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08c      	sub	sp, #48	; 0x30
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c78:	d136      	bne.n	8001ce8 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c7a:	4b3b      	ldr	r3, [pc, #236]	; (8001d68 <HAL_ADC_MspInit+0x110>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	4a39      	ldr	r2, [pc, #228]	; (8001d68 <HAL_ADC_MspInit+0x110>)
 8001c82:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c84:	4b38      	ldr	r3, [pc, #224]	; (8001d68 <HAL_ADC_MspInit+0x110>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d10b      	bne.n	8001ca4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c8c:	4b37      	ldr	r3, [pc, #220]	; (8001d6c <HAL_ADC_MspInit+0x114>)
 8001c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c90:	4a36      	ldr	r2, [pc, #216]	; (8001d6c <HAL_ADC_MspInit+0x114>)
 8001c92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c98:	4b34      	ldr	r3, [pc, #208]	; (8001d6c <HAL_ADC_MspInit+0x114>)
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca4:	4b31      	ldr	r3, [pc, #196]	; (8001d6c <HAL_ADC_MspInit+0x114>)
 8001ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca8:	4a30      	ldr	r2, [pc, #192]	; (8001d6c <HAL_ADC_MspInit+0x114>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb0:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <HAL_ADC_MspInit+0x114>)
 8001cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = CV_Pin;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CV_GPIO_Port, &GPIO_InitStruct);
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd2:	f002 fd8b 	bl	80047ec <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2101      	movs	r1, #1
 8001cda:	2012      	movs	r0, #18
 8001cdc:	f002 fb0d 	bl	80042fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001ce0:	2012      	movs	r0, #18
 8001ce2:	f002 fb24 	bl	800432e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001ce6:	e03a      	b.n	8001d5e <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a20      	ldr	r2, [pc, #128]	; (8001d70 <HAL_ADC_MspInit+0x118>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d135      	bne.n	8001d5e <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <HAL_ADC_MspInit+0x110>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	4a1b      	ldr	r2, [pc, #108]	; (8001d68 <HAL_ADC_MspInit+0x110>)
 8001cfa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <HAL_ADC_MspInit+0x110>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d10b      	bne.n	8001d1c <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001d04:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <HAL_ADC_MspInit+0x114>)
 8001d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d08:	4a18      	ldr	r2, [pc, #96]	; (8001d6c <HAL_ADC_MspInit+0x114>)
 8001d0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d10:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <HAL_ADC_MspInit+0x114>)
 8001d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1c:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <HAL_ADC_MspInit+0x114>)
 8001d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d20:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <HAL_ADC_MspInit+0x114>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d28:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <HAL_ADC_MspInit+0x114>)
 8001d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Pin;
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8001d40:	f107 031c 	add.w	r3, r7, #28
 8001d44:	4619      	mov	r1, r3
 8001d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d4a:	f002 fd4f 	bl	80047ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2101      	movs	r1, #1
 8001d52:	2012      	movs	r0, #18
 8001d54:	f002 fad1 	bl	80042fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001d58:	2012      	movs	r0, #18
 8001d5a:	f002 fae8 	bl	800432e <HAL_NVIC_EnableIRQ>
}
 8001d5e:	bf00      	nop
 8001d60:	3730      	adds	r7, #48	; 0x30
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200000d0 	.word	0x200000d0
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	50000100 	.word	0x50000100

08001d74 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a13      	ldr	r2, [pc, #76]	; (8001de0 <HAL_COMP_MspInit+0x6c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d120      	bne.n	8001dd8 <HAL_COMP_MspInit+0x64>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <HAL_COMP_MspInit+0x70>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <HAL_COMP_MspInit+0x70>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <HAL_COMP_MspInit+0x70>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PA1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = Sync_Pin;
 8001dae:	2302      	movs	r3, #2
 8001db0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001db2:	2303      	movs	r3, #3
 8001db4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Sync_GPIO_Port, &GPIO_InitStruct);
 8001dba:	f107 030c 	add.w	r3, r7, #12
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc4:	f002 fd12 	bl	80047ec <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2040      	movs	r0, #64	; 0x40
 8001dce:	f002 fa94 	bl	80042fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 8001dd2:	2040      	movs	r0, #64	; 0x40
 8001dd4:	f002 faab 	bl	800432e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8001dd8:	bf00      	nop
 8001dda:	3720      	adds	r7, #32
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40010200 	.word	0x40010200
 8001de4:	40021000 	.word	0x40021000

08001de8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	; 0x28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a1e      	ldr	r2, [pc, #120]	; (8001e80 <HAL_DAC_MspInit+0x98>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d125      	bne.n	8001e56 <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <HAL_DAC_MspInit+0x9c>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0e:	4a1d      	ldr	r2, [pc, #116]	; (8001e84 <HAL_DAC_MspInit+0x9c>)
 8001e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e16:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <HAL_DAC_MspInit+0x9c>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e22:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <HAL_DAC_MspInit+0x9c>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e26:	4a17      	ldr	r2, [pc, #92]	; (8001e84 <HAL_DAC_MspInit+0x9c>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e2e:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <HAL_DAC_MspInit+0x9c>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = Osc__1_Pin|Osc__2_Pin;
 8001e3a:	2330      	movs	r3, #48	; 0x30
 8001e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e50:	f002 fccc 	bl	80047ec <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 8001e54:	e010      	b.n	8001e78 <HAL_DAC_MspInit+0x90>
  else if(hdac->Instance==DAC3)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a0b      	ldr	r2, [pc, #44]	; (8001e88 <HAL_DAC_MspInit+0xa0>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d10b      	bne.n	8001e78 <HAL_DAC_MspInit+0x90>
    __HAL_RCC_DAC3_CLK_ENABLE();
 8001e60:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <HAL_DAC_MspInit+0x9c>)
 8001e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e64:	4a07      	ldr	r2, [pc, #28]	; (8001e84 <HAL_DAC_MspInit+0x9c>)
 8001e66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_DAC_MspInit+0x9c>)
 8001e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]
}
 8001e78:	bf00      	nop
 8001e7a:	3728      	adds	r7, #40	; 0x28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	50000800 	.word	0x50000800
 8001e84:	40021000 	.word	0x40021000
 8001e88:	50001000 	.word	0x50001000

08001e8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0d      	ldr	r2, [pc, #52]	; (8001ed0 <HAL_TIM_Base_MspInit+0x44>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d113      	bne.n	8001ec6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <HAL_TIM_Base_MspInit+0x48>)
 8001ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea2:	4a0c      	ldr	r2, [pc, #48]	; (8001ed4 <HAL_TIM_Base_MspInit+0x48>)
 8001ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea8:	6613      	str	r3, [r2, #96]	; 0x60
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <HAL_TIM_Base_MspInit+0x48>)
 8001eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2100      	movs	r1, #0
 8001eba:	2019      	movs	r0, #25
 8001ebc:	f002 fa1d 	bl	80042fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001ec0:	2019      	movs	r0, #25
 8001ec2:	f002 fa34 	bl	800432e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40014400 	.word	0x40014400
 8001ed4:	40021000 	.word	0x40021000

08001ed8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08a      	sub	sp, #40	; 0x28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a17      	ldr	r2, [pc, #92]	; (8001f54 <HAL_UART_MspInit+0x7c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d128      	bne.n	8001f4c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001efa:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <HAL_UART_MspInit+0x80>)
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efe:	4a16      	ldr	r2, [pc, #88]	; (8001f58 <HAL_UART_MspInit+0x80>)
 8001f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f04:	6593      	str	r3, [r2, #88]	; 0x58
 8001f06:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <HAL_UART_MspInit+0x80>)
 8001f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <HAL_UART_MspInit+0x80>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	4a10      	ldr	r2, [pc, #64]	; (8001f58 <HAL_UART_MspInit+0x80>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <HAL_UART_MspInit+0x80>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001f2a:	230c      	movs	r3, #12
 8001f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f36:	2300      	movs	r3, #0
 8001f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f3a:	2307      	movs	r3, #7
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3e:	f107 0314 	add.w	r3, r7, #20
 8001f42:	4619      	mov	r1, r3
 8001f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f48:	f002 fc50 	bl	80047ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f4c:	bf00      	nop
 8001f4e:	3728      	adds	r7, #40	; 0x28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40004400 	.word	0x40004400
 8001f58:	40021000 	.word	0x40021000

08001f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <NMI_Handler+0x4>

08001f62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f66:	e7fe      	b.n	8001f66 <HardFault_Handler+0x4>

08001f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <MemManage_Handler+0x4>

08001f6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f72:	e7fe      	b.n	8001f72 <BusFault_Handler+0x4>

08001f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <UsageFault_Handler+0x4>

08001f7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa8:	f000 f8c4 	bl	8002134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001fb4:	4803      	ldr	r0, [pc, #12]	; (8001fc4 <ADC1_2_IRQHandler+0x14>)
 8001fb6:	f000 fe2d 	bl	8002c14 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001fba:	4803      	ldr	r0, [pc, #12]	; (8001fc8 <ADC1_2_IRQHandler+0x18>)
 8001fbc:	f000 fe2a 	bl	8002c14 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000190 	.word	0x20000190
 8001fc8:	20000100 	.word	0x20000100

08001fcc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001fd0:	4802      	ldr	r0, [pc, #8]	; (8001fdc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001fd2:	f003 fe3f 	bl	8005c54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	2000028c 	.word	0x2000028c

08001fe0 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8001fe4:	4802      	ldr	r0, [pc, #8]	; (8001ff0 <COMP1_2_3_IRQHandler+0x10>)
 8001fe6:	f002 f861 	bl	80040ac <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	2000016c 	.word	0x2000016c

08001ff4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <SystemInit+0x20>)
 8001ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffe:	4a05      	ldr	r2, [pc, #20]	; (8002014 <SystemInit+0x20>)
 8002000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <HAL_TIM_PeriodElapsedCallback>:
 */

#include "tim.h"
#include "dac.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM16) {
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a04      	ldr	r2, [pc, #16]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d101      	bne.n	800202e <HAL_TIM_PeriodElapsedCallback+0x16>
		render_waves();
 800202a:	f7ff f837 	bl	800109c <render_waves>
	}
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40014400 	.word	0x40014400

0800203c <Reset_Handler>:
 800203c:	480d      	ldr	r0, [pc, #52]	; (8002074 <LoopForever+0x2>)
 800203e:	4685      	mov	sp, r0
 8002040:	480d      	ldr	r0, [pc, #52]	; (8002078 <LoopForever+0x6>)
 8002042:	490e      	ldr	r1, [pc, #56]	; (800207c <LoopForever+0xa>)
 8002044:	4a0e      	ldr	r2, [pc, #56]	; (8002080 <LoopForever+0xe>)
 8002046:	2300      	movs	r3, #0
 8002048:	e002      	b.n	8002050 <LoopCopyDataInit>

0800204a <CopyDataInit>:
 800204a:	58d4      	ldr	r4, [r2, r3]
 800204c:	50c4      	str	r4, [r0, r3]
 800204e:	3304      	adds	r3, #4

08002050 <LoopCopyDataInit>:
 8002050:	18c4      	adds	r4, r0, r3
 8002052:	428c      	cmp	r4, r1
 8002054:	d3f9      	bcc.n	800204a <CopyDataInit>
 8002056:	4a0b      	ldr	r2, [pc, #44]	; (8002084 <LoopForever+0x12>)
 8002058:	4c0b      	ldr	r4, [pc, #44]	; (8002088 <LoopForever+0x16>)
 800205a:	2300      	movs	r3, #0
 800205c:	e001      	b.n	8002062 <LoopFillZerobss>

0800205e <FillZerobss>:
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	3204      	adds	r2, #4

08002062 <LoopFillZerobss>:
 8002062:	42a2      	cmp	r2, r4
 8002064:	d3fb      	bcc.n	800205e <FillZerobss>
 8002066:	f7ff ffc5 	bl	8001ff4 <SystemInit>
 800206a:	f004 fdd5 	bl	8006c18 <__libc_init_array>
 800206e:	f7ff fad5 	bl	800161c <main>

08002072 <LoopForever>:
 8002072:	e7fe      	b.n	8002072 <LoopForever>
 8002074:	20008000 	.word	0x20008000
 8002078:	20000000 	.word	0x20000000
 800207c:	200000a4 	.word	0x200000a4
 8002080:	08007fd0 	.word	0x08007fd0
 8002084:	200000a4 	.word	0x200000a4
 8002088:	200002dc 	.word	0x200002dc

0800208c <COMP4_IRQHandler>:
 800208c:	e7fe      	b.n	800208c <COMP4_IRQHandler>

0800208e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002098:	2003      	movs	r0, #3
 800209a:	f002 f923 	bl	80042e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800209e:	2000      	movs	r0, #0
 80020a0:	f000 f80e 	bl	80020c0 <HAL_InitTick>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	71fb      	strb	r3, [r7, #7]
 80020ae:	e001      	b.n	80020b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020b0:	f7ff fdae 	bl	8001c10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020b4:	79fb      	ldrb	r3, [r7, #7]

}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80020cc:	4b16      	ldr	r3, [pc, #88]	; (8002128 <HAL_InitTick+0x68>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d022      	beq.n	800211a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80020d4:	4b15      	ldr	r3, [pc, #84]	; (800212c <HAL_InitTick+0x6c>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b13      	ldr	r3, [pc, #76]	; (8002128 <HAL_InitTick+0x68>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80020e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e8:	4618      	mov	r0, r3
 80020ea:	f002 f92e 	bl	800434a <HAL_SYSTICK_Config>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10f      	bne.n	8002114 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b0f      	cmp	r3, #15
 80020f8:	d809      	bhi.n	800210e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020fa:	2200      	movs	r2, #0
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002102:	f002 f8fa 	bl	80042fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002106:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <HAL_InitTick+0x70>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	e007      	b.n	800211e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
 8002112:	e004      	b.n	800211e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
 8002118:	e001      	b.n	800211e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800211e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000038 	.word	0x20000038
 800212c:	20000030 	.word	0x20000030
 8002130:	20000034 	.word	0x20000034

08002134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_IncTick+0x1c>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_IncTick+0x20>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4413      	add	r3, r2
 8002142:	4a03      	ldr	r2, [pc, #12]	; (8002150 <HAL_IncTick+0x1c>)
 8002144:	6013      	str	r3, [r2, #0]
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	200002d8 	.word	0x200002d8
 8002154:	20000038 	.word	0x20000038

08002158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return uwTick;
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <HAL_GetTick+0x14>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	200002d8 	.word	0x200002d8

08002170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002178:	f7ff ffee 	bl	8002158 <HAL_GetTick>
 800217c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002188:	d004      	beq.n	8002194 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800218a:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <HAL_Delay+0x40>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4413      	add	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002194:	bf00      	nop
 8002196:	f7ff ffdf 	bl	8002158 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d8f7      	bhi.n	8002196 <HAL_Delay+0x26>
  {
  }
}
 80021a6:	bf00      	nop
 80021a8:	bf00      	nop
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000038 	.word	0x20000038

080021b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	431a      	orrs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	609a      	str	r2, [r3, #8]
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	609a      	str	r2, [r3, #8]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800221c:	b480      	push	{r7}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	3360      	adds	r3, #96	; 0x60
 800222e:	461a      	mov	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <LL_ADC_SetOffset+0x44>)
 800223e:	4013      	ands	r3, r2
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	4313      	orrs	r3, r2
 800224c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002254:	bf00      	nop
 8002256:	371c      	adds	r7, #28
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	03fff000 	.word	0x03fff000

08002264 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3360      	adds	r3, #96	; 0x60
 8002272:	461a      	mov	r2, r3
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002284:	4618      	mov	r0, r3
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002290:	b480      	push	{r7}
 8002292:	b087      	sub	sp, #28
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	3360      	adds	r3, #96	; 0x60
 80022a0:	461a      	mov	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	431a      	orrs	r2, r3
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022ba:	bf00      	nop
 80022bc:	371c      	adds	r7, #28
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b087      	sub	sp, #28
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	3360      	adds	r3, #96	; 0x60
 80022d6:	461a      	mov	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	431a      	orrs	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80022f0:	bf00      	nop
 80022f2:	371c      	adds	r7, #28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	3360      	adds	r3, #96	; 0x60
 800230c:	461a      	mov	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	431a      	orrs	r2, r3
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002326:	bf00      	nop
 8002328:	371c      	adds	r7, #28
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	615a      	str	r2, [r3, #20]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800237e:	b480      	push	{r7}
 8002380:	b087      	sub	sp, #28
 8002382:	af00      	add	r7, sp, #0
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	3330      	adds	r3, #48	; 0x30
 800238e:	461a      	mov	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	0a1b      	lsrs	r3, r3, #8
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	4413      	add	r3, r2
 800239c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	211f      	movs	r1, #31
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	401a      	ands	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	0e9b      	lsrs	r3, r3, #26
 80023b6:	f003 011f 	and.w	r1, r3, #31
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	f003 031f 	and.w	r3, r3, #31
 80023c0:	fa01 f303 	lsl.w	r3, r1, r3
 80023c4:	431a      	orrs	r2, r3
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023ca:	bf00      	nop
 80023cc:	371c      	adds	r7, #28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	3314      	adds	r3, #20
 800240c:	461a      	mov	r2, r3
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	0e5b      	lsrs	r3, r3, #25
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	4413      	add	r3, r2
 800241a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	0d1b      	lsrs	r3, r3, #20
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	2107      	movs	r1, #7
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	401a      	ands	r2, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	0d1b      	lsrs	r3, r3, #20
 8002436:	f003 031f 	and.w	r3, r3, #31
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	fa01 f303 	lsl.w	r3, r1, r3
 8002440:	431a      	orrs	r2, r3
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002446:	bf00      	nop
 8002448:	371c      	adds	r7, #28
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246c:	43db      	mvns	r3, r3
 800246e:	401a      	ands	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f003 0318 	and.w	r3, r3, #24
 8002476:	4908      	ldr	r1, [pc, #32]	; (8002498 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002478:	40d9      	lsrs	r1, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	400b      	ands	r3, r1
 800247e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002482:	431a      	orrs	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800248a:	bf00      	nop
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	0007ffff 	.word	0x0007ffff

0800249c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 031f 	and.w	r3, r3, #31
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80024e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6093      	str	r3, [r2, #8]
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800250c:	d101      	bne.n	8002512 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002530:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002534:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002558:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800255c:	d101      	bne.n	8002562 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002580:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002584:	f043 0201 	orr.w	r2, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025ac:	f043 0202 	orr.w	r2, r3, #2
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <LL_ADC_IsEnabled+0x18>
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <LL_ADC_IsEnabled+0x1a>
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d101      	bne.n	80025fe <LL_ADC_IsDisableOngoing+0x18>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <LL_ADC_IsDisableOngoing+0x1a>
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800261c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002620:	f043 0204 	orr.w	r2, r3, #4
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b04      	cmp	r3, #4
 8002646:	d101      	bne.n	800264c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002648:	2301      	movs	r3, #1
 800264a:	e000      	b.n	800264e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b08      	cmp	r3, #8
 800266c:	d101      	bne.n	8002672 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b089      	sub	sp, #36	; 0x24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800268c:	2300      	movs	r3, #0
 800268e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e16d      	b.n	8002976 <HAL_ADC_Init+0x2f6>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d109      	bne.n	80026bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff fad5 	bl	8001c58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff19 	bl	80024f8 <LL_ADC_IsDeepPowerDownEnabled>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d004      	beq.n	80026d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff feff 	bl	80024d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff ff34 	bl	8002548 <LL_ADC_IsInternalRegulatorEnabled>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d115      	bne.n	8002712 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff ff18 	bl	8002520 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026f0:	4ba3      	ldr	r3, [pc, #652]	; (8002980 <HAL_ADC_Init+0x300>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	099b      	lsrs	r3, r3, #6
 80026f6:	4aa3      	ldr	r2, [pc, #652]	; (8002984 <HAL_ADC_Init+0x304>)
 80026f8:	fba2 2303 	umull	r2, r3, r2, r3
 80026fc:	099b      	lsrs	r3, r3, #6
 80026fe:	3301      	adds	r3, #1
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002704:	e002      	b.n	800270c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	3b01      	subs	r3, #1
 800270a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f9      	bne.n	8002706 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff ff16 	bl	8002548 <LL_ADC_IsInternalRegulatorEnabled>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10d      	bne.n	800273e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002726:	f043 0210 	orr.w	r2, r3, #16
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002732:	f043 0201 	orr.w	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff ff76 	bl	8002634 <LL_ADC_REG_IsConversionOngoing>
 8002748:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	2b00      	cmp	r3, #0
 8002754:	f040 8106 	bne.w	8002964 <HAL_ADC_Init+0x2e4>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	2b00      	cmp	r3, #0
 800275c:	f040 8102 	bne.w	8002964 <HAL_ADC_Init+0x2e4>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002764:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002768:	f043 0202 	orr.w	r2, r3, #2
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff23 	bl	80025c0 <LL_ADC_IsEnabled>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d111      	bne.n	80027a4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002780:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002784:	f7ff ff1c 	bl	80025c0 <LL_ADC_IsEnabled>
 8002788:	4604      	mov	r4, r0
 800278a:	487f      	ldr	r0, [pc, #508]	; (8002988 <HAL_ADC_Init+0x308>)
 800278c:	f7ff ff18 	bl	80025c0 <LL_ADC_IsEnabled>
 8002790:	4603      	mov	r3, r0
 8002792:	4323      	orrs	r3, r4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d105      	bne.n	80027a4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4619      	mov	r1, r3
 800279e:	487b      	ldr	r0, [pc, #492]	; (800298c <HAL_ADC_Init+0x30c>)
 80027a0:	f7ff fd08 	bl	80021b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	7f5b      	ldrb	r3, [r3, #29]
 80027a8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027ae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80027b4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80027ba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027c2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d106      	bne.n	80027e0 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	3b01      	subs	r3, #1
 80027d8:	045b      	lsls	r3, r3, #17
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d009      	beq.n	80027fc <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	4b63      	ldr	r3, [pc, #396]	; (8002990 <HAL_ADC_Init+0x310>)
 8002804:	4013      	ands	r3, r2
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	69b9      	ldr	r1, [r7, #24]
 800280c:	430b      	orrs	r3, r1
 800280e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ff02 	bl	8002634 <LL_ADC_REG_IsConversionOngoing>
 8002830:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff ff0f 	bl	800265a <LL_ADC_INJ_IsConversionOngoing>
 800283c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d16d      	bne.n	8002920 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d16a      	bne.n	8002920 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800284e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002856:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002858:	4313      	orrs	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002866:	f023 0302 	bic.w	r3, r3, #2
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	69b9      	ldr	r1, [r7, #24]
 8002870:	430b      	orrs	r3, r1
 8002872:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d017      	beq.n	80028ac <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	691a      	ldr	r2, [r3, #16]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800288a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002894:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002898:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6911      	ldr	r1, [r2, #16]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	430b      	orrs	r3, r1
 80028a6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80028aa:	e013      	b.n	80028d4 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028ba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028d0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d118      	bne.n	8002910 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80028e8:	f023 0304 	bic.w	r3, r3, #4
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028f4:	4311      	orrs	r1, r2
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80028fa:	4311      	orrs	r1, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002900:	430a      	orrs	r2, r1
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f042 0201 	orr.w	r2, r2, #1
 800290c:	611a      	str	r2, [r3, #16]
 800290e:	e007      	b.n	8002920 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d10c      	bne.n	8002942 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f023 010f 	bic.w	r1, r3, #15
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	1e5a      	subs	r2, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	631a      	str	r2, [r3, #48]	; 0x30
 8002940:	e007      	b.n	8002952 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 020f 	bic.w	r2, r2, #15
 8002950:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002956:	f023 0303 	bic.w	r3, r3, #3
 800295a:	f043 0201 	orr.w	r2, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	65da      	str	r2, [r3, #92]	; 0x5c
 8002962:	e007      	b.n	8002974 <HAL_ADC_Init+0x2f4>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002968:	f043 0210 	orr.w	r2, r3, #16
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002974:	7ffb      	ldrb	r3, [r7, #31]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3724      	adds	r7, #36	; 0x24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd90      	pop	{r4, r7, pc}
 800297e:	bf00      	nop
 8002980:	20000030 	.word	0x20000030
 8002984:	053e2d63 	.word	0x053e2d63
 8002988:	50000100 	.word	0x50000100
 800298c:	50000300 	.word	0x50000300
 8002990:	fff04007 	.word	0xfff04007

08002994 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800299c:	4894      	ldr	r0, [pc, #592]	; (8002bf0 <HAL_ADC_Start_IT+0x25c>)
 800299e:	f7ff fd7d 	bl	800249c <LL_ADC_GetMultimode>
 80029a2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fe43 	bl	8002634 <LL_ADC_REG_IsConversionOngoing>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f040 8114 	bne.w	8002bde <HAL_ADC_Start_IT+0x24a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_ADC_Start_IT+0x30>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e111      	b.n	8002be8 <HAL_ADC_Start_IT+0x254>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 ff3f 	bl	8003850 <ADC_Enable>
 80029d2:	4603      	mov	r3, r0
 80029d4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80029d6:	7dfb      	ldrb	r3, [r7, #23]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f040 80fb 	bne.w	8002bd4 <HAL_ADC_Start_IT+0x240>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029e6:	f023 0301 	bic.w	r3, r3, #1
 80029ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a7f      	ldr	r2, [pc, #508]	; (8002bf4 <HAL_ADC_Start_IT+0x260>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d002      	beq.n	8002a02 <HAL_ADC_Start_IT+0x6e>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	e001      	b.n	8002a06 <HAL_ADC_Start_IT+0x72>
 8002a02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d002      	beq.n	8002a14 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d105      	bne.n	8002a20 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a18:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d006      	beq.n	8002a3a <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a30:	f023 0206 	bic.w	r2, r3, #6
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	661a      	str	r2, [r3, #96]	; 0x60
 8002a38:	e002      	b.n	8002a40 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	221c      	movs	r2, #28
 8002a46:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 021c 	bic.w	r2, r2, #28
 8002a5e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d108      	bne.n	8002a7a <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0208 	orr.w	r2, r2, #8
 8002a76:	605a      	str	r2, [r3, #4]
          break;
 8002a78:	e008      	b.n	8002a8c <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0204 	orr.w	r2, r2, #4
 8002a88:	605a      	str	r2, [r3, #4]
          break;
 8002a8a:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d107      	bne.n	8002aa4 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0210 	orr.w	r2, r2, #16
 8002aa2:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a52      	ldr	r2, [pc, #328]	; (8002bf4 <HAL_ADC_Start_IT+0x260>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d002      	beq.n	8002ab4 <HAL_ADC_Start_IT+0x120>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	e001      	b.n	8002ab8 <HAL_ADC_Start_IT+0x124>
 8002ab4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d008      	beq.n	8002ad2 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	2b05      	cmp	r3, #5
 8002aca:	d002      	beq.n	8002ad2 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	2b09      	cmp	r3, #9
 8002ad0:	d13b      	bne.n	8002b4a <HAL_ADC_Start_IT+0x1b6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d02d      	beq.n	8002b3c <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ae8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d110      	bne.n	8002b1a <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0220 	bic.w	r2, r2, #32
 8002b06:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b16:	605a      	str	r2, [r3, #4]
              break;
 8002b18:	e011      	b.n	8002b3e <HAL_ADC_Start_IT+0x1aa>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b28:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0220 	orr.w	r2, r2, #32
 8002b38:	605a      	str	r2, [r3, #4]
              break;
 8002b3a:	e000      	b.n	8002b3e <HAL_ADC_Start_IT+0x1aa>
          }
        }
 8002b3c:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fd62 	bl	800260c <LL_ADC_REG_StartConversion>
 8002b48:	e04d      	b.n	8002be6 <HAL_ADC_Start_IT+0x252>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a26      	ldr	r2, [pc, #152]	; (8002bf4 <HAL_ADC_Start_IT+0x260>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d002      	beq.n	8002b66 <HAL_ADC_Start_IT+0x1d2>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	e001      	b.n	8002b6a <HAL_ADC_Start_IT+0x1d6>
 8002b66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b6a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d035      	beq.n	8002be4 <HAL_ADC_Start_IT+0x250>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d110      	bne.n	8002bb2 <HAL_ADC_Start_IT+0x21e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0220 	bic.w	r2, r2, #32
 8002b9e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bae:	605a      	str	r2, [r3, #4]
              break;
 8002bb0:	e019      	b.n	8002be6 <HAL_ADC_Start_IT+0x252>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bc0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0220 	orr.w	r2, r2, #32
 8002bd0:	605a      	str	r2, [r3, #4]
              break;
 8002bd2:	e008      	b.n	8002be6 <HAL_ADC_Start_IT+0x252>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002bdc:	e003      	b.n	8002be6 <HAL_ADC_Start_IT+0x252>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bde:	2302      	movs	r3, #2
 8002be0:	75fb      	strb	r3, [r7, #23]
 8002be2:	e000      	b.n	8002be6 <HAL_ADC_Start_IT+0x252>
        }
 8002be4:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8002be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	50000300 	.word	0x50000300
 8002bf4:	50000100 	.word	0x50000100

08002bf8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08a      	sub	sp, #40	; 0x28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c30:	4883      	ldr	r0, [pc, #524]	; (8002e40 <HAL_ADC_IRQHandler+0x22c>)
 8002c32:	f7ff fc33 	bl	800249c <LL_ADC_GetMultimode>
 8002c36:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d017      	beq.n	8002c72 <HAL_ADC_IRQHandler+0x5e>
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d012      	beq.n	8002c72 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c50:	f003 0310 	and.w	r3, r3, #16
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d105      	bne.n	8002c64 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 ff91 	bl	8003b8c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d004      	beq.n	8002c86 <HAL_ADC_IRQHandler+0x72>
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10a      	bne.n	8002c9c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 8085 	beq.w	8002d9c <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d07f      	beq.n	8002d9c <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d105      	bne.n	8002cb4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fb4d 	bl	8002358 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d064      	beq.n	8002d8e <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a5e      	ldr	r2, [pc, #376]	; (8002e44 <HAL_ADC_IRQHandler+0x230>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d002      	beq.n	8002cd4 <HAL_ADC_IRQHandler+0xc0>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	e001      	b.n	8002cd8 <HAL_ADC_IRQHandler+0xc4>
 8002cd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d008      	beq.n	8002cf2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d005      	beq.n	8002cf2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2b05      	cmp	r3, #5
 8002cea:	d002      	beq.n	8002cf2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	2b09      	cmp	r3, #9
 8002cf0:	d104      	bne.n	8002cfc <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	623b      	str	r3, [r7, #32]
 8002cfa:	e00d      	b.n	8002d18 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a50      	ldr	r2, [pc, #320]	; (8002e44 <HAL_ADC_IRQHandler+0x230>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d002      	beq.n	8002d0c <HAL_ADC_IRQHandler+0xf8>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	e001      	b.n	8002d10 <HAL_ADC_IRQHandler+0xfc>
 8002d0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d10:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d135      	bne.n	8002d8e <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d12e      	bne.n	8002d8e <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff fc7d 	bl	8002634 <LL_ADC_REG_IsConversionOngoing>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d11a      	bne.n	8002d76 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 020c 	bic.w	r2, r2, #12
 8002d4e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d112      	bne.n	8002d8e <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6c:	f043 0201 	orr.w	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d74:	e00b      	b.n	8002d8e <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7a:	f043 0210 	orr.w	r2, r3, #16
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d86:	f043 0201 	orr.w	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7fe f87a 	bl	8000e88 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	220c      	movs	r2, #12
 8002d9a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d004      	beq.n	8002db0 <HAL_ADC_IRQHandler+0x19c>
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	f003 0320 	and.w	r3, r3, #32
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10b      	bne.n	8002dc8 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 809e 	beq.w	8002ef8 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 8098 	beq.w	8002ef8 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d105      	bne.n	8002de0 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff faf6 	bl	80023d6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002dea:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff fab1 	bl	8002358 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002df6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a11      	ldr	r2, [pc, #68]	; (8002e44 <HAL_ADC_IRQHandler+0x230>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d002      	beq.n	8002e08 <HAL_ADC_IRQHandler+0x1f4>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	e001      	b.n	8002e0c <HAL_ADC_IRQHandler+0x1f8>
 8002e08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d008      	beq.n	8002e26 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2b06      	cmp	r3, #6
 8002e1e:	d002      	beq.n	8002e26 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	2b07      	cmp	r3, #7
 8002e24:	d104      	bne.n	8002e30 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	623b      	str	r3, [r7, #32]
 8002e2e:	e011      	b.n	8002e54 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a03      	ldr	r2, [pc, #12]	; (8002e44 <HAL_ADC_IRQHandler+0x230>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d006      	beq.n	8002e48 <HAL_ADC_IRQHandler+0x234>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	e005      	b.n	8002e4c <HAL_ADC_IRQHandler+0x238>
 8002e40:	50000300 	.word	0x50000300
 8002e44:	50000100 	.word	0x50000100
 8002e48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e4c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d047      	beq.n	8002eea <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d007      	beq.n	8002e74 <HAL_ADC_IRQHandler+0x260>
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d03f      	beq.n	8002eea <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d13a      	bne.n	8002eea <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7e:	2b40      	cmp	r3, #64	; 0x40
 8002e80:	d133      	bne.n	8002eea <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d12e      	bne.n	8002eea <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fbe2 	bl	800265a <LL_ADC_INJ_IsConversionOngoing>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d11a      	bne.n	8002ed2 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002eaa:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d112      	bne.n	8002eea <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec8:	f043 0201 	orr.w	r2, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ed0:	e00b      	b.n	8002eea <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed6:	f043 0210 	orr.w	r2, r3, #16
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee2:	f043 0201 	orr.w	r2, r3, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fe26 	bl	8003b3c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2260      	movs	r2, #96	; 0x60
 8002ef6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d011      	beq.n	8002f26 <HAL_ADC_IRQHandler+0x312>
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00c      	beq.n	8002f26 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f10:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f895 	bl	8003048 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2280      	movs	r2, #128	; 0x80
 8002f24:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d012      	beq.n	8002f56 <HAL_ADC_IRQHandler+0x342>
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00d      	beq.n	8002f56 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fe0c 	bl	8003b64 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f54:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d012      	beq.n	8002f86 <HAL_ADC_IRQHandler+0x372>
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00d      	beq.n	8002f86 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fdfe 	bl	8003b78 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f84:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d036      	beq.n	8002ffe <HAL_ADC_IRQHandler+0x3ea>
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d031      	beq.n	8002ffe <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d102      	bne.n	8002fa8 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa6:	e014      	b.n	8002fd2 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d008      	beq.n	8002fc0 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002fae:	4825      	ldr	r0, [pc, #148]	; (8003044 <HAL_ADC_IRQHandler+0x430>)
 8002fb0:	f7ff fa82 	bl	80024b8 <LL_ADC_GetMultiDMATransfer>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00b      	beq.n	8002fd2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbe:	e008      	b.n	8002fd2 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d10e      	bne.n	8002ff6 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fdc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe8:	f043 0202 	orr.w	r2, r3, #2
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f833 	bl	800305c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2210      	movs	r2, #16
 8002ffc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003004:	2b00      	cmp	r3, #0
 8003006:	d018      	beq.n	800303a <HAL_ADC_IRQHandler+0x426>
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300e:	2b00      	cmp	r3, #0
 8003010:	d013      	beq.n	800303a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003016:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003022:	f043 0208 	orr.w	r2, r3, #8
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003032:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 fd8b 	bl	8003b50 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800303a:	bf00      	nop
 800303c:	3728      	adds	r7, #40	; 0x28
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	50000300 	.word	0x50000300

08003048 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b0b6      	sub	sp, #216	; 0xd8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003080:	2300      	movs	r3, #0
 8003082:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x22>
 800308e:	2302      	movs	r3, #2
 8003090:	e3c8      	b.n	8003824 <HAL_ADC_ConfigChannel+0x7b4>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fac8 	bl	8002634 <LL_ADC_REG_IsConversionOngoing>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f040 83ad 	bne.w	8003806 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6818      	ldr	r0, [r3, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	6859      	ldr	r1, [r3, #4]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	461a      	mov	r2, r3
 80030ba:	f7ff f960 	bl	800237e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fab6 	bl	8002634 <LL_ADC_REG_IsConversionOngoing>
 80030c8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fac2 	bl	800265a <LL_ADC_INJ_IsConversionOngoing>
 80030d6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f040 81d9 	bne.w	8003496 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f040 81d4 	bne.w	8003496 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030f6:	d10f      	bne.n	8003118 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6818      	ldr	r0, [r3, #0]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2200      	movs	r2, #0
 8003102:	4619      	mov	r1, r3
 8003104:	f7ff f97a 	bl	80023fc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff f90e 	bl	8002332 <LL_ADC_SetSamplingTimeCommonConfig>
 8003116:	e00e      	b.n	8003136 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	6819      	ldr	r1, [r3, #0]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	461a      	mov	r2, r3
 8003126:	f7ff f969 	bl	80023fc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2100      	movs	r1, #0
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff f8fe 	bl	8002332 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	08db      	lsrs	r3, r3, #3
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	2b04      	cmp	r3, #4
 8003156:	d022      	beq.n	800319e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	6919      	ldr	r1, [r3, #16]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003168:	f7ff f858 	bl	800221c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	6919      	ldr	r1, [r3, #16]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	461a      	mov	r2, r3
 800317a:	f7ff f8a4 	bl	80022c6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	6919      	ldr	r1, [r3, #16]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	7f1b      	ldrb	r3, [r3, #28]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d102      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x124>
 800318e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003192:	e000      	b.n	8003196 <HAL_ADC_ConfigChannel+0x126>
 8003194:	2300      	movs	r3, #0
 8003196:	461a      	mov	r2, r3
 8003198:	f7ff f8b0 	bl	80022fc <LL_ADC_SetOffsetSaturation>
 800319c:	e17b      	b.n	8003496 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2100      	movs	r1, #0
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff f85d 	bl	8002264 <LL_ADC_GetOffsetChannel>
 80031aa:	4603      	mov	r3, r0
 80031ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10a      	bne.n	80031ca <HAL_ADC_ConfigChannel+0x15a>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2100      	movs	r1, #0
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff f852 	bl	8002264 <LL_ADC_GetOffsetChannel>
 80031c0:	4603      	mov	r3, r0
 80031c2:	0e9b      	lsrs	r3, r3, #26
 80031c4:	f003 021f 	and.w	r2, r3, #31
 80031c8:	e01e      	b.n	8003208 <HAL_ADC_ConfigChannel+0x198>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2100      	movs	r1, #0
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff f847 	bl	8002264 <LL_ADC_GetOffsetChannel>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80031e0:	fa93 f3a3 	rbit	r3, r3
 80031e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80031ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80031f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80031f8:	2320      	movs	r3, #32
 80031fa:	e004      	b.n	8003206 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80031fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003210:	2b00      	cmp	r3, #0
 8003212:	d105      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x1b0>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	0e9b      	lsrs	r3, r3, #26
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	e018      	b.n	8003252 <HAL_ADC_ConfigChannel+0x1e2>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003228:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800322c:	fa93 f3a3 	rbit	r3, r3
 8003230:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800323c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003244:	2320      	movs	r3, #32
 8003246:	e004      	b.n	8003252 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003248:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800324c:	fab3 f383 	clz	r3, r3
 8003250:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003252:	429a      	cmp	r2, r3
 8003254:	d106      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2200      	movs	r2, #0
 800325c:	2100      	movs	r1, #0
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff f816 	bl	8002290 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2101      	movs	r1, #1
 800326a:	4618      	mov	r0, r3
 800326c:	f7fe fffa 	bl	8002264 <LL_ADC_GetOffsetChannel>
 8003270:	4603      	mov	r3, r0
 8003272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10a      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x220>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2101      	movs	r1, #1
 8003280:	4618      	mov	r0, r3
 8003282:	f7fe ffef 	bl	8002264 <LL_ADC_GetOffsetChannel>
 8003286:	4603      	mov	r3, r0
 8003288:	0e9b      	lsrs	r3, r3, #26
 800328a:	f003 021f 	and.w	r2, r3, #31
 800328e:	e01e      	b.n	80032ce <HAL_ADC_ConfigChannel+0x25e>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2101      	movs	r1, #1
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe ffe4 	bl	8002264 <LL_ADC_GetOffsetChannel>
 800329c:	4603      	mov	r3, r0
 800329e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032a6:	fa93 f3a3 	rbit	r3, r3
 80032aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80032ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80032b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80032be:	2320      	movs	r3, #32
 80032c0:	e004      	b.n	80032cc <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80032c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032c6:	fab3 f383 	clz	r3, r3
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d105      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x276>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	0e9b      	lsrs	r3, r3, #26
 80032e0:	f003 031f 	and.w	r3, r3, #31
 80032e4:	e018      	b.n	8003318 <HAL_ADC_ConfigChannel+0x2a8>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032f2:	fa93 f3a3 	rbit	r3, r3
 80032f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80032fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003302:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800330a:	2320      	movs	r3, #32
 800330c:	e004      	b.n	8003318 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800330e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003312:	fab3 f383 	clz	r3, r3
 8003316:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003318:	429a      	cmp	r2, r3
 800331a:	d106      	bne.n	800332a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2200      	movs	r2, #0
 8003322:	2101      	movs	r1, #1
 8003324:	4618      	mov	r0, r3
 8003326:	f7fe ffb3 	bl	8002290 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2102      	movs	r1, #2
 8003330:	4618      	mov	r0, r3
 8003332:	f7fe ff97 	bl	8002264 <LL_ADC_GetOffsetChannel>
 8003336:	4603      	mov	r3, r0
 8003338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10a      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x2e6>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2102      	movs	r1, #2
 8003346:	4618      	mov	r0, r3
 8003348:	f7fe ff8c 	bl	8002264 <LL_ADC_GetOffsetChannel>
 800334c:	4603      	mov	r3, r0
 800334e:	0e9b      	lsrs	r3, r3, #26
 8003350:	f003 021f 	and.w	r2, r3, #31
 8003354:	e01e      	b.n	8003394 <HAL_ADC_ConfigChannel+0x324>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2102      	movs	r1, #2
 800335c:	4618      	mov	r0, r3
 800335e:	f7fe ff81 	bl	8002264 <LL_ADC_GetOffsetChannel>
 8003362:	4603      	mov	r3, r0
 8003364:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800336c:	fa93 f3a3 	rbit	r3, r3
 8003370:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003374:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003378:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800337c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003384:	2320      	movs	r3, #32
 8003386:	e004      	b.n	8003392 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003388:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800338c:	fab3 f383 	clz	r3, r3
 8003390:	b2db      	uxtb	r3, r3
 8003392:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339c:	2b00      	cmp	r3, #0
 800339e:	d105      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x33c>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	0e9b      	lsrs	r3, r3, #26
 80033a6:	f003 031f 	and.w	r3, r3, #31
 80033aa:	e016      	b.n	80033da <HAL_ADC_ConfigChannel+0x36a>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033b8:	fa93 f3a3 	rbit	r3, r3
 80033bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80033be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80033c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80033cc:	2320      	movs	r3, #32
 80033ce:	e004      	b.n	80033da <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80033d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033d4:	fab3 f383 	clz	r3, r3
 80033d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033da:	429a      	cmp	r2, r3
 80033dc:	d106      	bne.n	80033ec <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2200      	movs	r2, #0
 80033e4:	2102      	movs	r1, #2
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fe ff52 	bl	8002290 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2103      	movs	r1, #3
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe ff36 	bl	8002264 <LL_ADC_GetOffsetChannel>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10a      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x3a8>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2103      	movs	r1, #3
 8003408:	4618      	mov	r0, r3
 800340a:	f7fe ff2b 	bl	8002264 <LL_ADC_GetOffsetChannel>
 800340e:	4603      	mov	r3, r0
 8003410:	0e9b      	lsrs	r3, r3, #26
 8003412:	f003 021f 	and.w	r2, r3, #31
 8003416:	e017      	b.n	8003448 <HAL_ADC_ConfigChannel+0x3d8>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2103      	movs	r1, #3
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe ff20 	bl	8002264 <LL_ADC_GetOffsetChannel>
 8003424:	4603      	mov	r3, r0
 8003426:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800342a:	fa93 f3a3 	rbit	r3, r3
 800342e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003430:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003432:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003434:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800343a:	2320      	movs	r3, #32
 800343c:	e003      	b.n	8003446 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800343e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003440:	fab3 f383 	clz	r3, r3
 8003444:	b2db      	uxtb	r3, r3
 8003446:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003450:	2b00      	cmp	r3, #0
 8003452:	d105      	bne.n	8003460 <HAL_ADC_ConfigChannel+0x3f0>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	0e9b      	lsrs	r3, r3, #26
 800345a:	f003 031f 	and.w	r3, r3, #31
 800345e:	e011      	b.n	8003484 <HAL_ADC_ConfigChannel+0x414>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003468:	fa93 f3a3 	rbit	r3, r3
 800346c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800346e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003470:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003478:	2320      	movs	r3, #32
 800347a:	e003      	b.n	8003484 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800347c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800347e:	fab3 f383 	clz	r3, r3
 8003482:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003484:	429a      	cmp	r2, r3
 8003486:	d106      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2200      	movs	r2, #0
 800348e:	2103      	movs	r1, #3
 8003490:	4618      	mov	r0, r3
 8003492:	f7fe fefd 	bl	8002290 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff f890 	bl	80025c0 <LL_ADC_IsEnabled>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f040 8140 	bne.w	8003728 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	6819      	ldr	r1, [r3, #0]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	461a      	mov	r2, r3
 80034b6:	f7fe ffcd 	bl	8002454 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	4a8f      	ldr	r2, [pc, #572]	; (80036fc <HAL_ADC_ConfigChannel+0x68c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	f040 8131 	bne.w	8003728 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10b      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x47e>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	0e9b      	lsrs	r3, r3, #26
 80034dc:	3301      	adds	r3, #1
 80034de:	f003 031f 	and.w	r3, r3, #31
 80034e2:	2b09      	cmp	r3, #9
 80034e4:	bf94      	ite	ls
 80034e6:	2301      	movls	r3, #1
 80034e8:	2300      	movhi	r3, #0
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	e019      	b.n	8003522 <HAL_ADC_ConfigChannel+0x4b2>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034f6:	fa93 f3a3 	rbit	r3, r3
 80034fa:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80034fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034fe:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003500:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003506:	2320      	movs	r3, #32
 8003508:	e003      	b.n	8003512 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800350a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800350c:	fab3 f383 	clz	r3, r3
 8003510:	b2db      	uxtb	r3, r3
 8003512:	3301      	adds	r3, #1
 8003514:	f003 031f 	and.w	r3, r3, #31
 8003518:	2b09      	cmp	r3, #9
 800351a:	bf94      	ite	ls
 800351c:	2301      	movls	r3, #1
 800351e:	2300      	movhi	r3, #0
 8003520:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003522:	2b00      	cmp	r3, #0
 8003524:	d079      	beq.n	800361a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800352e:	2b00      	cmp	r3, #0
 8003530:	d107      	bne.n	8003542 <HAL_ADC_ConfigChannel+0x4d2>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	0e9b      	lsrs	r3, r3, #26
 8003538:	3301      	adds	r3, #1
 800353a:	069b      	lsls	r3, r3, #26
 800353c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003540:	e015      	b.n	800356e <HAL_ADC_ConfigChannel+0x4fe>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800354a:	fa93 f3a3 	rbit	r3, r3
 800354e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003552:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800355a:	2320      	movs	r3, #32
 800355c:	e003      	b.n	8003566 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800355e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003560:	fab3 f383 	clz	r3, r3
 8003564:	b2db      	uxtb	r3, r3
 8003566:	3301      	adds	r3, #1
 8003568:	069b      	lsls	r3, r3, #26
 800356a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <HAL_ADC_ConfigChannel+0x51e>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	0e9b      	lsrs	r3, r3, #26
 8003580:	3301      	adds	r3, #1
 8003582:	f003 031f 	and.w	r3, r3, #31
 8003586:	2101      	movs	r1, #1
 8003588:	fa01 f303 	lsl.w	r3, r1, r3
 800358c:	e017      	b.n	80035be <HAL_ADC_ConfigChannel+0x54e>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003596:	fa93 f3a3 	rbit	r3, r3
 800359a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800359c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800359e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80035a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80035a6:	2320      	movs	r3, #32
 80035a8:	e003      	b.n	80035b2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80035aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ac:	fab3 f383 	clz	r3, r3
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	3301      	adds	r3, #1
 80035b4:	f003 031f 	and.w	r3, r3, #31
 80035b8:	2101      	movs	r1, #1
 80035ba:	fa01 f303 	lsl.w	r3, r1, r3
 80035be:	ea42 0103 	orr.w	r1, r2, r3
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10a      	bne.n	80035e4 <HAL_ADC_ConfigChannel+0x574>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	0e9b      	lsrs	r3, r3, #26
 80035d4:	3301      	adds	r3, #1
 80035d6:	f003 021f 	and.w	r2, r3, #31
 80035da:	4613      	mov	r3, r2
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	4413      	add	r3, r2
 80035e0:	051b      	lsls	r3, r3, #20
 80035e2:	e018      	b.n	8003616 <HAL_ADC_ConfigChannel+0x5a6>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ec:	fa93 f3a3 	rbit	r3, r3
 80035f0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80035f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80035f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80035fc:	2320      	movs	r3, #32
 80035fe:	e003      	b.n	8003608 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003602:	fab3 f383 	clz	r3, r3
 8003606:	b2db      	uxtb	r3, r3
 8003608:	3301      	adds	r3, #1
 800360a:	f003 021f 	and.w	r2, r3, #31
 800360e:	4613      	mov	r3, r2
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	4413      	add	r3, r2
 8003614:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003616:	430b      	orrs	r3, r1
 8003618:	e081      	b.n	800371e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003622:	2b00      	cmp	r3, #0
 8003624:	d107      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x5c6>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	0e9b      	lsrs	r3, r3, #26
 800362c:	3301      	adds	r3, #1
 800362e:	069b      	lsls	r3, r3, #26
 8003630:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003634:	e015      	b.n	8003662 <HAL_ADC_ConfigChannel+0x5f2>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363e:	fa93 f3a3 	rbit	r3, r3
 8003642:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003646:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800364e:	2320      	movs	r3, #32
 8003650:	e003      	b.n	800365a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	fab3 f383 	clz	r3, r3
 8003658:	b2db      	uxtb	r3, r3
 800365a:	3301      	adds	r3, #1
 800365c:	069b      	lsls	r3, r3, #26
 800365e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800366a:	2b00      	cmp	r3, #0
 800366c:	d109      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x612>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	0e9b      	lsrs	r3, r3, #26
 8003674:	3301      	adds	r3, #1
 8003676:	f003 031f 	and.w	r3, r3, #31
 800367a:	2101      	movs	r1, #1
 800367c:	fa01 f303 	lsl.w	r3, r1, r3
 8003680:	e017      	b.n	80036b2 <HAL_ADC_ConfigChannel+0x642>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	61fb      	str	r3, [r7, #28]
  return result;
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800369a:	2320      	movs	r3, #32
 800369c:	e003      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	fab3 f383 	clz	r3, r3
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	3301      	adds	r3, #1
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	2101      	movs	r1, #1
 80036ae:	fa01 f303 	lsl.w	r3, r1, r3
 80036b2:	ea42 0103 	orr.w	r1, r2, r3
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10d      	bne.n	80036de <HAL_ADC_ConfigChannel+0x66e>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	0e9b      	lsrs	r3, r3, #26
 80036c8:	3301      	adds	r3, #1
 80036ca:	f003 021f 	and.w	r2, r3, #31
 80036ce:	4613      	mov	r3, r2
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	4413      	add	r3, r2
 80036d4:	3b1e      	subs	r3, #30
 80036d6:	051b      	lsls	r3, r3, #20
 80036d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036dc:	e01e      	b.n	800371c <HAL_ADC_ConfigChannel+0x6ac>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	fa93 f3a3 	rbit	r3, r3
 80036ea:	613b      	str	r3, [r7, #16]
  return result;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d104      	bne.n	8003700 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80036f6:	2320      	movs	r3, #32
 80036f8:	e006      	b.n	8003708 <HAL_ADC_ConfigChannel+0x698>
 80036fa:	bf00      	nop
 80036fc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	fab3 f383 	clz	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	3301      	adds	r3, #1
 800370a:	f003 021f 	and.w	r2, r3, #31
 800370e:	4613      	mov	r3, r2
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	4413      	add	r3, r2
 8003714:	3b1e      	subs	r3, #30
 8003716:	051b      	lsls	r3, r3, #20
 8003718:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800371c:	430b      	orrs	r3, r1
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	6892      	ldr	r2, [r2, #8]
 8003722:	4619      	mov	r1, r3
 8003724:	f7fe fe6a 	bl	80023fc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	4b3f      	ldr	r3, [pc, #252]	; (800382c <HAL_ADC_ConfigChannel+0x7bc>)
 800372e:	4013      	ands	r3, r2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d071      	beq.n	8003818 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003734:	483e      	ldr	r0, [pc, #248]	; (8003830 <HAL_ADC_ConfigChannel+0x7c0>)
 8003736:	f7fe fd63 	bl	8002200 <LL_ADC_GetCommonPathInternalCh>
 800373a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a3c      	ldr	r2, [pc, #240]	; (8003834 <HAL_ADC_ConfigChannel+0x7c4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d004      	beq.n	8003752 <HAL_ADC_ConfigChannel+0x6e2>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a3a      	ldr	r2, [pc, #232]	; (8003838 <HAL_ADC_ConfigChannel+0x7c8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d127      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003752:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d121      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003766:	d157      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003768:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800376c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003770:	4619      	mov	r1, r3
 8003772:	482f      	ldr	r0, [pc, #188]	; (8003830 <HAL_ADC_ConfigChannel+0x7c0>)
 8003774:	f7fe fd31 	bl	80021da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003778:	4b30      	ldr	r3, [pc, #192]	; (800383c <HAL_ADC_ConfigChannel+0x7cc>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	099b      	lsrs	r3, r3, #6
 800377e:	4a30      	ldr	r2, [pc, #192]	; (8003840 <HAL_ADC_ConfigChannel+0x7d0>)
 8003780:	fba2 2303 	umull	r2, r3, r2, r3
 8003784:	099b      	lsrs	r3, r3, #6
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	4613      	mov	r3, r2
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	4413      	add	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003792:	e002      	b.n	800379a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	3b01      	subs	r3, #1
 8003798:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f9      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037a0:	e03a      	b.n	8003818 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a27      	ldr	r2, [pc, #156]	; (8003844 <HAL_ADC_ConfigChannel+0x7d4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d113      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x764>
 80037ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10d      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a22      	ldr	r2, [pc, #136]	; (8003848 <HAL_ADC_ConfigChannel+0x7d8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d02a      	beq.n	8003818 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ca:	4619      	mov	r1, r3
 80037cc:	4818      	ldr	r0, [pc, #96]	; (8003830 <HAL_ADC_ConfigChannel+0x7c0>)
 80037ce:	f7fe fd04 	bl	80021da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037d2:	e021      	b.n	8003818 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a1c      	ldr	r2, [pc, #112]	; (800384c <HAL_ADC_ConfigChannel+0x7dc>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d11c      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d116      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a16      	ldr	r2, [pc, #88]	; (8003848 <HAL_ADC_ConfigChannel+0x7d8>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d011      	beq.n	8003818 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037fc:	4619      	mov	r1, r3
 80037fe:	480c      	ldr	r0, [pc, #48]	; (8003830 <HAL_ADC_ConfigChannel+0x7c0>)
 8003800:	f7fe fceb 	bl	80021da <LL_ADC_SetCommonPathInternalCh>
 8003804:	e008      	b.n	8003818 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380a:	f043 0220 	orr.w	r2, r3, #32
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003820:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003824:	4618      	mov	r0, r3
 8003826:	37d8      	adds	r7, #216	; 0xd8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	80080000 	.word	0x80080000
 8003830:	50000300 	.word	0x50000300
 8003834:	c3210000 	.word	0xc3210000
 8003838:	90c00010 	.word	0x90c00010
 800383c:	20000030 	.word	0x20000030
 8003840:	053e2d63 	.word	0x053e2d63
 8003844:	c7520000 	.word	0xc7520000
 8003848:	50000100 	.word	0x50000100
 800384c:	cb840000 	.word	0xcb840000

08003850 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f7fe feaf 	bl	80025c0 <LL_ADC_IsEnabled>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d14d      	bne.n	8003904 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	4b28      	ldr	r3, [pc, #160]	; (8003910 <ADC_Enable+0xc0>)
 8003870:	4013      	ands	r3, r2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00d      	beq.n	8003892 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387a:	f043 0210 	orr.w	r2, r3, #16
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003886:	f043 0201 	orr.w	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e039      	b.n	8003906 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7fe fe6a 	bl	8002570 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800389c:	f7fe fc5c 	bl	8002158 <HAL_GetTick>
 80038a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038a2:	e028      	b.n	80038f6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fe fe89 	bl	80025c0 <LL_ADC_IsEnabled>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d104      	bne.n	80038be <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fe fe59 	bl	8002570 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038be:	f7fe fc4b 	bl	8002158 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d914      	bls.n	80038f6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d00d      	beq.n	80038f6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038de:	f043 0210 	orr.w	r2, r3, #16
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ea:	f043 0201 	orr.w	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e007      	b.n	8003906 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b01      	cmp	r3, #1
 8003902:	d1cf      	bne.n	80038a4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	8000003f 	.word	0x8000003f

08003914 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f7fe fe60 	bl	80025e6 <LL_ADC_IsDisableOngoing>
 8003926:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f7fe fe47 	bl	80025c0 <LL_ADC_IsEnabled>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d047      	beq.n	80039c8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d144      	bne.n	80039c8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 030d 	and.w	r3, r3, #13
 8003948:	2b01      	cmp	r3, #1
 800394a:	d10c      	bne.n	8003966 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f7fe fe21 	bl	8002598 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2203      	movs	r2, #3
 800395c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800395e:	f7fe fbfb 	bl	8002158 <HAL_GetTick>
 8003962:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003964:	e029      	b.n	80039ba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396a:	f043 0210 	orr.w	r2, r3, #16
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003976:	f043 0201 	orr.w	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e023      	b.n	80039ca <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003982:	f7fe fbe9 	bl	8002158 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d914      	bls.n	80039ba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00d      	beq.n	80039ba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a2:	f043 0210 	orr.w	r2, r3, #16
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ae:	f043 0201 	orr.w	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e007      	b.n	80039ca <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1dc      	bne.n	8003982 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <LL_ADC_IsEnabled>:
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <LL_ADC_IsEnabled+0x18>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <LL_ADC_IsEnabled+0x1a>
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <LL_ADC_StartCalibration>:
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003a0a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	609a      	str	r2, [r3, #8]
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <LL_ADC_IsCalibrationOnGoing>:
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a3e:	d101      	bne.n	8003a44 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <LL_ADC_REG_IsConversionOngoing>:
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d101      	bne.n	8003a6a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_ADCEx_Calibration_Start+0x1c>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e04d      	b.n	8003b30 <HAL_ADCEx_Calibration_Start+0xb8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff ff39 	bl	8003914 <ADC_Disable>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d136      	bne.n	8003b1a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ab4:	f023 0302 	bic.w	r3, r3, #2
 8003ab8:	f043 0202 	orr.w	r2, r3, #2
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6839      	ldr	r1, [r7, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff ff96 	bl	80039f8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003acc:	e014      	b.n	8003af8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d90d      	bls.n	8003af8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae0:	f023 0312 	bic.w	r3, r3, #18
 8003ae4:	f043 0210 	orr.w	r2, r3, #16
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e01b      	b.n	8003b30 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff ff94 	bl	8003a2a <LL_ADC_IsCalibrationOnGoing>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e2      	bne.n	8003ace <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0c:	f023 0303 	bic.w	r3, r3, #3
 8003b10:	f043 0201 	orr.w	r2, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b18:	e005      	b.n	8003b26 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1e:	f043 0210 	orr.w	r2, r3, #16
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	0004de01 	.word	0x0004de01

08003b3c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003ba0:	b590      	push	{r4, r7, lr}
 8003ba2:	b0a1      	sub	sp, #132	; 0x84
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e08b      	b.n	8003cd6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003bca:	2300      	movs	r3, #0
 8003bcc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bd6:	d102      	bne.n	8003bde <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003bd8:	4b41      	ldr	r3, [pc, #260]	; (8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003bda:	60bb      	str	r3, [r7, #8]
 8003bdc:	e001      	b.n	8003be2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003bde:	2300      	movs	r3, #0
 8003be0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10b      	bne.n	8003c00 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bec:	f043 0220 	orr.w	r2, r3, #32
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e06a      	b.n	8003cd6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff ff25 	bl	8003a52 <LL_ADC_REG_IsConversionOngoing>
 8003c08:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff ff1f 	bl	8003a52 <LL_ADC_REG_IsConversionOngoing>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d14c      	bne.n	8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d149      	bne.n	8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c20:	4b30      	ldr	r3, [pc, #192]	; (8003ce4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003c22:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d028      	beq.n	8003c7e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	6859      	ldr	r1, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c3e:	035b      	lsls	r3, r3, #13
 8003c40:	430b      	orrs	r3, r1
 8003c42:	431a      	orrs	r2, r3
 8003c44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c46:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c48:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003c4c:	f7ff fec1 	bl	80039d2 <LL_ADC_IsEnabled>
 8003c50:	4604      	mov	r4, r0
 8003c52:	4823      	ldr	r0, [pc, #140]	; (8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003c54:	f7ff febd 	bl	80039d2 <LL_ADC_IsEnabled>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	4323      	orrs	r3, r4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d133      	bne.n	8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c68:	f023 030f 	bic.w	r3, r3, #15
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	6811      	ldr	r1, [r2, #0]
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	6892      	ldr	r2, [r2, #8]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	431a      	orrs	r2, r3
 8003c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c7a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c7c:	e024      	b.n	8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c88:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c8a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003c8e:	f7ff fea0 	bl	80039d2 <LL_ADC_IsEnabled>
 8003c92:	4604      	mov	r4, r0
 8003c94:	4812      	ldr	r0, [pc, #72]	; (8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003c96:	f7ff fe9c 	bl	80039d2 <LL_ADC_IsEnabled>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4323      	orrs	r3, r4
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d112      	bne.n	8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003caa:	f023 030f 	bic.w	r3, r3, #15
 8003cae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003cb0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cb2:	e009      	b.n	8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb8:	f043 0220 	orr.w	r2, r3, #32
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003cc6:	e000      	b.n	8003cca <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cc8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003cd2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3784      	adds	r7, #132	; 0x84
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd90      	pop	{r4, r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	50000100 	.word	0x50000100
 8003ce4:	50000300 	.word	0x50000300

08003ce8 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <LL_EXTI_EnableIT_0_31+0x20>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	4904      	ldr	r1, [pc, #16]	; (8003d08 <LL_EXTI_EnableIT_0_31+0x20>)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	600b      	str	r3, [r1, #0]
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	40010400 	.word	0x40010400

08003d0c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <LL_EXTI_DisableIT_0_31+0x24>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	4904      	ldr	r1, [pc, #16]	; (8003d30 <LL_EXTI_DisableIT_0_31+0x24>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	600b      	str	r3, [r1, #0]
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40010400 	.word	0x40010400

08003d34 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	4904      	ldr	r1, [pc, #16]	; (8003d54 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	604b      	str	r3, [r1, #4]

}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	40010400 	.word	0x40010400

08003d58 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003d60:	4b06      	ldr	r3, [pc, #24]	; (8003d7c <LL_EXTI_DisableEvent_0_31+0x24>)
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	43db      	mvns	r3, r3
 8003d68:	4904      	ldr	r1, [pc, #16]	; (8003d7c <LL_EXTI_DisableEvent_0_31+0x24>)
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	604b      	str	r3, [r1, #4]
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40010400 	.word	0x40010400

08003d80 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003d88:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	4904      	ldr	r1, [pc, #16]	; (8003da0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	608b      	str	r3, [r1, #8]

}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	40010400 	.word	0x40010400

08003da4 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003dac:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	43db      	mvns	r3, r3
 8003db4:	4904      	ldr	r1, [pc, #16]	; (8003dc8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]

}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40010400 	.word	0x40010400

08003dcc <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003dd4:	4b05      	ldr	r3, [pc, #20]	; (8003dec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	4904      	ldr	r1, [pc, #16]	; (8003dec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60cb      	str	r3, [r1, #12]
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	40010400 	.word	0x40010400

08003df0 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003df8:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	4904      	ldr	r1, [pc, #16]	; (8003e14 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	60cb      	str	r3, [r1, #12]
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40010400 	.word	0x40010400

08003e18 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8003e20:	4b07      	ldr	r3, [pc, #28]	; (8003e40 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8003e22:	695a      	ldr	r2, [r3, #20]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4013      	ands	r3, r2
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d101      	bne.n	8003e32 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	40010400 	.word	0x40010400

08003e44 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003e4c:	4a04      	ldr	r2, [pc, #16]	; (8003e60 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6153      	str	r3, [r2, #20]
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40010400 	.word	0x40010400

08003e64 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003e70:	2300      	movs	r3, #0
 8003e72:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d102      	bne.n	8003e80 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	77fb      	strb	r3, [r7, #31]
 8003e7e:	e0bb      	b.n	8003ff8 <HAL_COMP_Init+0x194>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e8e:	d102      	bne.n	8003e96 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	77fb      	strb	r3, [r7, #31]
 8003e94:	e0b0      	b.n	8003ff8 <HAL_COMP_Init+0x194>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	7f5b      	ldrb	r3, [r3, #29]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d108      	bne.n	8003eb2 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7fd ff61 	bl	8001d74 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ebc:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	4b48      	ldr	r3, [pc, #288]	; (8004004 <HAL_COMP_Init+0x1a0>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6812      	ldr	r2, [r2, #0]
 8003eea:	6979      	ldr	r1, [r7, #20]
 8003eec:	430b      	orrs	r3, r1
 8003eee:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d015      	beq.n	8003f2a <HAL_COMP_Init+0xc6>
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d112      	bne.n	8003f2a <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003f04:	4b40      	ldr	r3, [pc, #256]	; (8004008 <HAL_COMP_Init+0x1a4>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	099b      	lsrs	r3, r3, #6
 8003f0a:	4a40      	ldr	r2, [pc, #256]	; (800400c <HAL_COMP_Init+0x1a8>)
 8003f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f10:	099a      	lsrs	r2, r3, #6
 8003f12:	4613      	mov	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003f1c:	e002      	b.n	8003f24 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1f9      	bne.n	8003f1e <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a38      	ldr	r2, [pc, #224]	; (8004010 <HAL_COMP_Init+0x1ac>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d012      	beq.n	8003f5a <HAL_COMP_Init+0xf6>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a36      	ldr	r2, [pc, #216]	; (8004014 <HAL_COMP_Init+0x1b0>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d00a      	beq.n	8003f54 <HAL_COMP_Init+0xf0>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a35      	ldr	r2, [pc, #212]	; (8004018 <HAL_COMP_Init+0x1b4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d102      	bne.n	8003f4e <HAL_COMP_Init+0xea>
 8003f48:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003f4c:	e007      	b.n	8003f5e <HAL_COMP_Init+0xfa>
 8003f4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f52:	e004      	b.n	8003f5e <HAL_COMP_Init+0xfa>
 8003f54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f58:	e001      	b.n	8003f5e <HAL_COMP_Init+0xfa>
 8003f5a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f5e:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d037      	beq.n	8003fdc <HAL_COMP_Init+0x178>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_COMP_Init+0x11c>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003f78:	6938      	ldr	r0, [r7, #16]
 8003f7a:	f7ff ff01 	bl	8003d80 <LL_EXTI_EnableRisingTrig_0_31>
 8003f7e:	e002      	b.n	8003f86 <HAL_COMP_Init+0x122>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003f80:	6938      	ldr	r0, [r7, #16]
 8003f82:	f7ff ff0f 	bl	8003da4 <LL_EXTI_DisableRisingTrig_0_31>
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_COMP_Init+0x136>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003f92:	6938      	ldr	r0, [r7, #16]
 8003f94:	f7ff ff1a 	bl	8003dcc <LL_EXTI_EnableFallingTrig_0_31>
 8003f98:	e002      	b.n	8003fa0 <HAL_COMP_Init+0x13c>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003f9a:	6938      	ldr	r0, [r7, #16]
 8003f9c:	f7ff ff28 	bl	8003df0 <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 8003fa0:	6938      	ldr	r0, [r7, #16]
 8003fa2:	f7ff ff4f 	bl	8003e44 <LL_EXTI_ClearFlag_0_31>
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_COMP_Init+0x156>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 8003fb2:	6938      	ldr	r0, [r7, #16]
 8003fb4:	f7ff febe 	bl	8003d34 <LL_EXTI_EnableEvent_0_31>
 8003fb8:	e002      	b.n	8003fc0 <HAL_COMP_Init+0x15c>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003fba:	6938      	ldr	r0, [r7, #16]
 8003fbc:	f7ff fecc 	bl	8003d58 <LL_EXTI_DisableEvent_0_31>
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <HAL_COMP_Init+0x170>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 8003fcc:	6938      	ldr	r0, [r7, #16]
 8003fce:	f7ff fe8b 	bl	8003ce8 <LL_EXTI_EnableIT_0_31>
 8003fd2:	e009      	b.n	8003fe8 <HAL_COMP_Init+0x184>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 8003fd4:	6938      	ldr	r0, [r7, #16]
 8003fd6:	f7ff fe99 	bl	8003d0c <LL_EXTI_DisableIT_0_31>
 8003fda:	e005      	b.n	8003fe8 <HAL_COMP_Init+0x184>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 8003fdc:	6938      	ldr	r0, [r7, #16]
 8003fde:	f7ff febb 	bl	8003d58 <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 8003fe2:	6938      	ldr	r0, [r7, #16]
 8003fe4:	f7ff fe92 	bl	8003d0c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	7f5b      	ldrb	r3, [r3, #29]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d102      	bne.n	8003ff8 <HAL_COMP_Init+0x194>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8003ff8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3720      	adds	r7, #32
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	ff007e0f 	.word	0xff007e0f
 8004008:	20000030 	.word	0x20000030
 800400c:	053e2d63 	.word	0x053e2d63
 8004010:	40010200 	.word	0x40010200
 8004014:	40010204 	.word	0x40010204
 8004018:	40010208 	.word	0x40010208

0800401c <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8004024:	2300      	movs	r3, #0
 8004026:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004028:	2300      	movs	r3, #0
 800402a:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d102      	bne.n	8004038 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	73fb      	strb	r3, [r7, #15]
 8004036:	e02e      	b.n	8004096 <HAL_COMP_Start+0x7a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004042:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004046:	d102      	bne.n	800404e <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	73fb      	strb	r3, [r7, #15]
 800404c:	e023      	b.n	8004096 <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	7f5b      	ldrb	r3, [r3, #29]
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b01      	cmp	r3, #1
 8004056:	d11c      	bne.n	8004092 <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 800406e:	4b0d      	ldr	r3, [pc, #52]	; (80040a4 <HAL_COMP_Start+0x88>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a0d      	ldr	r2, [pc, #52]	; (80040a8 <HAL_COMP_Start+0x8c>)
 8004074:	fba2 2303 	umull	r2, r3, r2, r3
 8004078:	0cda      	lsrs	r2, r3, #19
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004082:	e002      	b.n	800408a <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	3b01      	subs	r3, #1
 8004088:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1f9      	bne.n	8004084 <HAL_COMP_Start+0x68>
 8004090:	e001      	b.n	8004096 <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004096:	7bfb      	ldrb	r3, [r7, #15]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	20000030 	.word	0x20000030
 80040a8:	431bde83 	.word	0x431bde83

080040ac <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a17      	ldr	r2, [pc, #92]	; (8004118 <HAL_COMP_IRQHandler+0x6c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d012      	beq.n	80040e4 <HAL_COMP_IRQHandler+0x38>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a16      	ldr	r2, [pc, #88]	; (800411c <HAL_COMP_IRQHandler+0x70>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00a      	beq.n	80040de <HAL_COMP_IRQHandler+0x32>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a14      	ldr	r2, [pc, #80]	; (8004120 <HAL_COMP_IRQHandler+0x74>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d102      	bne.n	80040d8 <HAL_COMP_IRQHandler+0x2c>
 80040d2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80040d6:	e007      	b.n	80040e8 <HAL_COMP_IRQHandler+0x3c>
 80040d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80040dc:	e004      	b.n	80040e8 <HAL_COMP_IRQHandler+0x3c>
 80040de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040e2:	e001      	b.n	80040e8 <HAL_COMP_IRQHandler+0x3c>
 80040e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80040e8:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
    {
      tmp_comp_exti_flag_set = 1UL;
    }
  }
#else
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 80040ee:	68b8      	ldr	r0, [r7, #8]
 80040f0:	f7ff fe92 	bl	8003e18 <LL_EXTI_IsActiveFlag_0_31>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_COMP_IRQHandler+0x52>
  {
    tmp_comp_exti_flag_set = 1UL;
 80040fa:	2301      	movs	r3, #1
 80040fc:	60fb      	str	r3, [r7, #12]
  }
#endif

  if(tmp_comp_exti_flag_set != 0UL)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_COMP_IRQHandler+0x64>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 8004104:	68b8      	ldr	r0, [r7, #8]
 8004106:	f7ff fe9d 	bl	8003e44 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7fc ff64 	bl	8000fd8 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8004110:	bf00      	nop
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40010200 	.word	0x40010200
 800411c:	40010204 	.word	0x40010204
 8004120:	40010208 	.word	0x40010208

08004124 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	0f9b      	lsrs	r3, r3, #30
 8004134:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 8004138:	4618      	mov	r0, r3
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004154:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <__NVIC_SetPriorityGrouping+0x44>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004160:	4013      	ands	r3, r2
 8004162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800416c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004176:	4a04      	ldr	r2, [pc, #16]	; (8004188 <__NVIC_SetPriorityGrouping+0x44>)
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	60d3      	str	r3, [r2, #12]
}
 800417c:	bf00      	nop
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	e000ed00 	.word	0xe000ed00

0800418c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004190:	4b04      	ldr	r3, [pc, #16]	; (80041a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	0a1b      	lsrs	r3, r3, #8
 8004196:	f003 0307 	and.w	r3, r3, #7
}
 800419a:	4618      	mov	r0, r3
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	e000ed00 	.word	0xe000ed00

080041a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	db0b      	blt.n	80041d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041ba:	79fb      	ldrb	r3, [r7, #7]
 80041bc:	f003 021f 	and.w	r2, r3, #31
 80041c0:	4907      	ldr	r1, [pc, #28]	; (80041e0 <__NVIC_EnableIRQ+0x38>)
 80041c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	2001      	movs	r0, #1
 80041ca:	fa00 f202 	lsl.w	r2, r0, r2
 80041ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	e000e100 	.word	0xe000e100

080041e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	6039      	str	r1, [r7, #0]
 80041ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	db0a      	blt.n	800420e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	490c      	ldr	r1, [pc, #48]	; (8004230 <__NVIC_SetPriority+0x4c>)
 80041fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004202:	0112      	lsls	r2, r2, #4
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	440b      	add	r3, r1
 8004208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800420c:	e00a      	b.n	8004224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	b2da      	uxtb	r2, r3
 8004212:	4908      	ldr	r1, [pc, #32]	; (8004234 <__NVIC_SetPriority+0x50>)
 8004214:	79fb      	ldrb	r3, [r7, #7]
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	3b04      	subs	r3, #4
 800421c:	0112      	lsls	r2, r2, #4
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	440b      	add	r3, r1
 8004222:	761a      	strb	r2, [r3, #24]
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	e000e100 	.word	0xe000e100
 8004234:	e000ed00 	.word	0xe000ed00

08004238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004238:	b480      	push	{r7}
 800423a:	b089      	sub	sp, #36	; 0x24
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f1c3 0307 	rsb	r3, r3, #7
 8004252:	2b04      	cmp	r3, #4
 8004254:	bf28      	it	cs
 8004256:	2304      	movcs	r3, #4
 8004258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	3304      	adds	r3, #4
 800425e:	2b06      	cmp	r3, #6
 8004260:	d902      	bls.n	8004268 <NVIC_EncodePriority+0x30>
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	3b03      	subs	r3, #3
 8004266:	e000      	b.n	800426a <NVIC_EncodePriority+0x32>
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800426c:	f04f 32ff 	mov.w	r2, #4294967295
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43da      	mvns	r2, r3
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	401a      	ands	r2, r3
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004280:	f04f 31ff 	mov.w	r1, #4294967295
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	fa01 f303 	lsl.w	r3, r1, r3
 800428a:	43d9      	mvns	r1, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004290:	4313      	orrs	r3, r2
         );
}
 8004292:	4618      	mov	r0, r3
 8004294:	3724      	adds	r7, #36	; 0x24
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
	...

080042a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042b0:	d301      	bcc.n	80042b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042b2:	2301      	movs	r3, #1
 80042b4:	e00f      	b.n	80042d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042b6:	4a0a      	ldr	r2, [pc, #40]	; (80042e0 <SysTick_Config+0x40>)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042be:	210f      	movs	r1, #15
 80042c0:	f04f 30ff 	mov.w	r0, #4294967295
 80042c4:	f7ff ff8e 	bl	80041e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <SysTick_Config+0x40>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042ce:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <SysTick_Config+0x40>)
 80042d0:	2207      	movs	r2, #7
 80042d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	e000e010 	.word	0xe000e010

080042e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7ff ff29 	bl	8004144 <__NVIC_SetPriorityGrouping>
}
 80042f2:	bf00      	nop
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b086      	sub	sp, #24
 80042fe:	af00      	add	r7, sp, #0
 8004300:	4603      	mov	r3, r0
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	607a      	str	r2, [r7, #4]
 8004306:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004308:	f7ff ff40 	bl	800418c <__NVIC_GetPriorityGrouping>
 800430c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	6978      	ldr	r0, [r7, #20]
 8004314:	f7ff ff90 	bl	8004238 <NVIC_EncodePriority>
 8004318:	4602      	mov	r2, r0
 800431a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800431e:	4611      	mov	r1, r2
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff ff5f 	bl	80041e4 <__NVIC_SetPriority>
}
 8004326:	bf00      	nop
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b082      	sub	sp, #8
 8004332:	af00      	add	r7, sp, #0
 8004334:	4603      	mov	r3, r0
 8004336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff ff33 	bl	80041a8 <__NVIC_EnableIRQ>
}
 8004342:	bf00      	nop
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b082      	sub	sp, #8
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff ffa4 	bl	80042a0 <SysTick_Config>
 8004358:	4603      	mov	r3, r0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b082      	sub	sp, #8
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e014      	b.n	800439e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	791b      	ldrb	r3, [r3, #4]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d105      	bne.n	800438a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7fd fd2f 	bl	8001de8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2202      	movs	r2, #2
 800438e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b082      	sub	sp, #8
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	795b      	ldrb	r3, [r3, #5]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_DAC_Start+0x16>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e043      	b.n	8004444 <HAL_DAC_Start+0x9e>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2202      	movs	r2, #2
 80043c6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6819      	ldr	r1, [r3, #0]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2201      	movs	r2, #1
 80043d6:	409a      	lsls	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80043e0:	2001      	movs	r0, #1
 80043e2:	f7fd fec5 	bl	8002170 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10f      	bne.n	800440c <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d11d      	bne.n	8004436 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0201 	orr.w	r2, r2, #1
 8004408:	605a      	str	r2, [r3, #4]
 800440a:	e014      	b.n	8004436 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	f003 0310 	and.w	r3, r3, #16
 800441c:	2102      	movs	r1, #2
 800441e:	fa01 f303 	lsl.w	r3, r1, r3
 8004422:	429a      	cmp	r2, r3
 8004424:	d107      	bne.n	8004436 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f042 0202 	orr.w	r2, r2, #2
 8004434:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800445a:	2300      	movs	r3, #0
 800445c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d105      	bne.n	800447c <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4413      	add	r3, r2
 8004476:	3308      	adds	r3, #8
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	e004      	b.n	8004486 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4413      	add	r3, r2
 8004482:	3314      	adds	r3, #20
 8004484:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	461a      	mov	r2, r3
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	371c      	adds	r7, #28
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08a      	sub	sp, #40	; 0x28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	795b      	ldrb	r3, [r3, #5]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_DAC_ConfigChannel+0x18>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e192      	b.n	80047da <HAL_DAC_ConfigChannel+0x33e>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2201      	movs	r2, #1
 80044b8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2202      	movs	r2, #2
 80044be:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d174      	bne.n	80045b2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80044c8:	f7fd fe46 	bl	8002158 <HAL_GetTick>
 80044cc:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d134      	bne.n	800453e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80044d4:	e011      	b.n	80044fa <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80044d6:	f7fd fe3f 	bl	8002158 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d90a      	bls.n	80044fa <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	f043 0208 	orr.w	r2, r3, #8
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2203      	movs	r2, #3
 80044f4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e16f      	b.n	80047da <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e6      	bne.n	80044d6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004508:	2001      	movs	r0, #1
 800450a:	f7fd fe31 	bl	8002170 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004516:	641a      	str	r2, [r3, #64]	; 0x40
 8004518:	e01e      	b.n	8004558 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800451a:	f7fd fe1d 	bl	8002158 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b01      	cmp	r3, #1
 8004526:	d90a      	bls.n	800453e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f043 0208 	orr.w	r2, r3, #8
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2203      	movs	r2, #3
 8004538:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e14d      	b.n	80047da <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004544:	2b00      	cmp	r3, #0
 8004546:	dbe8      	blt.n	800451a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004548:	2001      	movs	r0, #1
 800454a:	f7fd fe11 	bl	8002170 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004556:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f003 0310 	and.w	r3, r3, #16
 8004564:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004568:	fa01 f303 	lsl.w	r3, r1, r3
 800456c:	43db      	mvns	r3, r3
 800456e:	ea02 0103 	and.w	r1, r2, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	409a      	lsls	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	21ff      	movs	r1, #255	; 0xff
 8004594:	fa01 f303 	lsl.w	r3, r1, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	ea02 0103 	and.w	r1, r2, r3
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f003 0310 	and.w	r3, r3, #16
 80045a8:	409a      	lsls	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d11d      	bne.n	80045f6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	221f      	movs	r2, #31
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	43db      	mvns	r3, r3
 80045d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d2:	4013      	ands	r3, r2
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f003 0310 	and.w	r3, r3, #16
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ea:	4313      	orrs	r3, r2
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	2207      	movs	r2, #7
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	43db      	mvns	r3, r3
 800460c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460e:	4013      	ands	r3, r2
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d102      	bne.n	8004620 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800461a:	2300      	movs	r3, #0
 800461c:	623b      	str	r3, [r7, #32]
 800461e:	e00f      	b.n	8004640 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	2b02      	cmp	r3, #2
 8004626:	d102      	bne.n	800462e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004628:	2301      	movs	r3, #1
 800462a:	623b      	str	r3, [r7, #32]
 800462c:	e008      	b.n	8004640 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004636:	2301      	movs	r3, #1
 8004638:	623b      	str	r3, [r7, #32]
 800463a:	e001      	b.n	8004640 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800463c:	2300      	movs	r3, #0
 800463e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	6a3a      	ldr	r2, [r7, #32]
 800464c:	4313      	orrs	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f003 0310 	and.w	r3, r3, #16
 8004656:	f44f 7280 	mov.w	r2, #256	; 0x100
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	43db      	mvns	r3, r3
 8004660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004662:	4013      	ands	r3, r2
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	791b      	ldrb	r3, [r3, #4]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d102      	bne.n	8004674 <HAL_DAC_ConfigChannel+0x1d8>
 800466e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004672:	e000      	b.n	8004676 <HAL_DAC_ConfigChannel+0x1da>
 8004674:	2300      	movs	r3, #0
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4313      	orrs	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f003 0310 	and.w	r3, r3, #16
 8004682:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	43db      	mvns	r3, r3
 800468c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800468e:	4013      	ands	r3, r2
 8004690:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	795b      	ldrb	r3, [r3, #5]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d102      	bne.n	80046a0 <HAL_DAC_ConfigChannel+0x204>
 800469a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800469e:	e000      	b.n	80046a2 <HAL_DAC_ConfigChannel+0x206>
 80046a0:	2300      	movs	r3, #0
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d114      	bne.n	80046e2 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80046b8:	f000 ff9c 	bl	80055f4 <HAL_RCC_GetHCLKFreq>
 80046bc:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	4a48      	ldr	r2, [pc, #288]	; (80047e4 <HAL_DAC_ConfigChannel+0x348>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d904      	bls.n	80046d0 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24
 80046ce:	e00f      	b.n	80046f0 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	4a45      	ldr	r2, [pc, #276]	; (80047e8 <HAL_DAC_ConfigChannel+0x34c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d90a      	bls.n	80046ee <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
 80046e0:	e006      	b.n	80046f0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e8:	4313      	orrs	r3, r2
 80046ea:	627b      	str	r3, [r7, #36]	; 0x24
 80046ec:	e000      	b.n	80046f0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80046ee:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f003 0310 	and.w	r3, r3, #16
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046fe:	4313      	orrs	r3, r2
 8004700:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004708:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6819      	ldr	r1, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f003 0310 	and.w	r3, r3, #16
 8004716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43da      	mvns	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	400a      	ands	r2, r1
 8004726:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f003 0310 	and.w	r3, r3, #16
 8004736:	f640 72fe 	movw	r2, #4094	; 0xffe
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	43db      	mvns	r3, r3
 8004740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004742:	4013      	ands	r3, r2
 8004744:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f003 0310 	and.w	r3, r3, #16
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800475a:	4313      	orrs	r3, r2
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004764:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6819      	ldr	r1, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f003 0310 	and.w	r3, r3, #16
 8004772:	22c0      	movs	r2, #192	; 0xc0
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	43da      	mvns	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	400a      	ands	r2, r1
 8004780:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	089b      	lsrs	r3, r3, #2
 8004788:	f003 030f 	and.w	r3, r3, #15
 800478c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	089b      	lsrs	r3, r3, #2
 8004794:	021b      	lsls	r3, r3, #8
 8004796:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	4313      	orrs	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f003 0310 	and.w	r3, r3, #16
 80047ac:	f640 710f 	movw	r1, #3855	; 0xf0f
 80047b0:	fa01 f303 	lsl.w	r3, r1, r3
 80047b4:	43db      	mvns	r3, r3
 80047b6:	ea02 0103 	and.w	r1, r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f003 0310 	and.w	r3, r3, #16
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	409a      	lsls	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2201      	movs	r2, #1
 80047d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3728      	adds	r7, #40	; 0x28
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	09896800 	.word	0x09896800
 80047e8:	04c4b400 	.word	0x04c4b400

080047ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047fa:	e15a      	b.n	8004ab2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	2101      	movs	r1, #1
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	fa01 f303 	lsl.w	r3, r1, r3
 8004808:	4013      	ands	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 814c 	beq.w	8004aac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d00b      	beq.n	8004834 <HAL_GPIO_Init+0x48>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	2b02      	cmp	r3, #2
 8004822:	d007      	beq.n	8004834 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004828:	2b11      	cmp	r3, #17
 800482a:	d003      	beq.n	8004834 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b12      	cmp	r3, #18
 8004832:	d130      	bne.n	8004896 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	2203      	movs	r2, #3
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	43db      	mvns	r3, r3
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4013      	ands	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800486a:	2201      	movs	r2, #1
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	43db      	mvns	r3, r3
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4013      	ands	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	091b      	lsrs	r3, r3, #4
 8004880:	f003 0201 	and.w	r2, r3, #1
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	4313      	orrs	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	2203      	movs	r2, #3
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43db      	mvns	r3, r3
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4013      	ands	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4313      	orrs	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d003      	beq.n	80048d6 <HAL_GPIO_Init+0xea>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	2b12      	cmp	r3, #18
 80048d4:	d123      	bne.n	800491e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	08da      	lsrs	r2, r3, #3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3208      	adds	r2, #8
 80048de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	220f      	movs	r2, #15
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	43db      	mvns	r3, r3
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4013      	ands	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	08da      	lsrs	r2, r3, #3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3208      	adds	r2, #8
 8004918:	6939      	ldr	r1, [r7, #16]
 800491a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	2203      	movs	r2, #3
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	43db      	mvns	r3, r3
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	4013      	ands	r3, r2
 8004934:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f003 0203 	and.w	r2, r3, #3
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 80a6 	beq.w	8004aac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004960:	4b5b      	ldr	r3, [pc, #364]	; (8004ad0 <HAL_GPIO_Init+0x2e4>)
 8004962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004964:	4a5a      	ldr	r2, [pc, #360]	; (8004ad0 <HAL_GPIO_Init+0x2e4>)
 8004966:	f043 0301 	orr.w	r3, r3, #1
 800496a:	6613      	str	r3, [r2, #96]	; 0x60
 800496c:	4b58      	ldr	r3, [pc, #352]	; (8004ad0 <HAL_GPIO_Init+0x2e4>)
 800496e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	60bb      	str	r3, [r7, #8]
 8004976:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004978:	4a56      	ldr	r2, [pc, #344]	; (8004ad4 <HAL_GPIO_Init+0x2e8>)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	089b      	lsrs	r3, r3, #2
 800497e:	3302      	adds	r3, #2
 8004980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004984:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f003 0303 	and.w	r3, r3, #3
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	220f      	movs	r2, #15
 8004990:	fa02 f303 	lsl.w	r3, r2, r3
 8004994:	43db      	mvns	r3, r3
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4013      	ands	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049a2:	d01f      	beq.n	80049e4 <HAL_GPIO_Init+0x1f8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a4c      	ldr	r2, [pc, #304]	; (8004ad8 <HAL_GPIO_Init+0x2ec>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d019      	beq.n	80049e0 <HAL_GPIO_Init+0x1f4>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a4b      	ldr	r2, [pc, #300]	; (8004adc <HAL_GPIO_Init+0x2f0>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d013      	beq.n	80049dc <HAL_GPIO_Init+0x1f0>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a4a      	ldr	r2, [pc, #296]	; (8004ae0 <HAL_GPIO_Init+0x2f4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00d      	beq.n	80049d8 <HAL_GPIO_Init+0x1ec>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a49      	ldr	r2, [pc, #292]	; (8004ae4 <HAL_GPIO_Init+0x2f8>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d007      	beq.n	80049d4 <HAL_GPIO_Init+0x1e8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a48      	ldr	r2, [pc, #288]	; (8004ae8 <HAL_GPIO_Init+0x2fc>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d101      	bne.n	80049d0 <HAL_GPIO_Init+0x1e4>
 80049cc:	2305      	movs	r3, #5
 80049ce:	e00a      	b.n	80049e6 <HAL_GPIO_Init+0x1fa>
 80049d0:	2306      	movs	r3, #6
 80049d2:	e008      	b.n	80049e6 <HAL_GPIO_Init+0x1fa>
 80049d4:	2304      	movs	r3, #4
 80049d6:	e006      	b.n	80049e6 <HAL_GPIO_Init+0x1fa>
 80049d8:	2303      	movs	r3, #3
 80049da:	e004      	b.n	80049e6 <HAL_GPIO_Init+0x1fa>
 80049dc:	2302      	movs	r3, #2
 80049de:	e002      	b.n	80049e6 <HAL_GPIO_Init+0x1fa>
 80049e0:	2301      	movs	r3, #1
 80049e2:	e000      	b.n	80049e6 <HAL_GPIO_Init+0x1fa>
 80049e4:	2300      	movs	r3, #0
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	f002 0203 	and.w	r2, r2, #3
 80049ec:	0092      	lsls	r2, r2, #2
 80049ee:	4093      	lsls	r3, r2
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049f6:	4937      	ldr	r1, [pc, #220]	; (8004ad4 <HAL_GPIO_Init+0x2e8>)
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	089b      	lsrs	r3, r3, #2
 80049fc:	3302      	adds	r3, #2
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a04:	4b39      	ldr	r3, [pc, #228]	; (8004aec <HAL_GPIO_Init+0x300>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	4013      	ands	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a28:	4a30      	ldr	r2, [pc, #192]	; (8004aec <HAL_GPIO_Init+0x300>)
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004a2e:	4b2f      	ldr	r3, [pc, #188]	; (8004aec <HAL_GPIO_Init+0x300>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	43db      	mvns	r3, r3
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a52:	4a26      	ldr	r2, [pc, #152]	; (8004aec <HAL_GPIO_Init+0x300>)
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a58:	4b24      	ldr	r3, [pc, #144]	; (8004aec <HAL_GPIO_Init+0x300>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	43db      	mvns	r3, r3
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4013      	ands	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a7c:	4a1b      	ldr	r2, [pc, #108]	; (8004aec <HAL_GPIO_Init+0x300>)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a82:	4b1a      	ldr	r3, [pc, #104]	; (8004aec <HAL_GPIO_Init+0x300>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	43db      	mvns	r3, r3
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004aa6:	4a11      	ldr	r2, [pc, #68]	; (8004aec <HAL_GPIO_Init+0x300>)
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f47f ae9d 	bne.w	80047fc <HAL_GPIO_Init+0x10>
  }
}
 8004ac2:	bf00      	nop
 8004ac4:	bf00      	nop
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	40010000 	.word	0x40010000
 8004ad8:	48000400 	.word	0x48000400
 8004adc:	48000800 	.word	0x48000800
 8004ae0:	48000c00 	.word	0x48000c00
 8004ae4:	48001000 	.word	0x48001000
 8004ae8:	48001400 	.word	0x48001400
 8004aec:	40010400 	.word	0x40010400

08004af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	807b      	strh	r3, [r7, #2]
 8004afc:	4613      	mov	r3, r2
 8004afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b00:	787b      	ldrb	r3, [r7, #1]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b06:	887a      	ldrh	r2, [r7, #2]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b0c:	e002      	b.n	8004b14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b0e:	887a      	ldrh	r2, [r7, #2]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d141      	bne.n	8004bb2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b2e:	4b4b      	ldr	r3, [pc, #300]	; (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b3a:	d131      	bne.n	8004ba0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b3c:	4b47      	ldr	r3, [pc, #284]	; (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b42:	4a46      	ldr	r2, [pc, #280]	; (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b4c:	4b43      	ldr	r3, [pc, #268]	; (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b54:	4a41      	ldr	r2, [pc, #260]	; (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b5c:	4b40      	ldr	r3, [pc, #256]	; (8004c60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2232      	movs	r2, #50	; 0x32
 8004b62:	fb02 f303 	mul.w	r3, r2, r3
 8004b66:	4a3f      	ldr	r2, [pc, #252]	; (8004c64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b68:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6c:	0c9b      	lsrs	r3, r3, #18
 8004b6e:	3301      	adds	r3, #1
 8004b70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b72:	e002      	b.n	8004b7a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b7a:	4b38      	ldr	r3, [pc, #224]	; (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b86:	d102      	bne.n	8004b8e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f2      	bne.n	8004b74 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b8e:	4b33      	ldr	r3, [pc, #204]	; (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b9a:	d158      	bne.n	8004c4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e057      	b.n	8004c50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ba0:	4b2e      	ldr	r3, [pc, #184]	; (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ba6:	4a2d      	ldr	r2, [pc, #180]	; (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004bb0:	e04d      	b.n	8004c4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bb8:	d141      	bne.n	8004c3e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bba:	4b28      	ldr	r3, [pc, #160]	; (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc6:	d131      	bne.n	8004c2c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bc8:	4b24      	ldr	r3, [pc, #144]	; (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bce:	4a23      	ldr	r2, [pc, #140]	; (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bd8:	4b20      	ldr	r3, [pc, #128]	; (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004be0:	4a1e      	ldr	r2, [pc, #120]	; (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004be6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004be8:	4b1d      	ldr	r3, [pc, #116]	; (8004c60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2232      	movs	r2, #50	; 0x32
 8004bee:	fb02 f303 	mul.w	r3, r2, r3
 8004bf2:	4a1c      	ldr	r2, [pc, #112]	; (8004c64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf8:	0c9b      	lsrs	r3, r3, #18
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bfe:	e002      	b.n	8004c06 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c06:	4b15      	ldr	r3, [pc, #84]	; (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c12:	d102      	bne.n	8004c1a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f2      	bne.n	8004c00 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c1a:	4b10      	ldr	r3, [pc, #64]	; (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c26:	d112      	bne.n	8004c4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e011      	b.n	8004c50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c2c:	4b0b      	ldr	r3, [pc, #44]	; (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c32:	4a0a      	ldr	r2, [pc, #40]	; (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c3c:	e007      	b.n	8004c4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c3e:	4b07      	ldr	r3, [pc, #28]	; (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c46:	4a05      	ldr	r2, [pc, #20]	; (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c4c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	40007000 	.word	0x40007000
 8004c60:	20000030 	.word	0x20000030
 8004c64:	431bde83 	.word	0x431bde83

08004c68 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004c6c:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	4a04      	ldr	r2, [pc, #16]	; (8004c84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c76:	6093      	str	r3, [r2, #8]
}
 8004c78:	bf00      	nop
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	40007000 	.word	0x40007000

08004c88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e308      	b.n	80052ac <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d075      	beq.n	8004d92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ca6:	4ba3      	ldr	r3, [pc, #652]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 030c 	and.w	r3, r3, #12
 8004cae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cb0:	4ba0      	ldr	r3, [pc, #640]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0303 	and.w	r3, r3, #3
 8004cb8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	2b0c      	cmp	r3, #12
 8004cbe:	d102      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x3e>
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d002      	beq.n	8004ccc <HAL_RCC_OscConfig+0x44>
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d10b      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ccc:	4b99      	ldr	r3, [pc, #612]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d05b      	beq.n	8004d90 <HAL_RCC_OscConfig+0x108>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d157      	bne.n	8004d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e2e3      	b.n	80052ac <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cec:	d106      	bne.n	8004cfc <HAL_RCC_OscConfig+0x74>
 8004cee:	4b91      	ldr	r3, [pc, #580]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a90      	ldr	r2, [pc, #576]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	e01d      	b.n	8004d38 <HAL_RCC_OscConfig+0xb0>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCC_OscConfig+0x98>
 8004d06:	4b8b      	ldr	r3, [pc, #556]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a8a      	ldr	r2, [pc, #552]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	4b88      	ldr	r3, [pc, #544]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a87      	ldr	r2, [pc, #540]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	e00b      	b.n	8004d38 <HAL_RCC_OscConfig+0xb0>
 8004d20:	4b84      	ldr	r3, [pc, #528]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a83      	ldr	r2, [pc, #524]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	4b81      	ldr	r3, [pc, #516]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a80      	ldr	r2, [pc, #512]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d013      	beq.n	8004d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fd fa0a 	bl	8002158 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d48:	f7fd fa06 	bl	8002158 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b64      	cmp	r3, #100	; 0x64
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e2a8      	b.n	80052ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d5a:	4b76      	ldr	r3, [pc, #472]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCC_OscConfig+0xc0>
 8004d66:	e014      	b.n	8004d92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7fd f9f6 	bl	8002158 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d70:	f7fd f9f2 	bl	8002158 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b64      	cmp	r3, #100	; 0x64
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e294      	b.n	80052ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d82:	4b6c      	ldr	r3, [pc, #432]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f0      	bne.n	8004d70 <HAL_RCC_OscConfig+0xe8>
 8004d8e:	e000      	b.n	8004d92 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d075      	beq.n	8004e8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d9e:	4b65      	ldr	r3, [pc, #404]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004da8:	4b62      	ldr	r3, [pc, #392]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f003 0303 	and.w	r3, r3, #3
 8004db0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	2b0c      	cmp	r3, #12
 8004db6:	d102      	bne.n	8004dbe <HAL_RCC_OscConfig+0x136>
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d002      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x13c>
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d11f      	bne.n	8004e04 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dc4:	4b5b      	ldr	r3, [pc, #364]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d005      	beq.n	8004ddc <HAL_RCC_OscConfig+0x154>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e267      	b.n	80052ac <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ddc:	4b55      	ldr	r3, [pc, #340]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	061b      	lsls	r3, r3, #24
 8004dea:	4952      	ldr	r1, [pc, #328]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004df0:	4b51      	ldr	r3, [pc, #324]	; (8004f38 <HAL_RCC_OscConfig+0x2b0>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7fd f963 	bl	80020c0 <HAL_InitTick>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d043      	beq.n	8004e88 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e253      	b.n	80052ac <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d023      	beq.n	8004e54 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e0c:	4b49      	ldr	r3, [pc, #292]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a48      	ldr	r2, [pc, #288]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e18:	f7fd f99e 	bl	8002158 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e20:	f7fd f99a 	bl	8002158 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e23c      	b.n	80052ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e32:	4b40      	ldr	r3, [pc, #256]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0f0      	beq.n	8004e20 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e3e:	4b3d      	ldr	r3, [pc, #244]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	061b      	lsls	r3, r3, #24
 8004e4c:	4939      	ldr	r1, [pc, #228]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	604b      	str	r3, [r1, #4]
 8004e52:	e01a      	b.n	8004e8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e54:	4b37      	ldr	r3, [pc, #220]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a36      	ldr	r2, [pc, #216]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004e5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e60:	f7fd f97a 	bl	8002158 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e68:	f7fd f976 	bl	8002158 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e218      	b.n	80052ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e7a:	4b2e      	ldr	r3, [pc, #184]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1f0      	bne.n	8004e68 <HAL_RCC_OscConfig+0x1e0>
 8004e86:	e000      	b.n	8004e8a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0308 	and.w	r3, r3, #8
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d03c      	beq.n	8004f10 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d01c      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e9e:	4b25      	ldr	r3, [pc, #148]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ea4:	4a23      	ldr	r2, [pc, #140]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004ea6:	f043 0301 	orr.w	r3, r3, #1
 8004eaa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eae:	f7fd f953 	bl	8002158 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eb6:	f7fd f94f 	bl	8002158 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e1f1      	b.n	80052ac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ec8:	4b1a      	ldr	r3, [pc, #104]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0ef      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x22e>
 8004ed6:	e01b      	b.n	8004f10 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ed8:	4b16      	ldr	r3, [pc, #88]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ede:	4a15      	ldr	r2, [pc, #84]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004ee0:	f023 0301 	bic.w	r3, r3, #1
 8004ee4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee8:	f7fd f936 	bl	8002158 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ef0:	f7fd f932 	bl	8002158 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e1d4      	b.n	80052ac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f02:	4b0c      	ldr	r3, [pc, #48]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1ef      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 80ab 	beq.w	8005074 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f22:	4b04      	ldr	r3, [pc, #16]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d106      	bne.n	8004f3c <HAL_RCC_OscConfig+0x2b4>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e005      	b.n	8004f3e <HAL_RCC_OscConfig+0x2b6>
 8004f32:	bf00      	nop
 8004f34:	40021000 	.word	0x40021000
 8004f38:	20000034 	.word	0x20000034
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00d      	beq.n	8004f5e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f42:	4baf      	ldr	r3, [pc, #700]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 8004f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f46:	4aae      	ldr	r2, [pc, #696]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 8004f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f4c:	6593      	str	r3, [r2, #88]	; 0x58
 8004f4e:	4bac      	ldr	r3, [pc, #688]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 8004f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f5e:	4ba9      	ldr	r3, [pc, #676]	; (8005204 <HAL_RCC_OscConfig+0x57c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d118      	bne.n	8004f9c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f6a:	4ba6      	ldr	r3, [pc, #664]	; (8005204 <HAL_RCC_OscConfig+0x57c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4aa5      	ldr	r2, [pc, #660]	; (8005204 <HAL_RCC_OscConfig+0x57c>)
 8004f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f76:	f7fd f8ef 	bl	8002158 <HAL_GetTick>
 8004f7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f7c:	e008      	b.n	8004f90 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f7e:	f7fd f8eb 	bl	8002158 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e18d      	b.n	80052ac <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f90:	4b9c      	ldr	r3, [pc, #624]	; (8005204 <HAL_RCC_OscConfig+0x57c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d0f0      	beq.n	8004f7e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d108      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x32e>
 8004fa4:	4b96      	ldr	r3, [pc, #600]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004faa:	4a95      	ldr	r2, [pc, #596]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 8004fac:	f043 0301 	orr.w	r3, r3, #1
 8004fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fb4:	e024      	b.n	8005000 <HAL_RCC_OscConfig+0x378>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	2b05      	cmp	r3, #5
 8004fbc:	d110      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x358>
 8004fbe:	4b90      	ldr	r3, [pc, #576]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 8004fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc4:	4a8e      	ldr	r2, [pc, #568]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 8004fc6:	f043 0304 	orr.w	r3, r3, #4
 8004fca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fce:	4b8c      	ldr	r3, [pc, #560]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd4:	4a8a      	ldr	r2, [pc, #552]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 8004fd6:	f043 0301 	orr.w	r3, r3, #1
 8004fda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fde:	e00f      	b.n	8005000 <HAL_RCC_OscConfig+0x378>
 8004fe0:	4b87      	ldr	r3, [pc, #540]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 8004fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe6:	4a86      	ldr	r2, [pc, #536]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 8004fe8:	f023 0301 	bic.w	r3, r3, #1
 8004fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ff0:	4b83      	ldr	r3, [pc, #524]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 8004ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff6:	4a82      	ldr	r2, [pc, #520]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 8004ff8:	f023 0304 	bic.w	r3, r3, #4
 8004ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d016      	beq.n	8005036 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005008:	f7fd f8a6 	bl	8002158 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800500e:	e00a      	b.n	8005026 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005010:	f7fd f8a2 	bl	8002158 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	f241 3288 	movw	r2, #5000	; 0x1388
 800501e:	4293      	cmp	r3, r2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e142      	b.n	80052ac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005026:	4b76      	ldr	r3, [pc, #472]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 8005028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0ed      	beq.n	8005010 <HAL_RCC_OscConfig+0x388>
 8005034:	e015      	b.n	8005062 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005036:	f7fd f88f 	bl	8002158 <HAL_GetTick>
 800503a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800503c:	e00a      	b.n	8005054 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800503e:	f7fd f88b 	bl	8002158 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	f241 3288 	movw	r2, #5000	; 0x1388
 800504c:	4293      	cmp	r3, r2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e12b      	b.n	80052ac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005054:	4b6a      	ldr	r3, [pc, #424]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 8005056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1ed      	bne.n	800503e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005062:	7ffb      	ldrb	r3, [r7, #31]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d105      	bne.n	8005074 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005068:	4b65      	ldr	r3, [pc, #404]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 800506a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506c:	4a64      	ldr	r2, [pc, #400]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 800506e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005072:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b00      	cmp	r3, #0
 800507e:	d03c      	beq.n	80050fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d01c      	beq.n	80050c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005088:	4b5d      	ldr	r3, [pc, #372]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 800508a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800508e:	4a5c      	ldr	r2, [pc, #368]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 8005090:	f043 0301 	orr.w	r3, r3, #1
 8005094:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005098:	f7fd f85e 	bl	8002158 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050a0:	f7fd f85a 	bl	8002158 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e0fc      	b.n	80052ac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050b2:	4b53      	ldr	r3, [pc, #332]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 80050b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0ef      	beq.n	80050a0 <HAL_RCC_OscConfig+0x418>
 80050c0:	e01b      	b.n	80050fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050c2:	4b4f      	ldr	r3, [pc, #316]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 80050c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050c8:	4a4d      	ldr	r2, [pc, #308]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 80050ca:	f023 0301 	bic.w	r3, r3, #1
 80050ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d2:	f7fd f841 	bl	8002158 <HAL_GetTick>
 80050d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050d8:	e008      	b.n	80050ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050da:	f7fd f83d 	bl	8002158 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d901      	bls.n	80050ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e0df      	b.n	80052ac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050ec:	4b44      	ldr	r3, [pc, #272]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 80050ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1ef      	bne.n	80050da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 80d3 	beq.w	80052aa <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005104:	4b3e      	ldr	r3, [pc, #248]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f003 030c 	and.w	r3, r3, #12
 800510c:	2b0c      	cmp	r3, #12
 800510e:	f000 808d 	beq.w	800522c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	2b02      	cmp	r3, #2
 8005118:	d15a      	bne.n	80051d0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800511a:	4b39      	ldr	r3, [pc, #228]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a38      	ldr	r2, [pc, #224]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 8005120:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005126:	f7fd f817 	bl	8002158 <HAL_GetTick>
 800512a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800512c:	e008      	b.n	8005140 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800512e:	f7fd f813 	bl	8002158 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b02      	cmp	r3, #2
 800513a:	d901      	bls.n	8005140 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e0b5      	b.n	80052ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005140:	4b2f      	ldr	r3, [pc, #188]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1f0      	bne.n	800512e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800514c:	4b2c      	ldr	r3, [pc, #176]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	4b2d      	ldr	r3, [pc, #180]	; (8005208 <HAL_RCC_OscConfig+0x580>)
 8005152:	4013      	ands	r3, r2
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6a11      	ldr	r1, [r2, #32]
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800515c:	3a01      	subs	r2, #1
 800515e:	0112      	lsls	r2, r2, #4
 8005160:	4311      	orrs	r1, r2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005166:	0212      	lsls	r2, r2, #8
 8005168:	4311      	orrs	r1, r2
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800516e:	0852      	lsrs	r2, r2, #1
 8005170:	3a01      	subs	r2, #1
 8005172:	0552      	lsls	r2, r2, #21
 8005174:	4311      	orrs	r1, r2
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800517a:	0852      	lsrs	r2, r2, #1
 800517c:	3a01      	subs	r2, #1
 800517e:	0652      	lsls	r2, r2, #25
 8005180:	4311      	orrs	r1, r2
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005186:	06d2      	lsls	r2, r2, #27
 8005188:	430a      	orrs	r2, r1
 800518a:	491d      	ldr	r1, [pc, #116]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 800518c:	4313      	orrs	r3, r2
 800518e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005190:	4b1b      	ldr	r3, [pc, #108]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a1a      	ldr	r2, [pc, #104]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 8005196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800519a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800519c:	4b18      	ldr	r3, [pc, #96]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	4a17      	ldr	r2, [pc, #92]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 80051a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a8:	f7fc ffd6 	bl	8002158 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b0:	f7fc ffd2 	bl	8002158 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e074      	b.n	80052ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051c2:	4b0f      	ldr	r3, [pc, #60]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0f0      	beq.n	80051b0 <HAL_RCC_OscConfig+0x528>
 80051ce:	e06c      	b.n	80052aa <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d0:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a0a      	ldr	r2, [pc, #40]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 80051d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051da:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80051dc:	4b08      	ldr	r3, [pc, #32]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	4a07      	ldr	r2, [pc, #28]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 80051e2:	f023 0303 	bic.w	r3, r3, #3
 80051e6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80051e8:	4b05      	ldr	r3, [pc, #20]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	4a04      	ldr	r2, [pc, #16]	; (8005200 <HAL_RCC_OscConfig+0x578>)
 80051ee:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80051f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f8:	f7fc ffae 	bl	8002158 <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051fe:	e00e      	b.n	800521e <HAL_RCC_OscConfig+0x596>
 8005200:	40021000 	.word	0x40021000
 8005204:	40007000 	.word	0x40007000
 8005208:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800520c:	f7fc ffa4 	bl	8002158 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e046      	b.n	80052ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800521e:	4b25      	ldr	r3, [pc, #148]	; (80052b4 <HAL_RCC_OscConfig+0x62c>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1f0      	bne.n	800520c <HAL_RCC_OscConfig+0x584>
 800522a:	e03e      	b.n	80052aa <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d101      	bne.n	8005238 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e039      	b.n	80052ac <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005238:	4b1e      	ldr	r3, [pc, #120]	; (80052b4 <HAL_RCC_OscConfig+0x62c>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f003 0203 	and.w	r2, r3, #3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	429a      	cmp	r2, r3
 800524a:	d12c      	bne.n	80052a6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	3b01      	subs	r3, #1
 8005258:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800525a:	429a      	cmp	r2, r3
 800525c:	d123      	bne.n	80052a6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005268:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800526a:	429a      	cmp	r2, r3
 800526c:	d11b      	bne.n	80052a6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005278:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800527a:	429a      	cmp	r2, r3
 800527c:	d113      	bne.n	80052a6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005288:	085b      	lsrs	r3, r3, #1
 800528a:	3b01      	subs	r3, #1
 800528c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800528e:	429a      	cmp	r2, r3
 8005290:	d109      	bne.n	80052a6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529c:	085b      	lsrs	r3, r3, #1
 800529e:	3b01      	subs	r3, #1
 80052a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d001      	beq.n	80052aa <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3720      	adds	r7, #32
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40021000 	.word	0x40021000

080052b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80052c2:	2300      	movs	r3, #0
 80052c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e11e      	b.n	800550e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052d0:	4b91      	ldr	r3, [pc, #580]	; (8005518 <HAL_RCC_ClockConfig+0x260>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 030f 	and.w	r3, r3, #15
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d910      	bls.n	8005300 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052de:	4b8e      	ldr	r3, [pc, #568]	; (8005518 <HAL_RCC_ClockConfig+0x260>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f023 020f 	bic.w	r2, r3, #15
 80052e6:	498c      	ldr	r1, [pc, #560]	; (8005518 <HAL_RCC_ClockConfig+0x260>)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ee:	4b8a      	ldr	r3, [pc, #552]	; (8005518 <HAL_RCC_ClockConfig+0x260>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d001      	beq.n	8005300 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e106      	b.n	800550e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d073      	beq.n	80053f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2b03      	cmp	r3, #3
 8005312:	d129      	bne.n	8005368 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005314:	4b81      	ldr	r3, [pc, #516]	; (800551c <HAL_RCC_ClockConfig+0x264>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e0f4      	b.n	800550e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005324:	f000 f99e 	bl	8005664 <RCC_GetSysClockFreqFromPLLSource>
 8005328:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	4a7c      	ldr	r2, [pc, #496]	; (8005520 <HAL_RCC_ClockConfig+0x268>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d93f      	bls.n	80053b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005332:	4b7a      	ldr	r3, [pc, #488]	; (800551c <HAL_RCC_ClockConfig+0x264>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d009      	beq.n	8005352 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005346:	2b00      	cmp	r3, #0
 8005348:	d033      	beq.n	80053b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800534e:	2b00      	cmp	r3, #0
 8005350:	d12f      	bne.n	80053b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005352:	4b72      	ldr	r3, [pc, #456]	; (800551c <HAL_RCC_ClockConfig+0x264>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800535a:	4a70      	ldr	r2, [pc, #448]	; (800551c <HAL_RCC_ClockConfig+0x264>)
 800535c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005360:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005362:	2380      	movs	r3, #128	; 0x80
 8005364:	617b      	str	r3, [r7, #20]
 8005366:	e024      	b.n	80053b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2b02      	cmp	r3, #2
 800536e:	d107      	bne.n	8005380 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005370:	4b6a      	ldr	r3, [pc, #424]	; (800551c <HAL_RCC_ClockConfig+0x264>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d109      	bne.n	8005390 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e0c6      	b.n	800550e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005380:	4b66      	ldr	r3, [pc, #408]	; (800551c <HAL_RCC_ClockConfig+0x264>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e0be      	b.n	800550e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005390:	f000 f8ce 	bl	8005530 <HAL_RCC_GetSysClockFreq>
 8005394:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	4a61      	ldr	r2, [pc, #388]	; (8005520 <HAL_RCC_ClockConfig+0x268>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d909      	bls.n	80053b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800539e:	4b5f      	ldr	r3, [pc, #380]	; (800551c <HAL_RCC_ClockConfig+0x264>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053a6:	4a5d      	ldr	r2, [pc, #372]	; (800551c <HAL_RCC_ClockConfig+0x264>)
 80053a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80053ae:	2380      	movs	r3, #128	; 0x80
 80053b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053b2:	4b5a      	ldr	r3, [pc, #360]	; (800551c <HAL_RCC_ClockConfig+0x264>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f023 0203 	bic.w	r2, r3, #3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	4957      	ldr	r1, [pc, #348]	; (800551c <HAL_RCC_ClockConfig+0x264>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053c4:	f7fc fec8 	bl	8002158 <HAL_GetTick>
 80053c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ca:	e00a      	b.n	80053e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053cc:	f7fc fec4 	bl	8002158 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053da:	4293      	cmp	r3, r2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e095      	b.n	800550e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e2:	4b4e      	ldr	r3, [pc, #312]	; (800551c <HAL_RCC_ClockConfig+0x264>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 020c 	and.w	r2, r3, #12
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d1eb      	bne.n	80053cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d023      	beq.n	8005448 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	2b00      	cmp	r3, #0
 800540a:	d005      	beq.n	8005418 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800540c:	4b43      	ldr	r3, [pc, #268]	; (800551c <HAL_RCC_ClockConfig+0x264>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	4a42      	ldr	r2, [pc, #264]	; (800551c <HAL_RCC_ClockConfig+0x264>)
 8005412:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005416:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0308 	and.w	r3, r3, #8
 8005420:	2b00      	cmp	r3, #0
 8005422:	d007      	beq.n	8005434 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005424:	4b3d      	ldr	r3, [pc, #244]	; (800551c <HAL_RCC_ClockConfig+0x264>)
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800542c:	4a3b      	ldr	r2, [pc, #236]	; (800551c <HAL_RCC_ClockConfig+0x264>)
 800542e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005432:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005434:	4b39      	ldr	r3, [pc, #228]	; (800551c <HAL_RCC_ClockConfig+0x264>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	4936      	ldr	r1, [pc, #216]	; (800551c <HAL_RCC_ClockConfig+0x264>)
 8005442:	4313      	orrs	r3, r2
 8005444:	608b      	str	r3, [r1, #8]
 8005446:	e008      	b.n	800545a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2b80      	cmp	r3, #128	; 0x80
 800544c:	d105      	bne.n	800545a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800544e:	4b33      	ldr	r3, [pc, #204]	; (800551c <HAL_RCC_ClockConfig+0x264>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	4a32      	ldr	r2, [pc, #200]	; (800551c <HAL_RCC_ClockConfig+0x264>)
 8005454:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005458:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800545a:	4b2f      	ldr	r3, [pc, #188]	; (8005518 <HAL_RCC_ClockConfig+0x260>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	429a      	cmp	r2, r3
 8005466:	d21d      	bcs.n	80054a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005468:	4b2b      	ldr	r3, [pc, #172]	; (8005518 <HAL_RCC_ClockConfig+0x260>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f023 020f 	bic.w	r2, r3, #15
 8005470:	4929      	ldr	r1, [pc, #164]	; (8005518 <HAL_RCC_ClockConfig+0x260>)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	4313      	orrs	r3, r2
 8005476:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005478:	f7fc fe6e 	bl	8002158 <HAL_GetTick>
 800547c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800547e:	e00a      	b.n	8005496 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005480:	f7fc fe6a 	bl	8002158 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	f241 3288 	movw	r2, #5000	; 0x1388
 800548e:	4293      	cmp	r3, r2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e03b      	b.n	800550e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005496:	4b20      	ldr	r3, [pc, #128]	; (8005518 <HAL_RCC_ClockConfig+0x260>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 030f 	and.w	r3, r3, #15
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d1ed      	bne.n	8005480 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d008      	beq.n	80054c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054b0:	4b1a      	ldr	r3, [pc, #104]	; (800551c <HAL_RCC_ClockConfig+0x264>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	4917      	ldr	r1, [pc, #92]	; (800551c <HAL_RCC_ClockConfig+0x264>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d009      	beq.n	80054e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054ce:	4b13      	ldr	r3, [pc, #76]	; (800551c <HAL_RCC_ClockConfig+0x264>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	490f      	ldr	r1, [pc, #60]	; (800551c <HAL_RCC_ClockConfig+0x264>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054e2:	f000 f825 	bl	8005530 <HAL_RCC_GetSysClockFreq>
 80054e6:	4602      	mov	r2, r0
 80054e8:	4b0c      	ldr	r3, [pc, #48]	; (800551c <HAL_RCC_ClockConfig+0x264>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	091b      	lsrs	r3, r3, #4
 80054ee:	f003 030f 	and.w	r3, r3, #15
 80054f2:	490c      	ldr	r1, [pc, #48]	; (8005524 <HAL_RCC_ClockConfig+0x26c>)
 80054f4:	5ccb      	ldrb	r3, [r1, r3]
 80054f6:	f003 031f 	and.w	r3, r3, #31
 80054fa:	fa22 f303 	lsr.w	r3, r2, r3
 80054fe:	4a0a      	ldr	r2, [pc, #40]	; (8005528 <HAL_RCC_ClockConfig+0x270>)
 8005500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005502:	4b0a      	ldr	r3, [pc, #40]	; (800552c <HAL_RCC_ClockConfig+0x274>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4618      	mov	r0, r3
 8005508:	f7fc fdda 	bl	80020c0 <HAL_InitTick>
 800550c:	4603      	mov	r3, r0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	40022000 	.word	0x40022000
 800551c:	40021000 	.word	0x40021000
 8005520:	04c4b400 	.word	0x04c4b400
 8005524:	08007f28 	.word	0x08007f28
 8005528:	20000030 	.word	0x20000030
 800552c:	20000034 	.word	0x20000034

08005530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005536:	4b2c      	ldr	r3, [pc, #176]	; (80055e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f003 030c 	and.w	r3, r3, #12
 800553e:	2b04      	cmp	r3, #4
 8005540:	d102      	bne.n	8005548 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005542:	4b2a      	ldr	r3, [pc, #168]	; (80055ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8005544:	613b      	str	r3, [r7, #16]
 8005546:	e047      	b.n	80055d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005548:	4b27      	ldr	r3, [pc, #156]	; (80055e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f003 030c 	and.w	r3, r3, #12
 8005550:	2b08      	cmp	r3, #8
 8005552:	d102      	bne.n	800555a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005554:	4b26      	ldr	r3, [pc, #152]	; (80055f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005556:	613b      	str	r3, [r7, #16]
 8005558:	e03e      	b.n	80055d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800555a:	4b23      	ldr	r3, [pc, #140]	; (80055e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 030c 	and.w	r3, r3, #12
 8005562:	2b0c      	cmp	r3, #12
 8005564:	d136      	bne.n	80055d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005566:	4b20      	ldr	r3, [pc, #128]	; (80055e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005570:	4b1d      	ldr	r3, [pc, #116]	; (80055e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	091b      	lsrs	r3, r3, #4
 8005576:	f003 030f 	and.w	r3, r3, #15
 800557a:	3301      	adds	r3, #1
 800557c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b03      	cmp	r3, #3
 8005582:	d10c      	bne.n	800559e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005584:	4a1a      	ldr	r2, [pc, #104]	; (80055f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	fbb2 f3f3 	udiv	r3, r2, r3
 800558c:	4a16      	ldr	r2, [pc, #88]	; (80055e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800558e:	68d2      	ldr	r2, [r2, #12]
 8005590:	0a12      	lsrs	r2, r2, #8
 8005592:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005596:	fb02 f303 	mul.w	r3, r2, r3
 800559a:	617b      	str	r3, [r7, #20]
      break;
 800559c:	e00c      	b.n	80055b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800559e:	4a13      	ldr	r2, [pc, #76]	; (80055ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a6:	4a10      	ldr	r2, [pc, #64]	; (80055e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055a8:	68d2      	ldr	r2, [r2, #12]
 80055aa:	0a12      	lsrs	r2, r2, #8
 80055ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80055b0:	fb02 f303 	mul.w	r3, r2, r3
 80055b4:	617b      	str	r3, [r7, #20]
      break;
 80055b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055b8:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	0e5b      	lsrs	r3, r3, #25
 80055be:	f003 0303 	and.w	r3, r3, #3
 80055c2:	3301      	adds	r3, #1
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d0:	613b      	str	r3, [r7, #16]
 80055d2:	e001      	b.n	80055d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80055d4:	2300      	movs	r3, #0
 80055d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80055d8:	693b      	ldr	r3, [r7, #16]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	371c      	adds	r7, #28
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	40021000 	.word	0x40021000
 80055ec:	00f42400 	.word	0x00f42400
 80055f0:	007a1200 	.word	0x007a1200

080055f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055f8:	4b03      	ldr	r3, [pc, #12]	; (8005608 <HAL_RCC_GetHCLKFreq+0x14>)
 80055fa:	681b      	ldr	r3, [r3, #0]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	20000030 	.word	0x20000030

0800560c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005610:	f7ff fff0 	bl	80055f4 <HAL_RCC_GetHCLKFreq>
 8005614:	4602      	mov	r2, r0
 8005616:	4b06      	ldr	r3, [pc, #24]	; (8005630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	0a1b      	lsrs	r3, r3, #8
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	4904      	ldr	r1, [pc, #16]	; (8005634 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005622:	5ccb      	ldrb	r3, [r1, r3]
 8005624:	f003 031f 	and.w	r3, r3, #31
 8005628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800562c:	4618      	mov	r0, r3
 800562e:	bd80      	pop	{r7, pc}
 8005630:	40021000 	.word	0x40021000
 8005634:	08007f38 	.word	0x08007f38

08005638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800563c:	f7ff ffda 	bl	80055f4 <HAL_RCC_GetHCLKFreq>
 8005640:	4602      	mov	r2, r0
 8005642:	4b06      	ldr	r3, [pc, #24]	; (800565c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	0adb      	lsrs	r3, r3, #11
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	4904      	ldr	r1, [pc, #16]	; (8005660 <HAL_RCC_GetPCLK2Freq+0x28>)
 800564e:	5ccb      	ldrb	r3, [r1, r3]
 8005650:	f003 031f 	and.w	r3, r3, #31
 8005654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005658:	4618      	mov	r0, r3
 800565a:	bd80      	pop	{r7, pc}
 800565c:	40021000 	.word	0x40021000
 8005660:	08007f38 	.word	0x08007f38

08005664 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800566a:	4b1e      	ldr	r3, [pc, #120]	; (80056e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	f003 0303 	and.w	r3, r3, #3
 8005672:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005674:	4b1b      	ldr	r3, [pc, #108]	; (80056e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	091b      	lsrs	r3, r3, #4
 800567a:	f003 030f 	and.w	r3, r3, #15
 800567e:	3301      	adds	r3, #1
 8005680:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	2b03      	cmp	r3, #3
 8005686:	d10c      	bne.n	80056a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005688:	4a17      	ldr	r2, [pc, #92]	; (80056e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005690:	4a14      	ldr	r2, [pc, #80]	; (80056e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005692:	68d2      	ldr	r2, [r2, #12]
 8005694:	0a12      	lsrs	r2, r2, #8
 8005696:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800569a:	fb02 f303 	mul.w	r3, r2, r3
 800569e:	617b      	str	r3, [r7, #20]
    break;
 80056a0:	e00c      	b.n	80056bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056a2:	4a12      	ldr	r2, [pc, #72]	; (80056ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056aa:	4a0e      	ldr	r2, [pc, #56]	; (80056e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056ac:	68d2      	ldr	r2, [r2, #12]
 80056ae:	0a12      	lsrs	r2, r2, #8
 80056b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056b4:	fb02 f303 	mul.w	r3, r2, r3
 80056b8:	617b      	str	r3, [r7, #20]
    break;
 80056ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056bc:	4b09      	ldr	r3, [pc, #36]	; (80056e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	0e5b      	lsrs	r3, r3, #25
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	3301      	adds	r3, #1
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80056d6:	687b      	ldr	r3, [r7, #4]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	371c      	adds	r7, #28
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	40021000 	.word	0x40021000
 80056e8:	007a1200 	.word	0x007a1200
 80056ec:	00f42400 	.word	0x00f42400

080056f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056f8:	2300      	movs	r3, #0
 80056fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056fc:	2300      	movs	r3, #0
 80056fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 8098 	beq.w	800583e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800570e:	2300      	movs	r3, #0
 8005710:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005712:	4b43      	ldr	r3, [pc, #268]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10d      	bne.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800571e:	4b40      	ldr	r3, [pc, #256]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005722:	4a3f      	ldr	r2, [pc, #252]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005728:	6593      	str	r3, [r2, #88]	; 0x58
 800572a:	4b3d      	ldr	r3, [pc, #244]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800572c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005732:	60bb      	str	r3, [r7, #8]
 8005734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005736:	2301      	movs	r3, #1
 8005738:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800573a:	4b3a      	ldr	r3, [pc, #232]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a39      	ldr	r2, [pc, #228]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005744:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005746:	f7fc fd07 	bl	8002158 <HAL_GetTick>
 800574a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800574c:	e009      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800574e:	f7fc fd03 	bl	8002158 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d902      	bls.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	74fb      	strb	r3, [r7, #19]
        break;
 8005760:	e005      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005762:	4b30      	ldr	r3, [pc, #192]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576a:	2b00      	cmp	r3, #0
 800576c:	d0ef      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800576e:	7cfb      	ldrb	r3, [r7, #19]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d159      	bne.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005774:	4b2a      	ldr	r3, [pc, #168]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800577e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d01e      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	429a      	cmp	r2, r3
 800578e:	d019      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005790:	4b23      	ldr	r3, [pc, #140]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800579a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800579c:	4b20      	ldr	r3, [pc, #128]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800579e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a2:	4a1f      	ldr	r2, [pc, #124]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057ac:	4b1c      	ldr	r3, [pc, #112]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b2:	4a1b      	ldr	r2, [pc, #108]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057bc:	4a18      	ldr	r2, [pc, #96]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d016      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ce:	f7fc fcc3 	bl	8002158 <HAL_GetTick>
 80057d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057d4:	e00b      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057d6:	f7fc fcbf 	bl	8002158 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d902      	bls.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	74fb      	strb	r3, [r7, #19]
            break;
 80057ec:	e006      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057ee:	4b0c      	ldr	r3, [pc, #48]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0ec      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80057fc:	7cfb      	ldrb	r3, [r7, #19]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10b      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005802:	4b07      	ldr	r3, [pc, #28]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005808:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005810:	4903      	ldr	r1, [pc, #12]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005818:	e008      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800581a:	7cfb      	ldrb	r3, [r7, #19]
 800581c:	74bb      	strb	r3, [r7, #18]
 800581e:	e005      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005820:	40021000 	.word	0x40021000
 8005824:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005828:	7cfb      	ldrb	r3, [r7, #19]
 800582a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800582c:	7c7b      	ldrb	r3, [r7, #17]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d105      	bne.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005832:	4ba6      	ldr	r3, [pc, #664]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005836:	4aa5      	ldr	r2, [pc, #660]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800583c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00a      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800584a:	4ba0      	ldr	r3, [pc, #640]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800584c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005850:	f023 0203 	bic.w	r2, r3, #3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	499c      	ldr	r1, [pc, #624]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800585a:	4313      	orrs	r3, r2
 800585c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00a      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800586c:	4b97      	ldr	r3, [pc, #604]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800586e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005872:	f023 020c 	bic.w	r2, r3, #12
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	4994      	ldr	r1, [pc, #592]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800587c:	4313      	orrs	r3, r2
 800587e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0304 	and.w	r3, r3, #4
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800588e:	4b8f      	ldr	r3, [pc, #572]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005894:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	498b      	ldr	r1, [pc, #556]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0308 	and.w	r3, r3, #8
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00a      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058b0:	4b86      	ldr	r3, [pc, #536]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	4983      	ldr	r1, [pc, #524]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0320 	and.w	r3, r3, #32
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058d2:	4b7e      	ldr	r3, [pc, #504]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	497a      	ldr	r1, [pc, #488]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00a      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058f4:	4b75      	ldr	r3, [pc, #468]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	4972      	ldr	r1, [pc, #456]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005904:	4313      	orrs	r3, r2
 8005906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005916:	4b6d      	ldr	r3, [pc, #436]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	4969      	ldr	r1, [pc, #420]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005926:	4313      	orrs	r3, r2
 8005928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005938:	4b64      	ldr	r3, [pc, #400]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800593a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	4961      	ldr	r1, [pc, #388]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005948:	4313      	orrs	r3, r2
 800594a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800595a:	4b5c      	ldr	r3, [pc, #368]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800595c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005960:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	4958      	ldr	r1, [pc, #352]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800596a:	4313      	orrs	r3, r2
 800596c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005978:	2b00      	cmp	r3, #0
 800597a:	d015      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800597c:	4b53      	ldr	r3, [pc, #332]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800597e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005982:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598a:	4950      	ldr	r1, [pc, #320]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800598c:	4313      	orrs	r3, r2
 800598e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800599a:	d105      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800599c:	4b4b      	ldr	r3, [pc, #300]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	4a4a      	ldr	r2, [pc, #296]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d015      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80059b4:	4b45      	ldr	r3, [pc, #276]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c2:	4942      	ldr	r1, [pc, #264]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059d2:	d105      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059d4:	4b3d      	ldr	r3, [pc, #244]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	4a3c      	ldr	r2, [pc, #240]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059de:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d015      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80059ec:	4b37      	ldr	r3, [pc, #220]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fa:	4934      	ldr	r1, [pc, #208]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a0a:	d105      	bne.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a0c:	4b2f      	ldr	r3, [pc, #188]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	4a2e      	ldr	r2, [pc, #184]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a16:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d015      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a24:	4b29      	ldr	r3, [pc, #164]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a32:	4926      	ldr	r1, [pc, #152]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a42:	d105      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a44:	4b21      	ldr	r3, [pc, #132]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	4a20      	ldr	r2, [pc, #128]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a4e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d015      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a5c:	4b1b      	ldr	r3, [pc, #108]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6a:	4918      	ldr	r1, [pc, #96]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a7a:	d105      	bne.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a7c:	4b13      	ldr	r3, [pc, #76]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	4a12      	ldr	r2, [pc, #72]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d015      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005a94:	4b0d      	ldr	r3, [pc, #52]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa2:	490a      	ldr	r1, [pc, #40]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ab2:	d105      	bne.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ab4:	4b05      	ldr	r3, [pc, #20]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	4a04      	ldr	r2, [pc, #16]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005abe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005ac0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	40021000 	.word	0x40021000

08005ad0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e049      	b.n	8005b76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d106      	bne.n	8005afc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7fc f9c8 	bl	8001e8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4610      	mov	r0, r2
 8005b10:	f000 fa48 	bl	8005fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d001      	beq.n	8005b98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e04a      	b.n	8005c2e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f042 0201 	orr.w	r2, r2, #1
 8005bae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a21      	ldr	r2, [pc, #132]	; (8005c3c <HAL_TIM_Base_Start_IT+0xbc>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d018      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0x6c>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc2:	d013      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0x6c>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a1d      	ldr	r2, [pc, #116]	; (8005c40 <HAL_TIM_Base_Start_IT+0xc0>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00e      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0x6c>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a1c      	ldr	r2, [pc, #112]	; (8005c44 <HAL_TIM_Base_Start_IT+0xc4>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d009      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0x6c>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a1a      	ldr	r2, [pc, #104]	; (8005c48 <HAL_TIM_Base_Start_IT+0xc8>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d004      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0x6c>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a19      	ldr	r2, [pc, #100]	; (8005c4c <HAL_TIM_Base_Start_IT+0xcc>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d115      	bne.n	8005c18 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689a      	ldr	r2, [r3, #8]
 8005bf2:	4b17      	ldr	r3, [pc, #92]	; (8005c50 <HAL_TIM_Base_Start_IT+0xd0>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b06      	cmp	r3, #6
 8005bfc:	d015      	beq.n	8005c2a <HAL_TIM_Base_Start_IT+0xaa>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c04:	d011      	beq.n	8005c2a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f042 0201 	orr.w	r2, r2, #1
 8005c14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c16:	e008      	b.n	8005c2a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0201 	orr.w	r2, r2, #1
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	e000      	b.n	8005c2c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	40012c00 	.word	0x40012c00
 8005c40:	40000400 	.word	0x40000400
 8005c44:	40000800 	.word	0x40000800
 8005c48:	40013400 	.word	0x40013400
 8005c4c:	40014000 	.word	0x40014000
 8005c50:	00010007 	.word	0x00010007

08005c54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d122      	bne.n	8005cb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d11b      	bne.n	8005cb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f06f 0202 	mvn.w	r2, #2
 8005c80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f965 	bl	8005f66 <HAL_TIM_IC_CaptureCallback>
 8005c9c:	e005      	b.n	8005caa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f957 	bl	8005f52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f968 	bl	8005f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f003 0304 	and.w	r3, r3, #4
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d122      	bne.n	8005d04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b04      	cmp	r3, #4
 8005cca:	d11b      	bne.n	8005d04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f06f 0204 	mvn.w	r2, #4
 8005cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2202      	movs	r2, #2
 8005cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d003      	beq.n	8005cf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f93b 	bl	8005f66 <HAL_TIM_IC_CaptureCallback>
 8005cf0:	e005      	b.n	8005cfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f92d 	bl	8005f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f93e 	bl	8005f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	f003 0308 	and.w	r3, r3, #8
 8005d0e:	2b08      	cmp	r3, #8
 8005d10:	d122      	bne.n	8005d58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f003 0308 	and.w	r3, r3, #8
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	d11b      	bne.n	8005d58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f06f 0208 	mvn.w	r2, #8
 8005d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2204      	movs	r2, #4
 8005d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	f003 0303 	and.w	r3, r3, #3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f911 	bl	8005f66 <HAL_TIM_IC_CaptureCallback>
 8005d44:	e005      	b.n	8005d52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f903 	bl	8005f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f914 	bl	8005f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f003 0310 	and.w	r3, r3, #16
 8005d62:	2b10      	cmp	r3, #16
 8005d64:	d122      	bne.n	8005dac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f003 0310 	and.w	r3, r3, #16
 8005d70:	2b10      	cmp	r3, #16
 8005d72:	d11b      	bne.n	8005dac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f06f 0210 	mvn.w	r2, #16
 8005d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2208      	movs	r2, #8
 8005d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f8e7 	bl	8005f66 <HAL_TIM_IC_CaptureCallback>
 8005d98:	e005      	b.n	8005da6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f8d9 	bl	8005f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f8ea 	bl	8005f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d10e      	bne.n	8005dd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d107      	bne.n	8005dd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f06f 0201 	mvn.w	r2, #1
 8005dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7fc f920 	bl	8002018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de2:	2b80      	cmp	r3, #128	; 0x80
 8005de4:	d10e      	bne.n	8005e04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df0:	2b80      	cmp	r3, #128	; 0x80
 8005df2:	d107      	bne.n	8005e04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f96a 	bl	80060d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e12:	d10e      	bne.n	8005e32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1e:	2b80      	cmp	r3, #128	; 0x80
 8005e20:	d107      	bne.n	8005e32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 f95d 	bl	80060ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3c:	2b40      	cmp	r3, #64	; 0x40
 8005e3e:	d10e      	bne.n	8005e5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4a:	2b40      	cmp	r3, #64	; 0x40
 8005e4c:	d107      	bne.n	8005e5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f898 	bl	8005f8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	f003 0320 	and.w	r3, r3, #32
 8005e68:	2b20      	cmp	r3, #32
 8005e6a:	d10e      	bne.n	8005e8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	f003 0320 	and.w	r3, r3, #32
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	d107      	bne.n	8005e8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f06f 0220 	mvn.w	r2, #32
 8005e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f91d 	bl	80060c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e98:	d10f      	bne.n	8005eba <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ea8:	d107      	bne.n	8005eba <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f923 	bl	8006100 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ec4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ec8:	d10f      	bne.n	8005eea <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ed4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ed8:	d107      	bne.n	8005eea <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f915 	bl	8006114 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ef8:	d10f      	bne.n	8005f1a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f08:	d107      	bne.n	8005f1a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f907 	bl	8006128 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f28:	d10f      	bne.n	8005f4a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f38:	d107      	bne.n	8005f4a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f8f9 	bl	800613c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f4a:	bf00      	nop
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b083      	sub	sp, #12
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f6e:	bf00      	nop
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f82:	bf00      	nop
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
	...

08005fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a3c      	ldr	r2, [pc, #240]	; (80060a8 <TIM_Base_SetConfig+0x104>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d00f      	beq.n	8005fdc <TIM_Base_SetConfig+0x38>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc2:	d00b      	beq.n	8005fdc <TIM_Base_SetConfig+0x38>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a39      	ldr	r2, [pc, #228]	; (80060ac <TIM_Base_SetConfig+0x108>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d007      	beq.n	8005fdc <TIM_Base_SetConfig+0x38>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a38      	ldr	r2, [pc, #224]	; (80060b0 <TIM_Base_SetConfig+0x10c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d003      	beq.n	8005fdc <TIM_Base_SetConfig+0x38>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a37      	ldr	r2, [pc, #220]	; (80060b4 <TIM_Base_SetConfig+0x110>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d108      	bne.n	8005fee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a2d      	ldr	r2, [pc, #180]	; (80060a8 <TIM_Base_SetConfig+0x104>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d01b      	beq.n	800602e <TIM_Base_SetConfig+0x8a>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ffc:	d017      	beq.n	800602e <TIM_Base_SetConfig+0x8a>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a2a      	ldr	r2, [pc, #168]	; (80060ac <TIM_Base_SetConfig+0x108>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d013      	beq.n	800602e <TIM_Base_SetConfig+0x8a>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a29      	ldr	r2, [pc, #164]	; (80060b0 <TIM_Base_SetConfig+0x10c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d00f      	beq.n	800602e <TIM_Base_SetConfig+0x8a>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a28      	ldr	r2, [pc, #160]	; (80060b4 <TIM_Base_SetConfig+0x110>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00b      	beq.n	800602e <TIM_Base_SetConfig+0x8a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a27      	ldr	r2, [pc, #156]	; (80060b8 <TIM_Base_SetConfig+0x114>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d007      	beq.n	800602e <TIM_Base_SetConfig+0x8a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a26      	ldr	r2, [pc, #152]	; (80060bc <TIM_Base_SetConfig+0x118>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d003      	beq.n	800602e <TIM_Base_SetConfig+0x8a>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a25      	ldr	r2, [pc, #148]	; (80060c0 <TIM_Base_SetConfig+0x11c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d108      	bne.n	8006040 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	4313      	orrs	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a10      	ldr	r2, [pc, #64]	; (80060a8 <TIM_Base_SetConfig+0x104>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d00f      	beq.n	800608c <TIM_Base_SetConfig+0xe8>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a11      	ldr	r2, [pc, #68]	; (80060b4 <TIM_Base_SetConfig+0x110>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00b      	beq.n	800608c <TIM_Base_SetConfig+0xe8>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a10      	ldr	r2, [pc, #64]	; (80060b8 <TIM_Base_SetConfig+0x114>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d007      	beq.n	800608c <TIM_Base_SetConfig+0xe8>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a0f      	ldr	r2, [pc, #60]	; (80060bc <TIM_Base_SetConfig+0x118>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d003      	beq.n	800608c <TIM_Base_SetConfig+0xe8>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a0e      	ldr	r2, [pc, #56]	; (80060c0 <TIM_Base_SetConfig+0x11c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d103      	bne.n	8006094 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	691a      	ldr	r2, [r3, #16]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	615a      	str	r2, [r3, #20]
}
 800609a:	bf00      	nop
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	40012c00 	.word	0x40012c00
 80060ac:	40000400 	.word	0x40000400
 80060b0:	40000800 	.word	0x40000800
 80060b4:	40013400 	.word	0x40013400
 80060b8:	40014000 	.word	0x40014000
 80060bc:	40014400 	.word	0x40014400
 80060c0:	40014800 	.word	0x40014800

080060c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e042      	b.n	80061e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006168:	2b00      	cmp	r3, #0
 800616a:	d106      	bne.n	800617a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7fb feaf 	bl	8001ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2224      	movs	r2, #36	; 0x24
 800617e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 0201 	bic.w	r2, r2, #1
 8006190:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f82c 	bl	80061f0 <UART_SetConfig>
 8006198:	4603      	mov	r3, r0
 800619a:	2b01      	cmp	r3, #1
 800619c:	d101      	bne.n	80061a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e022      	b.n	80061e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fabe 	bl	800672c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689a      	ldr	r2, [r3, #8]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f042 0201 	orr.w	r2, r2, #1
 80061de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 fb45 	bl	8006870 <UART_CheckIdleState>
 80061e6:	4603      	mov	r3, r0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061f0:	b5b0      	push	{r4, r5, r7, lr}
 80061f2:	b088      	sub	sp, #32
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061f8:	2300      	movs	r3, #0
 80061fa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689a      	ldr	r2, [r3, #8]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	431a      	orrs	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	431a      	orrs	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	4313      	orrs	r3, r2
 8006212:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	4baf      	ldr	r3, [pc, #700]	; (80064d8 <UART_SetConfig+0x2e8>)
 800621c:	4013      	ands	r3, r2
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6812      	ldr	r2, [r2, #0]
 8006222:	69f9      	ldr	r1, [r7, #28]
 8006224:	430b      	orrs	r3, r1
 8006226:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4aa4      	ldr	r2, [pc, #656]	; (80064dc <UART_SetConfig+0x2ec>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d004      	beq.n	8006258 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	69fa      	ldr	r2, [r7, #28]
 8006254:	4313      	orrs	r3, r2
 8006256:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006262:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	6812      	ldr	r2, [r2, #0]
 800626a:	69f9      	ldr	r1, [r7, #28]
 800626c:	430b      	orrs	r3, r1
 800626e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006276:	f023 010f 	bic.w	r1, r3, #15
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	430a      	orrs	r2, r1
 8006284:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a95      	ldr	r2, [pc, #596]	; (80064e0 <UART_SetConfig+0x2f0>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d120      	bne.n	80062d2 <UART_SetConfig+0xe2>
 8006290:	4b94      	ldr	r3, [pc, #592]	; (80064e4 <UART_SetConfig+0x2f4>)
 8006292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	2b03      	cmp	r3, #3
 800629c:	d816      	bhi.n	80062cc <UART_SetConfig+0xdc>
 800629e:	a201      	add	r2, pc, #4	; (adr r2, 80062a4 <UART_SetConfig+0xb4>)
 80062a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a4:	080062b5 	.word	0x080062b5
 80062a8:	080062c1 	.word	0x080062c1
 80062ac:	080062bb 	.word	0x080062bb
 80062b0:	080062c7 	.word	0x080062c7
 80062b4:	2301      	movs	r3, #1
 80062b6:	76fb      	strb	r3, [r7, #27]
 80062b8:	e0bc      	b.n	8006434 <UART_SetConfig+0x244>
 80062ba:	2302      	movs	r3, #2
 80062bc:	76fb      	strb	r3, [r7, #27]
 80062be:	e0b9      	b.n	8006434 <UART_SetConfig+0x244>
 80062c0:	2304      	movs	r3, #4
 80062c2:	76fb      	strb	r3, [r7, #27]
 80062c4:	e0b6      	b.n	8006434 <UART_SetConfig+0x244>
 80062c6:	2308      	movs	r3, #8
 80062c8:	76fb      	strb	r3, [r7, #27]
 80062ca:	e0b3      	b.n	8006434 <UART_SetConfig+0x244>
 80062cc:	2310      	movs	r3, #16
 80062ce:	76fb      	strb	r3, [r7, #27]
 80062d0:	e0b0      	b.n	8006434 <UART_SetConfig+0x244>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a84      	ldr	r2, [pc, #528]	; (80064e8 <UART_SetConfig+0x2f8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d132      	bne.n	8006342 <UART_SetConfig+0x152>
 80062dc:	4b81      	ldr	r3, [pc, #516]	; (80064e4 <UART_SetConfig+0x2f4>)
 80062de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e2:	f003 030c 	and.w	r3, r3, #12
 80062e6:	2b0c      	cmp	r3, #12
 80062e8:	d828      	bhi.n	800633c <UART_SetConfig+0x14c>
 80062ea:	a201      	add	r2, pc, #4	; (adr r2, 80062f0 <UART_SetConfig+0x100>)
 80062ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f0:	08006325 	.word	0x08006325
 80062f4:	0800633d 	.word	0x0800633d
 80062f8:	0800633d 	.word	0x0800633d
 80062fc:	0800633d 	.word	0x0800633d
 8006300:	08006331 	.word	0x08006331
 8006304:	0800633d 	.word	0x0800633d
 8006308:	0800633d 	.word	0x0800633d
 800630c:	0800633d 	.word	0x0800633d
 8006310:	0800632b 	.word	0x0800632b
 8006314:	0800633d 	.word	0x0800633d
 8006318:	0800633d 	.word	0x0800633d
 800631c:	0800633d 	.word	0x0800633d
 8006320:	08006337 	.word	0x08006337
 8006324:	2300      	movs	r3, #0
 8006326:	76fb      	strb	r3, [r7, #27]
 8006328:	e084      	b.n	8006434 <UART_SetConfig+0x244>
 800632a:	2302      	movs	r3, #2
 800632c:	76fb      	strb	r3, [r7, #27]
 800632e:	e081      	b.n	8006434 <UART_SetConfig+0x244>
 8006330:	2304      	movs	r3, #4
 8006332:	76fb      	strb	r3, [r7, #27]
 8006334:	e07e      	b.n	8006434 <UART_SetConfig+0x244>
 8006336:	2308      	movs	r3, #8
 8006338:	76fb      	strb	r3, [r7, #27]
 800633a:	e07b      	b.n	8006434 <UART_SetConfig+0x244>
 800633c:	2310      	movs	r3, #16
 800633e:	76fb      	strb	r3, [r7, #27]
 8006340:	e078      	b.n	8006434 <UART_SetConfig+0x244>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a69      	ldr	r2, [pc, #420]	; (80064ec <UART_SetConfig+0x2fc>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d120      	bne.n	800638e <UART_SetConfig+0x19e>
 800634c:	4b65      	ldr	r3, [pc, #404]	; (80064e4 <UART_SetConfig+0x2f4>)
 800634e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006352:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006356:	2b30      	cmp	r3, #48	; 0x30
 8006358:	d013      	beq.n	8006382 <UART_SetConfig+0x192>
 800635a:	2b30      	cmp	r3, #48	; 0x30
 800635c:	d814      	bhi.n	8006388 <UART_SetConfig+0x198>
 800635e:	2b20      	cmp	r3, #32
 8006360:	d009      	beq.n	8006376 <UART_SetConfig+0x186>
 8006362:	2b20      	cmp	r3, #32
 8006364:	d810      	bhi.n	8006388 <UART_SetConfig+0x198>
 8006366:	2b00      	cmp	r3, #0
 8006368:	d002      	beq.n	8006370 <UART_SetConfig+0x180>
 800636a:	2b10      	cmp	r3, #16
 800636c:	d006      	beq.n	800637c <UART_SetConfig+0x18c>
 800636e:	e00b      	b.n	8006388 <UART_SetConfig+0x198>
 8006370:	2300      	movs	r3, #0
 8006372:	76fb      	strb	r3, [r7, #27]
 8006374:	e05e      	b.n	8006434 <UART_SetConfig+0x244>
 8006376:	2302      	movs	r3, #2
 8006378:	76fb      	strb	r3, [r7, #27]
 800637a:	e05b      	b.n	8006434 <UART_SetConfig+0x244>
 800637c:	2304      	movs	r3, #4
 800637e:	76fb      	strb	r3, [r7, #27]
 8006380:	e058      	b.n	8006434 <UART_SetConfig+0x244>
 8006382:	2308      	movs	r3, #8
 8006384:	76fb      	strb	r3, [r7, #27]
 8006386:	e055      	b.n	8006434 <UART_SetConfig+0x244>
 8006388:	2310      	movs	r3, #16
 800638a:	76fb      	strb	r3, [r7, #27]
 800638c:	e052      	b.n	8006434 <UART_SetConfig+0x244>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a57      	ldr	r2, [pc, #348]	; (80064f0 <UART_SetConfig+0x300>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d120      	bne.n	80063da <UART_SetConfig+0x1ea>
 8006398:	4b52      	ldr	r3, [pc, #328]	; (80064e4 <UART_SetConfig+0x2f4>)
 800639a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80063a2:	2bc0      	cmp	r3, #192	; 0xc0
 80063a4:	d013      	beq.n	80063ce <UART_SetConfig+0x1de>
 80063a6:	2bc0      	cmp	r3, #192	; 0xc0
 80063a8:	d814      	bhi.n	80063d4 <UART_SetConfig+0x1e4>
 80063aa:	2b80      	cmp	r3, #128	; 0x80
 80063ac:	d009      	beq.n	80063c2 <UART_SetConfig+0x1d2>
 80063ae:	2b80      	cmp	r3, #128	; 0x80
 80063b0:	d810      	bhi.n	80063d4 <UART_SetConfig+0x1e4>
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <UART_SetConfig+0x1cc>
 80063b6:	2b40      	cmp	r3, #64	; 0x40
 80063b8:	d006      	beq.n	80063c8 <UART_SetConfig+0x1d8>
 80063ba:	e00b      	b.n	80063d4 <UART_SetConfig+0x1e4>
 80063bc:	2300      	movs	r3, #0
 80063be:	76fb      	strb	r3, [r7, #27]
 80063c0:	e038      	b.n	8006434 <UART_SetConfig+0x244>
 80063c2:	2302      	movs	r3, #2
 80063c4:	76fb      	strb	r3, [r7, #27]
 80063c6:	e035      	b.n	8006434 <UART_SetConfig+0x244>
 80063c8:	2304      	movs	r3, #4
 80063ca:	76fb      	strb	r3, [r7, #27]
 80063cc:	e032      	b.n	8006434 <UART_SetConfig+0x244>
 80063ce:	2308      	movs	r3, #8
 80063d0:	76fb      	strb	r3, [r7, #27]
 80063d2:	e02f      	b.n	8006434 <UART_SetConfig+0x244>
 80063d4:	2310      	movs	r3, #16
 80063d6:	76fb      	strb	r3, [r7, #27]
 80063d8:	e02c      	b.n	8006434 <UART_SetConfig+0x244>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a3f      	ldr	r2, [pc, #252]	; (80064dc <UART_SetConfig+0x2ec>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d125      	bne.n	8006430 <UART_SetConfig+0x240>
 80063e4:	4b3f      	ldr	r3, [pc, #252]	; (80064e4 <UART_SetConfig+0x2f4>)
 80063e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80063ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063f2:	d017      	beq.n	8006424 <UART_SetConfig+0x234>
 80063f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063f8:	d817      	bhi.n	800642a <UART_SetConfig+0x23a>
 80063fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063fe:	d00b      	beq.n	8006418 <UART_SetConfig+0x228>
 8006400:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006404:	d811      	bhi.n	800642a <UART_SetConfig+0x23a>
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <UART_SetConfig+0x222>
 800640a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800640e:	d006      	beq.n	800641e <UART_SetConfig+0x22e>
 8006410:	e00b      	b.n	800642a <UART_SetConfig+0x23a>
 8006412:	2300      	movs	r3, #0
 8006414:	76fb      	strb	r3, [r7, #27]
 8006416:	e00d      	b.n	8006434 <UART_SetConfig+0x244>
 8006418:	2302      	movs	r3, #2
 800641a:	76fb      	strb	r3, [r7, #27]
 800641c:	e00a      	b.n	8006434 <UART_SetConfig+0x244>
 800641e:	2304      	movs	r3, #4
 8006420:	76fb      	strb	r3, [r7, #27]
 8006422:	e007      	b.n	8006434 <UART_SetConfig+0x244>
 8006424:	2308      	movs	r3, #8
 8006426:	76fb      	strb	r3, [r7, #27]
 8006428:	e004      	b.n	8006434 <UART_SetConfig+0x244>
 800642a:	2310      	movs	r3, #16
 800642c:	76fb      	strb	r3, [r7, #27]
 800642e:	e001      	b.n	8006434 <UART_SetConfig+0x244>
 8006430:	2310      	movs	r3, #16
 8006432:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a28      	ldr	r2, [pc, #160]	; (80064dc <UART_SetConfig+0x2ec>)
 800643a:	4293      	cmp	r3, r2
 800643c:	f040 809e 	bne.w	800657c <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006440:	7efb      	ldrb	r3, [r7, #27]
 8006442:	2b08      	cmp	r3, #8
 8006444:	d823      	bhi.n	800648e <UART_SetConfig+0x29e>
 8006446:	a201      	add	r2, pc, #4	; (adr r2, 800644c <UART_SetConfig+0x25c>)
 8006448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644c:	08006471 	.word	0x08006471
 8006450:	0800648f 	.word	0x0800648f
 8006454:	08006479 	.word	0x08006479
 8006458:	0800648f 	.word	0x0800648f
 800645c:	0800647f 	.word	0x0800647f
 8006460:	0800648f 	.word	0x0800648f
 8006464:	0800648f 	.word	0x0800648f
 8006468:	0800648f 	.word	0x0800648f
 800646c:	08006487 	.word	0x08006487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006470:	f7ff f8cc 	bl	800560c <HAL_RCC_GetPCLK1Freq>
 8006474:	6178      	str	r0, [r7, #20]
        break;
 8006476:	e00f      	b.n	8006498 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006478:	4b1e      	ldr	r3, [pc, #120]	; (80064f4 <UART_SetConfig+0x304>)
 800647a:	617b      	str	r3, [r7, #20]
        break;
 800647c:	e00c      	b.n	8006498 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800647e:	f7ff f857 	bl	8005530 <HAL_RCC_GetSysClockFreq>
 8006482:	6178      	str	r0, [r7, #20]
        break;
 8006484:	e008      	b.n	8006498 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800648a:	617b      	str	r3, [r7, #20]
        break;
 800648c:	e004      	b.n	8006498 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	76bb      	strb	r3, [r7, #26]
        break;
 8006496:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	2b00      	cmp	r3, #0
 800649c:	f000 812e 	beq.w	80066fc <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a4:	4a14      	ldr	r2, [pc, #80]	; (80064f8 <UART_SetConfig+0x308>)
 80064a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064aa:	461a      	mov	r2, r3
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80064b2:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	4613      	mov	r3, r2
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	4413      	add	r3, r2
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d305      	bcc.n	80064d0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d915      	bls.n	80064fc <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	76bb      	strb	r3, [r7, #26]
 80064d4:	e112      	b.n	80066fc <UART_SetConfig+0x50c>
 80064d6:	bf00      	nop
 80064d8:	cfff69f3 	.word	0xcfff69f3
 80064dc:	40008000 	.word	0x40008000
 80064e0:	40013800 	.word	0x40013800
 80064e4:	40021000 	.word	0x40021000
 80064e8:	40004400 	.word	0x40004400
 80064ec:	40004800 	.word	0x40004800
 80064f0:	40004c00 	.word	0x40004c00
 80064f4:	00f42400 	.word	0x00f42400
 80064f8:	08007f40 	.word	0x08007f40
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	4618      	mov	r0, r3
 8006500:	f04f 0100 	mov.w	r1, #0
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006508:	4a86      	ldr	r2, [pc, #536]	; (8006724 <UART_SetConfig+0x534>)
 800650a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800650e:	b29a      	uxth	r2, r3
 8006510:	f04f 0300 	mov.w	r3, #0
 8006514:	f7fa fb3c 	bl	8000b90 <__aeabi_uldivmod>
 8006518:	4602      	mov	r2, r0
 800651a:	460b      	mov	r3, r1
 800651c:	4610      	mov	r0, r2
 800651e:	4619      	mov	r1, r3
 8006520:	f04f 0200 	mov.w	r2, #0
 8006524:	f04f 0300 	mov.w	r3, #0
 8006528:	020b      	lsls	r3, r1, #8
 800652a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800652e:	0202      	lsls	r2, r0, #8
 8006530:	6879      	ldr	r1, [r7, #4]
 8006532:	6849      	ldr	r1, [r1, #4]
 8006534:	0849      	lsrs	r1, r1, #1
 8006536:	4608      	mov	r0, r1
 8006538:	f04f 0100 	mov.w	r1, #0
 800653c:	1814      	adds	r4, r2, r0
 800653e:	eb43 0501 	adc.w	r5, r3, r1
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	461a      	mov	r2, r3
 8006548:	f04f 0300 	mov.w	r3, #0
 800654c:	4620      	mov	r0, r4
 800654e:	4629      	mov	r1, r5
 8006550:	f7fa fb1e 	bl	8000b90 <__aeabi_uldivmod>
 8006554:	4602      	mov	r2, r0
 8006556:	460b      	mov	r3, r1
 8006558:	4613      	mov	r3, r2
 800655a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006562:	d308      	bcc.n	8006576 <UART_SetConfig+0x386>
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800656a:	d204      	bcs.n	8006576 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	60da      	str	r2, [r3, #12]
 8006574:	e0c2      	b.n	80066fc <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	76bb      	strb	r3, [r7, #26]
 800657a:	e0bf      	b.n	80066fc <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	69db      	ldr	r3, [r3, #28]
 8006580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006584:	d165      	bne.n	8006652 <UART_SetConfig+0x462>
  {
    switch (clocksource)
 8006586:	7efb      	ldrb	r3, [r7, #27]
 8006588:	2b08      	cmp	r3, #8
 800658a:	d828      	bhi.n	80065de <UART_SetConfig+0x3ee>
 800658c:	a201      	add	r2, pc, #4	; (adr r2, 8006594 <UART_SetConfig+0x3a4>)
 800658e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006592:	bf00      	nop
 8006594:	080065b9 	.word	0x080065b9
 8006598:	080065c1 	.word	0x080065c1
 800659c:	080065c9 	.word	0x080065c9
 80065a0:	080065df 	.word	0x080065df
 80065a4:	080065cf 	.word	0x080065cf
 80065a8:	080065df 	.word	0x080065df
 80065ac:	080065df 	.word	0x080065df
 80065b0:	080065df 	.word	0x080065df
 80065b4:	080065d7 	.word	0x080065d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065b8:	f7ff f828 	bl	800560c <HAL_RCC_GetPCLK1Freq>
 80065bc:	6178      	str	r0, [r7, #20]
        break;
 80065be:	e013      	b.n	80065e8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065c0:	f7ff f83a 	bl	8005638 <HAL_RCC_GetPCLK2Freq>
 80065c4:	6178      	str	r0, [r7, #20]
        break;
 80065c6:	e00f      	b.n	80065e8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065c8:	4b57      	ldr	r3, [pc, #348]	; (8006728 <UART_SetConfig+0x538>)
 80065ca:	617b      	str	r3, [r7, #20]
        break;
 80065cc:	e00c      	b.n	80065e8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ce:	f7fe ffaf 	bl	8005530 <HAL_RCC_GetSysClockFreq>
 80065d2:	6178      	str	r0, [r7, #20]
        break;
 80065d4:	e008      	b.n	80065e8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065da:	617b      	str	r3, [r7, #20]
        break;
 80065dc:	e004      	b.n	80065e8 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	76bb      	strb	r3, [r7, #26]
        break;
 80065e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 8086 	beq.w	80066fc <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f4:	4a4b      	ldr	r2, [pc, #300]	; (8006724 <UART_SetConfig+0x534>)
 80065f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065fa:	461a      	mov	r2, r3
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006602:	005a      	lsls	r2, r3, #1
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	085b      	lsrs	r3, r3, #1
 800660a:	441a      	add	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	fbb2 f3f3 	udiv	r3, r2, r3
 8006614:	b29b      	uxth	r3, r3
 8006616:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	2b0f      	cmp	r3, #15
 800661c:	d916      	bls.n	800664c <UART_SetConfig+0x45c>
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006624:	d212      	bcs.n	800664c <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	b29b      	uxth	r3, r3
 800662a:	f023 030f 	bic.w	r3, r3, #15
 800662e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	085b      	lsrs	r3, r3, #1
 8006634:	b29b      	uxth	r3, r3
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	b29a      	uxth	r2, r3
 800663c:	89fb      	ldrh	r3, [r7, #14]
 800663e:	4313      	orrs	r3, r2
 8006640:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	89fa      	ldrh	r2, [r7, #14]
 8006648:	60da      	str	r2, [r3, #12]
 800664a:	e057      	b.n	80066fc <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	76bb      	strb	r3, [r7, #26]
 8006650:	e054      	b.n	80066fc <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006652:	7efb      	ldrb	r3, [r7, #27]
 8006654:	2b08      	cmp	r3, #8
 8006656:	d828      	bhi.n	80066aa <UART_SetConfig+0x4ba>
 8006658:	a201      	add	r2, pc, #4	; (adr r2, 8006660 <UART_SetConfig+0x470>)
 800665a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665e:	bf00      	nop
 8006660:	08006685 	.word	0x08006685
 8006664:	0800668d 	.word	0x0800668d
 8006668:	08006695 	.word	0x08006695
 800666c:	080066ab 	.word	0x080066ab
 8006670:	0800669b 	.word	0x0800669b
 8006674:	080066ab 	.word	0x080066ab
 8006678:	080066ab 	.word	0x080066ab
 800667c:	080066ab 	.word	0x080066ab
 8006680:	080066a3 	.word	0x080066a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006684:	f7fe ffc2 	bl	800560c <HAL_RCC_GetPCLK1Freq>
 8006688:	6178      	str	r0, [r7, #20]
        break;
 800668a:	e013      	b.n	80066b4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800668c:	f7fe ffd4 	bl	8005638 <HAL_RCC_GetPCLK2Freq>
 8006690:	6178      	str	r0, [r7, #20]
        break;
 8006692:	e00f      	b.n	80066b4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006694:	4b24      	ldr	r3, [pc, #144]	; (8006728 <UART_SetConfig+0x538>)
 8006696:	617b      	str	r3, [r7, #20]
        break;
 8006698:	e00c      	b.n	80066b4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800669a:	f7fe ff49 	bl	8005530 <HAL_RCC_GetSysClockFreq>
 800669e:	6178      	str	r0, [r7, #20]
        break;
 80066a0:	e008      	b.n	80066b4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066a6:	617b      	str	r3, [r7, #20]
        break;
 80066a8:	e004      	b.n	80066b4 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 80066aa:	2300      	movs	r3, #0
 80066ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	76bb      	strb	r3, [r7, #26]
        break;
 80066b2:	bf00      	nop
    }

    if (pclk != 0U)
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d020      	beq.n	80066fc <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	4a19      	ldr	r2, [pc, #100]	; (8006724 <UART_SetConfig+0x534>)
 80066c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066c4:	461a      	mov	r2, r3
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	085b      	lsrs	r3, r3, #1
 80066d2:	441a      	add	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066dc:	b29b      	uxth	r3, r3
 80066de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	2b0f      	cmp	r3, #15
 80066e4:	d908      	bls.n	80066f8 <UART_SetConfig+0x508>
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ec:	d204      	bcs.n	80066f8 <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	60da      	str	r2, [r3, #12]
 80066f6:	e001      	b.n	80066fc <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006718:	7ebb      	ldrb	r3, [r7, #26]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3720      	adds	r7, #32
 800671e:	46bd      	mov	sp, r7
 8006720:	bdb0      	pop	{r4, r5, r7, pc}
 8006722:	bf00      	nop
 8006724:	08007f40 	.word	0x08007f40
 8006728:	00f42400 	.word	0x00f42400

0800672c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00a      	beq.n	8006756 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	430a      	orrs	r2, r1
 8006754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00a      	beq.n	8006778 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	430a      	orrs	r2, r1
 8006776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677c:	f003 0304 	and.w	r3, r3, #4
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00a      	beq.n	800679a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679e:	f003 0308 	and.w	r3, r3, #8
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00a      	beq.n	80067bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c0:	f003 0310 	and.w	r3, r3, #16
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00a      	beq.n	80067de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	430a      	orrs	r2, r1
 80067dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e2:	f003 0320 	and.w	r3, r3, #32
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00a      	beq.n	8006800 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	430a      	orrs	r2, r1
 80067fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006808:	2b00      	cmp	r3, #0
 800680a:	d01a      	beq.n	8006842 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	430a      	orrs	r2, r1
 8006820:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800682a:	d10a      	bne.n	8006842 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00a      	beq.n	8006864 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	430a      	orrs	r2, r1
 8006862:	605a      	str	r2, [r3, #4]
  }
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af02      	add	r7, sp, #8
 8006876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006880:	f7fb fc6a 	bl	8002158 <HAL_GetTick>
 8006884:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0308 	and.w	r3, r3, #8
 8006890:	2b08      	cmp	r3, #8
 8006892:	d10e      	bne.n	80068b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006894:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f82f 	bl	8006906 <UART_WaitOnFlagUntilTimeout>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e025      	b.n	80068fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0304 	and.w	r3, r3, #4
 80068bc:	2b04      	cmp	r3, #4
 80068be:	d10e      	bne.n	80068de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f819 	bl	8006906 <UART_WaitOnFlagUntilTimeout>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e00f      	b.n	80068fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2220      	movs	r2, #32
 80068e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2220      	movs	r2, #32
 80068ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	603b      	str	r3, [r7, #0]
 8006912:	4613      	mov	r3, r2
 8006914:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006916:	e062      	b.n	80069de <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691e:	d05e      	beq.n	80069de <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006920:	f7fb fc1a 	bl	8002158 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	429a      	cmp	r2, r3
 800692e:	d302      	bcc.n	8006936 <UART_WaitOnFlagUntilTimeout+0x30>
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d11d      	bne.n	8006972 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006944:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689a      	ldr	r2, [r3, #8]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 0201 	bic.w	r2, r2, #1
 8006954:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2220      	movs	r2, #32
 800695a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2220      	movs	r2, #32
 8006962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e045      	b.n	80069fe <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0304 	and.w	r3, r3, #4
 800697c:	2b00      	cmp	r3, #0
 800697e:	d02e      	beq.n	80069de <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800698a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800698e:	d126      	bne.n	80069de <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006998:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80069a8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f022 0201 	bic.w	r2, r2, #1
 80069b8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2220      	movs	r2, #32
 80069be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2220      	movs	r2, #32
 80069c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2220      	movs	r2, #32
 80069ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e00f      	b.n	80069fe <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	69da      	ldr	r2, [r3, #28]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	4013      	ands	r3, r2
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	bf0c      	ite	eq
 80069ee:	2301      	moveq	r3, #1
 80069f0:	2300      	movne	r3, #0
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	461a      	mov	r2, r3
 80069f6:	79fb      	ldrb	r3, [r7, #7]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d08d      	beq.n	8006918 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b085      	sub	sp, #20
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d101      	bne.n	8006a1c <HAL_UARTEx_DisableFifoMode+0x16>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e027      	b.n	8006a6c <HAL_UARTEx_DisableFifoMode+0x66>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2224      	movs	r2, #36	; 0x24
 8006a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f022 0201 	bic.w	r2, r2, #1
 8006a42:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006a4a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d101      	bne.n	8006a90 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	e02d      	b.n	8006aec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2224      	movs	r2, #36	; 0x24
 8006a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f022 0201 	bic.w	r2, r2, #1
 8006ab6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f84f 	bl	8006b70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2220      	movs	r2, #32
 8006ade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d101      	bne.n	8006b0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b08:	2302      	movs	r3, #2
 8006b0a:	e02d      	b.n	8006b68 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2224      	movs	r2, #36	; 0x24
 8006b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 0201 	bic.w	r2, r2, #1
 8006b32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	430a      	orrs	r2, r1
 8006b46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f811 	bl	8006b70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d108      	bne.n	8006b92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b90:	e031      	b.n	8006bf6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b92:	2308      	movs	r3, #8
 8006b94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b96:	2308      	movs	r3, #8
 8006b98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	0e5b      	lsrs	r3, r3, #25
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	f003 0307 	and.w	r3, r3, #7
 8006ba8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	0f5b      	lsrs	r3, r3, #29
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	f003 0307 	and.w	r3, r3, #7
 8006bb8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bba:	7bbb      	ldrb	r3, [r7, #14]
 8006bbc:	7b3a      	ldrb	r2, [r7, #12]
 8006bbe:	4911      	ldr	r1, [pc, #68]	; (8006c04 <UARTEx_SetNbDataToProcess+0x94>)
 8006bc0:	5c8a      	ldrb	r2, [r1, r2]
 8006bc2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006bc6:	7b3a      	ldrb	r2, [r7, #12]
 8006bc8:	490f      	ldr	r1, [pc, #60]	; (8006c08 <UARTEx_SetNbDataToProcess+0x98>)
 8006bca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bcc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
 8006bda:	7b7a      	ldrb	r2, [r7, #13]
 8006bdc:	4909      	ldr	r1, [pc, #36]	; (8006c04 <UARTEx_SetNbDataToProcess+0x94>)
 8006bde:	5c8a      	ldrb	r2, [r1, r2]
 8006be0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006be4:	7b7a      	ldrb	r2, [r7, #13]
 8006be6:	4908      	ldr	r1, [pc, #32]	; (8006c08 <UARTEx_SetNbDataToProcess+0x98>)
 8006be8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bea:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006bf6:	bf00      	nop
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	08007f58 	.word	0x08007f58
 8006c08:	08007f60 	.word	0x08007f60

08006c0c <__errno>:
 8006c0c:	4b01      	ldr	r3, [pc, #4]	; (8006c14 <__errno+0x8>)
 8006c0e:	6818      	ldr	r0, [r3, #0]
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	2000003c 	.word	0x2000003c

08006c18 <__libc_init_array>:
 8006c18:	b570      	push	{r4, r5, r6, lr}
 8006c1a:	4d0d      	ldr	r5, [pc, #52]	; (8006c50 <__libc_init_array+0x38>)
 8006c1c:	4c0d      	ldr	r4, [pc, #52]	; (8006c54 <__libc_init_array+0x3c>)
 8006c1e:	1b64      	subs	r4, r4, r5
 8006c20:	10a4      	asrs	r4, r4, #2
 8006c22:	2600      	movs	r6, #0
 8006c24:	42a6      	cmp	r6, r4
 8006c26:	d109      	bne.n	8006c3c <__libc_init_array+0x24>
 8006c28:	4d0b      	ldr	r5, [pc, #44]	; (8006c58 <__libc_init_array+0x40>)
 8006c2a:	4c0c      	ldr	r4, [pc, #48]	; (8006c5c <__libc_init_array+0x44>)
 8006c2c:	f001 f96a 	bl	8007f04 <_init>
 8006c30:	1b64      	subs	r4, r4, r5
 8006c32:	10a4      	asrs	r4, r4, #2
 8006c34:	2600      	movs	r6, #0
 8006c36:	42a6      	cmp	r6, r4
 8006c38:	d105      	bne.n	8006c46 <__libc_init_array+0x2e>
 8006c3a:	bd70      	pop	{r4, r5, r6, pc}
 8006c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c40:	4798      	blx	r3
 8006c42:	3601      	adds	r6, #1
 8006c44:	e7ee      	b.n	8006c24 <__libc_init_array+0xc>
 8006c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c4a:	4798      	blx	r3
 8006c4c:	3601      	adds	r6, #1
 8006c4e:	e7f2      	b.n	8006c36 <__libc_init_array+0x1e>
 8006c50:	08007fc8 	.word	0x08007fc8
 8006c54:	08007fc8 	.word	0x08007fc8
 8006c58:	08007fc8 	.word	0x08007fc8
 8006c5c:	08007fcc 	.word	0x08007fcc

08006c60 <memset>:
 8006c60:	4402      	add	r2, r0
 8006c62:	4603      	mov	r3, r0
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d100      	bne.n	8006c6a <memset+0xa>
 8006c68:	4770      	bx	lr
 8006c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c6e:	e7f9      	b.n	8006c64 <memset+0x4>

08006c70 <round>:
 8006c70:	ec51 0b10 	vmov	r0, r1, d0
 8006c74:	b570      	push	{r4, r5, r6, lr}
 8006c76:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8006c7a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8006c7e:	2c13      	cmp	r4, #19
 8006c80:	ee10 2a10 	vmov	r2, s0
 8006c84:	460b      	mov	r3, r1
 8006c86:	dc19      	bgt.n	8006cbc <round+0x4c>
 8006c88:	2c00      	cmp	r4, #0
 8006c8a:	da09      	bge.n	8006ca0 <round+0x30>
 8006c8c:	3401      	adds	r4, #1
 8006c8e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8006c92:	d103      	bne.n	8006c9c <round+0x2c>
 8006c94:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006c98:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	e028      	b.n	8006cf2 <round+0x82>
 8006ca0:	4d15      	ldr	r5, [pc, #84]	; (8006cf8 <round+0x88>)
 8006ca2:	4125      	asrs	r5, r4
 8006ca4:	ea01 0605 	and.w	r6, r1, r5
 8006ca8:	4332      	orrs	r2, r6
 8006caa:	d00e      	beq.n	8006cca <round+0x5a>
 8006cac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006cb0:	fa42 f404 	asr.w	r4, r2, r4
 8006cb4:	4423      	add	r3, r4
 8006cb6:	ea23 0305 	bic.w	r3, r3, r5
 8006cba:	e7ef      	b.n	8006c9c <round+0x2c>
 8006cbc:	2c33      	cmp	r4, #51	; 0x33
 8006cbe:	dd07      	ble.n	8006cd0 <round+0x60>
 8006cc0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8006cc4:	d101      	bne.n	8006cca <round+0x5a>
 8006cc6:	f7f9 faad 	bl	8000224 <__adddf3>
 8006cca:	ec41 0b10 	vmov	d0, r0, r1
 8006cce:	bd70      	pop	{r4, r5, r6, pc}
 8006cd0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8006cd4:	f04f 35ff 	mov.w	r5, #4294967295
 8006cd8:	40f5      	lsrs	r5, r6
 8006cda:	4228      	tst	r0, r5
 8006cdc:	d0f5      	beq.n	8006cca <round+0x5a>
 8006cde:	2101      	movs	r1, #1
 8006ce0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8006ce4:	fa01 f404 	lsl.w	r4, r1, r4
 8006ce8:	1912      	adds	r2, r2, r4
 8006cea:	bf28      	it	cs
 8006cec:	185b      	addcs	r3, r3, r1
 8006cee:	ea22 0105 	bic.w	r1, r2, r5
 8006cf2:	4608      	mov	r0, r1
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	e7e8      	b.n	8006cca <round+0x5a>
 8006cf8:	000fffff 	.word	0x000fffff

08006cfc <fmod>:
 8006cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cfe:	ed2d 8b02 	vpush	{d8}
 8006d02:	ec57 6b10 	vmov	r6, r7, d0
 8006d06:	ec55 4b11 	vmov	r4, r5, d1
 8006d0a:	f000 f8e1 	bl	8006ed0 <__ieee754_fmod>
 8006d0e:	4b18      	ldr	r3, [pc, #96]	; (8006d70 <fmod+0x74>)
 8006d10:	eeb0 8a40 	vmov.f32	s16, s0
 8006d14:	eef0 8a60 	vmov.f32	s17, s1
 8006d18:	f993 3000 	ldrsb.w	r3, [r3]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	d020      	beq.n	8006d62 <fmod+0x66>
 8006d20:	4622      	mov	r2, r4
 8006d22:	462b      	mov	r3, r5
 8006d24:	4620      	mov	r0, r4
 8006d26:	4629      	mov	r1, r5
 8006d28:	f7f9 fecc 	bl	8000ac4 <__aeabi_dcmpun>
 8006d2c:	b9c8      	cbnz	r0, 8006d62 <fmod+0x66>
 8006d2e:	4632      	mov	r2, r6
 8006d30:	463b      	mov	r3, r7
 8006d32:	4630      	mov	r0, r6
 8006d34:	4639      	mov	r1, r7
 8006d36:	f7f9 fec5 	bl	8000ac4 <__aeabi_dcmpun>
 8006d3a:	b990      	cbnz	r0, 8006d62 <fmod+0x66>
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	2300      	movs	r3, #0
 8006d40:	4620      	mov	r0, r4
 8006d42:	4629      	mov	r1, r5
 8006d44:	f7f9 fe8c 	bl	8000a60 <__aeabi_dcmpeq>
 8006d48:	b158      	cbz	r0, 8006d62 <fmod+0x66>
 8006d4a:	f7ff ff5f 	bl	8006c0c <__errno>
 8006d4e:	2321      	movs	r3, #33	; 0x21
 8006d50:	6003      	str	r3, [r0, #0]
 8006d52:	2200      	movs	r2, #0
 8006d54:	2300      	movs	r3, #0
 8006d56:	4610      	mov	r0, r2
 8006d58:	4619      	mov	r1, r3
 8006d5a:	f7f9 fd43 	bl	80007e4 <__aeabi_ddiv>
 8006d5e:	ec41 0b18 	vmov	d8, r0, r1
 8006d62:	eeb0 0a48 	vmov.f32	s0, s16
 8006d66:	eef0 0a68 	vmov.f32	s1, s17
 8006d6a:	ecbd 8b02 	vpop	{d8}
 8006d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d70:	200000a0 	.word	0x200000a0

08006d74 <pow>:
 8006d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d78:	ec59 8b10 	vmov	r8, r9, d0
 8006d7c:	ec57 6b11 	vmov	r6, r7, d1
 8006d80:	f000 f9ba 	bl	80070f8 <__ieee754_pow>
 8006d84:	4b4e      	ldr	r3, [pc, #312]	; (8006ec0 <pow+0x14c>)
 8006d86:	f993 3000 	ldrsb.w	r3, [r3]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	ec55 4b10 	vmov	r4, r5, d0
 8006d90:	d015      	beq.n	8006dbe <pow+0x4a>
 8006d92:	4632      	mov	r2, r6
 8006d94:	463b      	mov	r3, r7
 8006d96:	4630      	mov	r0, r6
 8006d98:	4639      	mov	r1, r7
 8006d9a:	f7f9 fe93 	bl	8000ac4 <__aeabi_dcmpun>
 8006d9e:	b970      	cbnz	r0, 8006dbe <pow+0x4a>
 8006da0:	4642      	mov	r2, r8
 8006da2:	464b      	mov	r3, r9
 8006da4:	4640      	mov	r0, r8
 8006da6:	4649      	mov	r1, r9
 8006da8:	f7f9 fe8c 	bl	8000ac4 <__aeabi_dcmpun>
 8006dac:	2200      	movs	r2, #0
 8006dae:	2300      	movs	r3, #0
 8006db0:	b148      	cbz	r0, 8006dc6 <pow+0x52>
 8006db2:	4630      	mov	r0, r6
 8006db4:	4639      	mov	r1, r7
 8006db6:	f7f9 fe53 	bl	8000a60 <__aeabi_dcmpeq>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d17d      	bne.n	8006eba <pow+0x146>
 8006dbe:	ec45 4b10 	vmov	d0, r4, r5
 8006dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dc6:	4640      	mov	r0, r8
 8006dc8:	4649      	mov	r1, r9
 8006dca:	f7f9 fe49 	bl	8000a60 <__aeabi_dcmpeq>
 8006dce:	b1e0      	cbz	r0, 8006e0a <pow+0x96>
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	4639      	mov	r1, r7
 8006dd8:	f7f9 fe42 	bl	8000a60 <__aeabi_dcmpeq>
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	d16c      	bne.n	8006eba <pow+0x146>
 8006de0:	ec47 6b10 	vmov	d0, r6, r7
 8006de4:	f000 ff67 	bl	8007cb6 <finite>
 8006de8:	2800      	cmp	r0, #0
 8006dea:	d0e8      	beq.n	8006dbe <pow+0x4a>
 8006dec:	2200      	movs	r2, #0
 8006dee:	2300      	movs	r3, #0
 8006df0:	4630      	mov	r0, r6
 8006df2:	4639      	mov	r1, r7
 8006df4:	f7f9 fe3e 	bl	8000a74 <__aeabi_dcmplt>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	d0e0      	beq.n	8006dbe <pow+0x4a>
 8006dfc:	f7ff ff06 	bl	8006c0c <__errno>
 8006e00:	2321      	movs	r3, #33	; 0x21
 8006e02:	6003      	str	r3, [r0, #0]
 8006e04:	2400      	movs	r4, #0
 8006e06:	4d2f      	ldr	r5, [pc, #188]	; (8006ec4 <pow+0x150>)
 8006e08:	e7d9      	b.n	8006dbe <pow+0x4a>
 8006e0a:	ec45 4b10 	vmov	d0, r4, r5
 8006e0e:	f000 ff52 	bl	8007cb6 <finite>
 8006e12:	bbb8      	cbnz	r0, 8006e84 <pow+0x110>
 8006e14:	ec49 8b10 	vmov	d0, r8, r9
 8006e18:	f000 ff4d 	bl	8007cb6 <finite>
 8006e1c:	b390      	cbz	r0, 8006e84 <pow+0x110>
 8006e1e:	ec47 6b10 	vmov	d0, r6, r7
 8006e22:	f000 ff48 	bl	8007cb6 <finite>
 8006e26:	b368      	cbz	r0, 8006e84 <pow+0x110>
 8006e28:	4622      	mov	r2, r4
 8006e2a:	462b      	mov	r3, r5
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	4629      	mov	r1, r5
 8006e30:	f7f9 fe48 	bl	8000ac4 <__aeabi_dcmpun>
 8006e34:	b160      	cbz	r0, 8006e50 <pow+0xdc>
 8006e36:	f7ff fee9 	bl	8006c0c <__errno>
 8006e3a:	2321      	movs	r3, #33	; 0x21
 8006e3c:	6003      	str	r3, [r0, #0]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	2300      	movs	r3, #0
 8006e42:	4610      	mov	r0, r2
 8006e44:	4619      	mov	r1, r3
 8006e46:	f7f9 fccd 	bl	80007e4 <__aeabi_ddiv>
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	460d      	mov	r5, r1
 8006e4e:	e7b6      	b.n	8006dbe <pow+0x4a>
 8006e50:	f7ff fedc 	bl	8006c0c <__errno>
 8006e54:	2322      	movs	r3, #34	; 0x22
 8006e56:	6003      	str	r3, [r0, #0]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	4640      	mov	r0, r8
 8006e5e:	4649      	mov	r1, r9
 8006e60:	f7f9 fe08 	bl	8000a74 <__aeabi_dcmplt>
 8006e64:	2400      	movs	r4, #0
 8006e66:	b158      	cbz	r0, 8006e80 <pow+0x10c>
 8006e68:	ec47 6b10 	vmov	d0, r6, r7
 8006e6c:	f000 ff38 	bl	8007ce0 <rint>
 8006e70:	4632      	mov	r2, r6
 8006e72:	ec51 0b10 	vmov	r0, r1, d0
 8006e76:	463b      	mov	r3, r7
 8006e78:	f7f9 fdf2 	bl	8000a60 <__aeabi_dcmpeq>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	d0c2      	beq.n	8006e06 <pow+0x92>
 8006e80:	4d11      	ldr	r5, [pc, #68]	; (8006ec8 <pow+0x154>)
 8006e82:	e79c      	b.n	8006dbe <pow+0x4a>
 8006e84:	2200      	movs	r2, #0
 8006e86:	2300      	movs	r3, #0
 8006e88:	4620      	mov	r0, r4
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	f7f9 fde8 	bl	8000a60 <__aeabi_dcmpeq>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	d094      	beq.n	8006dbe <pow+0x4a>
 8006e94:	ec49 8b10 	vmov	d0, r8, r9
 8006e98:	f000 ff0d 	bl	8007cb6 <finite>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	d08e      	beq.n	8006dbe <pow+0x4a>
 8006ea0:	ec47 6b10 	vmov	d0, r6, r7
 8006ea4:	f000 ff07 	bl	8007cb6 <finite>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d088      	beq.n	8006dbe <pow+0x4a>
 8006eac:	f7ff feae 	bl	8006c0c <__errno>
 8006eb0:	2322      	movs	r3, #34	; 0x22
 8006eb2:	6003      	str	r3, [r0, #0]
 8006eb4:	2400      	movs	r4, #0
 8006eb6:	2500      	movs	r5, #0
 8006eb8:	e781      	b.n	8006dbe <pow+0x4a>
 8006eba:	4d04      	ldr	r5, [pc, #16]	; (8006ecc <pow+0x158>)
 8006ebc:	2400      	movs	r4, #0
 8006ebe:	e77e      	b.n	8006dbe <pow+0x4a>
 8006ec0:	200000a0 	.word	0x200000a0
 8006ec4:	fff00000 	.word	0xfff00000
 8006ec8:	7ff00000 	.word	0x7ff00000
 8006ecc:	3ff00000 	.word	0x3ff00000

08006ed0 <__ieee754_fmod>:
 8006ed0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed4:	ec53 2b11 	vmov	r2, r3, d1
 8006ed8:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8006edc:	ea5e 0402 	orrs.w	r4, lr, r2
 8006ee0:	ec51 0b10 	vmov	r0, r1, d0
 8006ee4:	ee11 7a10 	vmov	r7, s2
 8006ee8:	ee11 ca10 	vmov	ip, s2
 8006eec:	461e      	mov	r6, r3
 8006eee:	d00d      	beq.n	8006f0c <__ieee754_fmod+0x3c>
 8006ef0:	4c7a      	ldr	r4, [pc, #488]	; (80070dc <__ieee754_fmod+0x20c>)
 8006ef2:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8006ef6:	45a0      	cmp	r8, r4
 8006ef8:	4689      	mov	r9, r1
 8006efa:	dc07      	bgt.n	8006f0c <__ieee754_fmod+0x3c>
 8006efc:	4254      	negs	r4, r2
 8006efe:	4d78      	ldr	r5, [pc, #480]	; (80070e0 <__ieee754_fmod+0x210>)
 8006f00:	4314      	orrs	r4, r2
 8006f02:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8006f06:	42ac      	cmp	r4, r5
 8006f08:	46ab      	mov	fp, r5
 8006f0a:	d909      	bls.n	8006f20 <__ieee754_fmod+0x50>
 8006f0c:	f7f9 fb40 	bl	8000590 <__aeabi_dmul>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	f7f9 fc66 	bl	80007e4 <__aeabi_ddiv>
 8006f18:	ec41 0b10 	vmov	d0, r0, r1
 8006f1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f20:	45f0      	cmp	r8, lr
 8006f22:	ee10 aa10 	vmov	sl, s0
 8006f26:	ee10 4a10 	vmov	r4, s0
 8006f2a:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006f2e:	dc0a      	bgt.n	8006f46 <__ieee754_fmod+0x76>
 8006f30:	dbf2      	blt.n	8006f18 <__ieee754_fmod+0x48>
 8006f32:	4290      	cmp	r0, r2
 8006f34:	d3f0      	bcc.n	8006f18 <__ieee754_fmod+0x48>
 8006f36:	d106      	bne.n	8006f46 <__ieee754_fmod+0x76>
 8006f38:	4a6a      	ldr	r2, [pc, #424]	; (80070e4 <__ieee754_fmod+0x214>)
 8006f3a:	0fed      	lsrs	r5, r5, #31
 8006f3c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006f40:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006f44:	e7e8      	b.n	8006f18 <__ieee754_fmod+0x48>
 8006f46:	ea19 0f0b 	tst.w	r9, fp
 8006f4a:	d14a      	bne.n	8006fe2 <__ieee754_fmod+0x112>
 8006f4c:	f1b8 0f00 	cmp.w	r8, #0
 8006f50:	d13f      	bne.n	8006fd2 <__ieee754_fmod+0x102>
 8006f52:	4965      	ldr	r1, [pc, #404]	; (80070e8 <__ieee754_fmod+0x218>)
 8006f54:	4653      	mov	r3, sl
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	dc38      	bgt.n	8006fcc <__ieee754_fmod+0xfc>
 8006f5a:	4b61      	ldr	r3, [pc, #388]	; (80070e0 <__ieee754_fmod+0x210>)
 8006f5c:	4033      	ands	r3, r6
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d14f      	bne.n	8007002 <__ieee754_fmod+0x132>
 8006f62:	f1be 0f00 	cmp.w	lr, #0
 8006f66:	d144      	bne.n	8006ff2 <__ieee754_fmod+0x122>
 8006f68:	4a5f      	ldr	r2, [pc, #380]	; (80070e8 <__ieee754_fmod+0x218>)
 8006f6a:	463b      	mov	r3, r7
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	dc3d      	bgt.n	8006fec <__ieee754_fmod+0x11c>
 8006f70:	4b5e      	ldr	r3, [pc, #376]	; (80070ec <__ieee754_fmod+0x21c>)
 8006f72:	4299      	cmp	r1, r3
 8006f74:	db4a      	blt.n	800700c <__ieee754_fmod+0x13c>
 8006f76:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f7e:	485b      	ldr	r0, [pc, #364]	; (80070ec <__ieee754_fmod+0x21c>)
 8006f80:	4282      	cmp	r2, r0
 8006f82:	db57      	blt.n	8007034 <__ieee754_fmod+0x164>
 8006f84:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8006f88:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8006f8c:	1a89      	subs	r1, r1, r2
 8006f8e:	1b98      	subs	r0, r3, r6
 8006f90:	eba4 070c 	sub.w	r7, r4, ip
 8006f94:	2900      	cmp	r1, #0
 8006f96:	d164      	bne.n	8007062 <__ieee754_fmod+0x192>
 8006f98:	4564      	cmp	r4, ip
 8006f9a:	bf38      	it	cc
 8006f9c:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	bfa4      	itt	ge
 8006fa4:	463c      	movge	r4, r7
 8006fa6:	4603      	movge	r3, r0
 8006fa8:	ea53 0104 	orrs.w	r1, r3, r4
 8006fac:	d0c4      	beq.n	8006f38 <__ieee754_fmod+0x68>
 8006fae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fb2:	db6b      	blt.n	800708c <__ieee754_fmod+0x1bc>
 8006fb4:	494d      	ldr	r1, [pc, #308]	; (80070ec <__ieee754_fmod+0x21c>)
 8006fb6:	428a      	cmp	r2, r1
 8006fb8:	db6e      	blt.n	8007098 <__ieee754_fmod+0x1c8>
 8006fba:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006fbe:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8006fc2:	431d      	orrs	r5, r3
 8006fc4:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 8006fc8:	4620      	mov	r0, r4
 8006fca:	e7a5      	b.n	8006f18 <__ieee754_fmod+0x48>
 8006fcc:	3901      	subs	r1, #1
 8006fce:	005b      	lsls	r3, r3, #1
 8006fd0:	e7c1      	b.n	8006f56 <__ieee754_fmod+0x86>
 8006fd2:	4946      	ldr	r1, [pc, #280]	; (80070ec <__ieee754_fmod+0x21c>)
 8006fd4:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	ddbe      	ble.n	8006f5a <__ieee754_fmod+0x8a>
 8006fdc:	3901      	subs	r1, #1
 8006fde:	005b      	lsls	r3, r3, #1
 8006fe0:	e7fa      	b.n	8006fd8 <__ieee754_fmod+0x108>
 8006fe2:	ea4f 5128 	mov.w	r1, r8, asr #20
 8006fe6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006fea:	e7b6      	b.n	8006f5a <__ieee754_fmod+0x8a>
 8006fec:	3a01      	subs	r2, #1
 8006fee:	005b      	lsls	r3, r3, #1
 8006ff0:	e7bc      	b.n	8006f6c <__ieee754_fmod+0x9c>
 8006ff2:	4a3e      	ldr	r2, [pc, #248]	; (80070ec <__ieee754_fmod+0x21c>)
 8006ff4:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	ddb9      	ble.n	8006f70 <__ieee754_fmod+0xa0>
 8006ffc:	3a01      	subs	r2, #1
 8006ffe:	005b      	lsls	r3, r3, #1
 8007000:	e7fa      	b.n	8006ff8 <__ieee754_fmod+0x128>
 8007002:	ea4f 522e 	mov.w	r2, lr, asr #20
 8007006:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800700a:	e7b1      	b.n	8006f70 <__ieee754_fmod+0xa0>
 800700c:	1a5c      	subs	r4, r3, r1
 800700e:	2c1f      	cmp	r4, #31
 8007010:	dc0a      	bgt.n	8007028 <__ieee754_fmod+0x158>
 8007012:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8007016:	fa08 f804 	lsl.w	r8, r8, r4
 800701a:	fa2a f303 	lsr.w	r3, sl, r3
 800701e:	ea43 0308 	orr.w	r3, r3, r8
 8007022:	fa0a f404 	lsl.w	r4, sl, r4
 8007026:	e7aa      	b.n	8006f7e <__ieee754_fmod+0xae>
 8007028:	4b31      	ldr	r3, [pc, #196]	; (80070f0 <__ieee754_fmod+0x220>)
 800702a:	1a5b      	subs	r3, r3, r1
 800702c:	fa0a f303 	lsl.w	r3, sl, r3
 8007030:	2400      	movs	r4, #0
 8007032:	e7a4      	b.n	8006f7e <__ieee754_fmod+0xae>
 8007034:	eba0 0c02 	sub.w	ip, r0, r2
 8007038:	f1bc 0f1f 	cmp.w	ip, #31
 800703c:	dc0a      	bgt.n	8007054 <__ieee754_fmod+0x184>
 800703e:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8007042:	fa0e fe0c 	lsl.w	lr, lr, ip
 8007046:	fa27 f606 	lsr.w	r6, r7, r6
 800704a:	ea46 060e 	orr.w	r6, r6, lr
 800704e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8007052:	e79b      	b.n	8006f8c <__ieee754_fmod+0xbc>
 8007054:	4e26      	ldr	r6, [pc, #152]	; (80070f0 <__ieee754_fmod+0x220>)
 8007056:	1ab6      	subs	r6, r6, r2
 8007058:	fa07 f606 	lsl.w	r6, r7, r6
 800705c:	f04f 0c00 	mov.w	ip, #0
 8007060:	e794      	b.n	8006f8c <__ieee754_fmod+0xbc>
 8007062:	4564      	cmp	r4, ip
 8007064:	bf38      	it	cc
 8007066:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800706a:	2800      	cmp	r0, #0
 800706c:	da05      	bge.n	800707a <__ieee754_fmod+0x1aa>
 800706e:	0fe0      	lsrs	r0, r4, #31
 8007070:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8007074:	0064      	lsls	r4, r4, #1
 8007076:	3901      	subs	r1, #1
 8007078:	e789      	b.n	8006f8e <__ieee754_fmod+0xbe>
 800707a:	ea50 0307 	orrs.w	r3, r0, r7
 800707e:	f43f af5b 	beq.w	8006f38 <__ieee754_fmod+0x68>
 8007082:	0ffb      	lsrs	r3, r7, #31
 8007084:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007088:	007c      	lsls	r4, r7, #1
 800708a:	e7f4      	b.n	8007076 <__ieee754_fmod+0x1a6>
 800708c:	0fe1      	lsrs	r1, r4, #31
 800708e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8007092:	0064      	lsls	r4, r4, #1
 8007094:	3a01      	subs	r2, #1
 8007096:	e78a      	b.n	8006fae <__ieee754_fmod+0xde>
 8007098:	1a89      	subs	r1, r1, r2
 800709a:	2914      	cmp	r1, #20
 800709c:	dc0a      	bgt.n	80070b4 <__ieee754_fmod+0x1e4>
 800709e:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80070a2:	fa03 f202 	lsl.w	r2, r3, r2
 80070a6:	40cc      	lsrs	r4, r1
 80070a8:	4322      	orrs	r2, r4
 80070aa:	410b      	asrs	r3, r1
 80070ac:	ea43 0105 	orr.w	r1, r3, r5
 80070b0:	4610      	mov	r0, r2
 80070b2:	e731      	b.n	8006f18 <__ieee754_fmod+0x48>
 80070b4:	291f      	cmp	r1, #31
 80070b6:	dc07      	bgt.n	80070c8 <__ieee754_fmod+0x1f8>
 80070b8:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80070bc:	40cc      	lsrs	r4, r1
 80070be:	fa03 f202 	lsl.w	r2, r3, r2
 80070c2:	4322      	orrs	r2, r4
 80070c4:	462b      	mov	r3, r5
 80070c6:	e7f1      	b.n	80070ac <__ieee754_fmod+0x1dc>
 80070c8:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 80070cc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80070d0:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 80070d4:	32e2      	adds	r2, #226	; 0xe2
 80070d6:	fa43 f202 	asr.w	r2, r3, r2
 80070da:	e7f3      	b.n	80070c4 <__ieee754_fmod+0x1f4>
 80070dc:	7fefffff 	.word	0x7fefffff
 80070e0:	7ff00000 	.word	0x7ff00000
 80070e4:	08007f68 	.word	0x08007f68
 80070e8:	fffffbed 	.word	0xfffffbed
 80070ec:	fffffc02 	.word	0xfffffc02
 80070f0:	fffffbe2 	.word	0xfffffbe2
 80070f4:	00000000 	.word	0x00000000

080070f8 <__ieee754_pow>:
 80070f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fc:	ed2d 8b06 	vpush	{d8-d10}
 8007100:	b08d      	sub	sp, #52	; 0x34
 8007102:	ed8d 1b02 	vstr	d1, [sp, #8]
 8007106:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800710a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800710e:	ea56 0100 	orrs.w	r1, r6, r0
 8007112:	ec53 2b10 	vmov	r2, r3, d0
 8007116:	f000 84d1 	beq.w	8007abc <__ieee754_pow+0x9c4>
 800711a:	497f      	ldr	r1, [pc, #508]	; (8007318 <__ieee754_pow+0x220>)
 800711c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8007120:	428c      	cmp	r4, r1
 8007122:	ee10 8a10 	vmov	r8, s0
 8007126:	4699      	mov	r9, r3
 8007128:	dc09      	bgt.n	800713e <__ieee754_pow+0x46>
 800712a:	d103      	bne.n	8007134 <__ieee754_pow+0x3c>
 800712c:	b97a      	cbnz	r2, 800714e <__ieee754_pow+0x56>
 800712e:	42a6      	cmp	r6, r4
 8007130:	dd02      	ble.n	8007138 <__ieee754_pow+0x40>
 8007132:	e00c      	b.n	800714e <__ieee754_pow+0x56>
 8007134:	428e      	cmp	r6, r1
 8007136:	dc02      	bgt.n	800713e <__ieee754_pow+0x46>
 8007138:	428e      	cmp	r6, r1
 800713a:	d110      	bne.n	800715e <__ieee754_pow+0x66>
 800713c:	b178      	cbz	r0, 800715e <__ieee754_pow+0x66>
 800713e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007142:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007146:	ea54 0308 	orrs.w	r3, r4, r8
 800714a:	f000 84b7 	beq.w	8007abc <__ieee754_pow+0x9c4>
 800714e:	4873      	ldr	r0, [pc, #460]	; (800731c <__ieee754_pow+0x224>)
 8007150:	b00d      	add	sp, #52	; 0x34
 8007152:	ecbd 8b06 	vpop	{d8-d10}
 8007156:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800715a:	f000 bdb9 	b.w	8007cd0 <nan>
 800715e:	f1b9 0f00 	cmp.w	r9, #0
 8007162:	da36      	bge.n	80071d2 <__ieee754_pow+0xda>
 8007164:	496e      	ldr	r1, [pc, #440]	; (8007320 <__ieee754_pow+0x228>)
 8007166:	428e      	cmp	r6, r1
 8007168:	dc51      	bgt.n	800720e <__ieee754_pow+0x116>
 800716a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800716e:	428e      	cmp	r6, r1
 8007170:	f340 84af 	ble.w	8007ad2 <__ieee754_pow+0x9da>
 8007174:	1531      	asrs	r1, r6, #20
 8007176:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800717a:	2914      	cmp	r1, #20
 800717c:	dd0f      	ble.n	800719e <__ieee754_pow+0xa6>
 800717e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8007182:	fa20 fc01 	lsr.w	ip, r0, r1
 8007186:	fa0c f101 	lsl.w	r1, ip, r1
 800718a:	4281      	cmp	r1, r0
 800718c:	f040 84a1 	bne.w	8007ad2 <__ieee754_pow+0x9da>
 8007190:	f00c 0c01 	and.w	ip, ip, #1
 8007194:	f1cc 0102 	rsb	r1, ip, #2
 8007198:	9100      	str	r1, [sp, #0]
 800719a:	b180      	cbz	r0, 80071be <__ieee754_pow+0xc6>
 800719c:	e059      	b.n	8007252 <__ieee754_pow+0x15a>
 800719e:	2800      	cmp	r0, #0
 80071a0:	d155      	bne.n	800724e <__ieee754_pow+0x156>
 80071a2:	f1c1 0114 	rsb	r1, r1, #20
 80071a6:	fa46 fc01 	asr.w	ip, r6, r1
 80071aa:	fa0c f101 	lsl.w	r1, ip, r1
 80071ae:	42b1      	cmp	r1, r6
 80071b0:	f040 848c 	bne.w	8007acc <__ieee754_pow+0x9d4>
 80071b4:	f00c 0c01 	and.w	ip, ip, #1
 80071b8:	f1cc 0102 	rsb	r1, ip, #2
 80071bc:	9100      	str	r1, [sp, #0]
 80071be:	4959      	ldr	r1, [pc, #356]	; (8007324 <__ieee754_pow+0x22c>)
 80071c0:	428e      	cmp	r6, r1
 80071c2:	d12d      	bne.n	8007220 <__ieee754_pow+0x128>
 80071c4:	2f00      	cmp	r7, #0
 80071c6:	da79      	bge.n	80072bc <__ieee754_pow+0x1c4>
 80071c8:	4956      	ldr	r1, [pc, #344]	; (8007324 <__ieee754_pow+0x22c>)
 80071ca:	2000      	movs	r0, #0
 80071cc:	f7f9 fb0a 	bl	80007e4 <__aeabi_ddiv>
 80071d0:	e016      	b.n	8007200 <__ieee754_pow+0x108>
 80071d2:	2100      	movs	r1, #0
 80071d4:	9100      	str	r1, [sp, #0]
 80071d6:	2800      	cmp	r0, #0
 80071d8:	d13b      	bne.n	8007252 <__ieee754_pow+0x15a>
 80071da:	494f      	ldr	r1, [pc, #316]	; (8007318 <__ieee754_pow+0x220>)
 80071dc:	428e      	cmp	r6, r1
 80071de:	d1ee      	bne.n	80071be <__ieee754_pow+0xc6>
 80071e0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80071e4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80071e8:	ea53 0308 	orrs.w	r3, r3, r8
 80071ec:	f000 8466 	beq.w	8007abc <__ieee754_pow+0x9c4>
 80071f0:	4b4d      	ldr	r3, [pc, #308]	; (8007328 <__ieee754_pow+0x230>)
 80071f2:	429c      	cmp	r4, r3
 80071f4:	dd0d      	ble.n	8007212 <__ieee754_pow+0x11a>
 80071f6:	2f00      	cmp	r7, #0
 80071f8:	f280 8464 	bge.w	8007ac4 <__ieee754_pow+0x9cc>
 80071fc:	2000      	movs	r0, #0
 80071fe:	2100      	movs	r1, #0
 8007200:	ec41 0b10 	vmov	d0, r0, r1
 8007204:	b00d      	add	sp, #52	; 0x34
 8007206:	ecbd 8b06 	vpop	{d8-d10}
 800720a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720e:	2102      	movs	r1, #2
 8007210:	e7e0      	b.n	80071d4 <__ieee754_pow+0xdc>
 8007212:	2f00      	cmp	r7, #0
 8007214:	daf2      	bge.n	80071fc <__ieee754_pow+0x104>
 8007216:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800721a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800721e:	e7ef      	b.n	8007200 <__ieee754_pow+0x108>
 8007220:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007224:	d104      	bne.n	8007230 <__ieee754_pow+0x138>
 8007226:	4610      	mov	r0, r2
 8007228:	4619      	mov	r1, r3
 800722a:	f7f9 f9b1 	bl	8000590 <__aeabi_dmul>
 800722e:	e7e7      	b.n	8007200 <__ieee754_pow+0x108>
 8007230:	493e      	ldr	r1, [pc, #248]	; (800732c <__ieee754_pow+0x234>)
 8007232:	428f      	cmp	r7, r1
 8007234:	d10d      	bne.n	8007252 <__ieee754_pow+0x15a>
 8007236:	f1b9 0f00 	cmp.w	r9, #0
 800723a:	db0a      	blt.n	8007252 <__ieee754_pow+0x15a>
 800723c:	ec43 2b10 	vmov	d0, r2, r3
 8007240:	b00d      	add	sp, #52	; 0x34
 8007242:	ecbd 8b06 	vpop	{d8-d10}
 8007246:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724a:	f000 bc77 	b.w	8007b3c <__ieee754_sqrt>
 800724e:	2100      	movs	r1, #0
 8007250:	9100      	str	r1, [sp, #0]
 8007252:	ec43 2b10 	vmov	d0, r2, r3
 8007256:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800725a:	f000 fd23 	bl	8007ca4 <fabs>
 800725e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007262:	ec51 0b10 	vmov	r0, r1, d0
 8007266:	f1b8 0f00 	cmp.w	r8, #0
 800726a:	d12a      	bne.n	80072c2 <__ieee754_pow+0x1ca>
 800726c:	b12c      	cbz	r4, 800727a <__ieee754_pow+0x182>
 800726e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8007324 <__ieee754_pow+0x22c>
 8007272:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8007276:	45e6      	cmp	lr, ip
 8007278:	d123      	bne.n	80072c2 <__ieee754_pow+0x1ca>
 800727a:	2f00      	cmp	r7, #0
 800727c:	da05      	bge.n	800728a <__ieee754_pow+0x192>
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	2000      	movs	r0, #0
 8007284:	4927      	ldr	r1, [pc, #156]	; (8007324 <__ieee754_pow+0x22c>)
 8007286:	f7f9 faad 	bl	80007e4 <__aeabi_ddiv>
 800728a:	f1b9 0f00 	cmp.w	r9, #0
 800728e:	dab7      	bge.n	8007200 <__ieee754_pow+0x108>
 8007290:	9b00      	ldr	r3, [sp, #0]
 8007292:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007296:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800729a:	4323      	orrs	r3, r4
 800729c:	d108      	bne.n	80072b0 <__ieee754_pow+0x1b8>
 800729e:	4602      	mov	r2, r0
 80072a0:	460b      	mov	r3, r1
 80072a2:	4610      	mov	r0, r2
 80072a4:	4619      	mov	r1, r3
 80072a6:	f7f8 ffbb 	bl	8000220 <__aeabi_dsub>
 80072aa:	4602      	mov	r2, r0
 80072ac:	460b      	mov	r3, r1
 80072ae:	e78d      	b.n	80071cc <__ieee754_pow+0xd4>
 80072b0:	9b00      	ldr	r3, [sp, #0]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d1a4      	bne.n	8007200 <__ieee754_pow+0x108>
 80072b6:	4602      	mov	r2, r0
 80072b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072bc:	4610      	mov	r0, r2
 80072be:	4619      	mov	r1, r3
 80072c0:	e79e      	b.n	8007200 <__ieee754_pow+0x108>
 80072c2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80072c6:	f10c 35ff 	add.w	r5, ip, #4294967295
 80072ca:	950a      	str	r5, [sp, #40]	; 0x28
 80072cc:	9d00      	ldr	r5, [sp, #0]
 80072ce:	46ac      	mov	ip, r5
 80072d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80072d2:	ea5c 0505 	orrs.w	r5, ip, r5
 80072d6:	d0e4      	beq.n	80072a2 <__ieee754_pow+0x1aa>
 80072d8:	4b15      	ldr	r3, [pc, #84]	; (8007330 <__ieee754_pow+0x238>)
 80072da:	429e      	cmp	r6, r3
 80072dc:	f340 80fc 	ble.w	80074d8 <__ieee754_pow+0x3e0>
 80072e0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80072e4:	429e      	cmp	r6, r3
 80072e6:	4b10      	ldr	r3, [pc, #64]	; (8007328 <__ieee754_pow+0x230>)
 80072e8:	dd07      	ble.n	80072fa <__ieee754_pow+0x202>
 80072ea:	429c      	cmp	r4, r3
 80072ec:	dc0a      	bgt.n	8007304 <__ieee754_pow+0x20c>
 80072ee:	2f00      	cmp	r7, #0
 80072f0:	da84      	bge.n	80071fc <__ieee754_pow+0x104>
 80072f2:	a307      	add	r3, pc, #28	; (adr r3, 8007310 <__ieee754_pow+0x218>)
 80072f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f8:	e795      	b.n	8007226 <__ieee754_pow+0x12e>
 80072fa:	429c      	cmp	r4, r3
 80072fc:	dbf7      	blt.n	80072ee <__ieee754_pow+0x1f6>
 80072fe:	4b09      	ldr	r3, [pc, #36]	; (8007324 <__ieee754_pow+0x22c>)
 8007300:	429c      	cmp	r4, r3
 8007302:	dd17      	ble.n	8007334 <__ieee754_pow+0x23c>
 8007304:	2f00      	cmp	r7, #0
 8007306:	dcf4      	bgt.n	80072f2 <__ieee754_pow+0x1fa>
 8007308:	e778      	b.n	80071fc <__ieee754_pow+0x104>
 800730a:	bf00      	nop
 800730c:	f3af 8000 	nop.w
 8007310:	8800759c 	.word	0x8800759c
 8007314:	7e37e43c 	.word	0x7e37e43c
 8007318:	7ff00000 	.word	0x7ff00000
 800731c:	08007f78 	.word	0x08007f78
 8007320:	433fffff 	.word	0x433fffff
 8007324:	3ff00000 	.word	0x3ff00000
 8007328:	3fefffff 	.word	0x3fefffff
 800732c:	3fe00000 	.word	0x3fe00000
 8007330:	41e00000 	.word	0x41e00000
 8007334:	4b64      	ldr	r3, [pc, #400]	; (80074c8 <__ieee754_pow+0x3d0>)
 8007336:	2200      	movs	r2, #0
 8007338:	f7f8 ff72 	bl	8000220 <__aeabi_dsub>
 800733c:	a356      	add	r3, pc, #344	; (adr r3, 8007498 <__ieee754_pow+0x3a0>)
 800733e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007342:	4604      	mov	r4, r0
 8007344:	460d      	mov	r5, r1
 8007346:	f7f9 f923 	bl	8000590 <__aeabi_dmul>
 800734a:	a355      	add	r3, pc, #340	; (adr r3, 80074a0 <__ieee754_pow+0x3a8>)
 800734c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007350:	4606      	mov	r6, r0
 8007352:	460f      	mov	r7, r1
 8007354:	4620      	mov	r0, r4
 8007356:	4629      	mov	r1, r5
 8007358:	f7f9 f91a 	bl	8000590 <__aeabi_dmul>
 800735c:	4b5b      	ldr	r3, [pc, #364]	; (80074cc <__ieee754_pow+0x3d4>)
 800735e:	4682      	mov	sl, r0
 8007360:	468b      	mov	fp, r1
 8007362:	2200      	movs	r2, #0
 8007364:	4620      	mov	r0, r4
 8007366:	4629      	mov	r1, r5
 8007368:	f7f9 f912 	bl	8000590 <__aeabi_dmul>
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	a14d      	add	r1, pc, #308	; (adr r1, 80074a8 <__ieee754_pow+0x3b0>)
 8007372:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007376:	f7f8 ff53 	bl	8000220 <__aeabi_dsub>
 800737a:	4622      	mov	r2, r4
 800737c:	462b      	mov	r3, r5
 800737e:	f7f9 f907 	bl	8000590 <__aeabi_dmul>
 8007382:	4602      	mov	r2, r0
 8007384:	460b      	mov	r3, r1
 8007386:	2000      	movs	r0, #0
 8007388:	4951      	ldr	r1, [pc, #324]	; (80074d0 <__ieee754_pow+0x3d8>)
 800738a:	f7f8 ff49 	bl	8000220 <__aeabi_dsub>
 800738e:	4622      	mov	r2, r4
 8007390:	4680      	mov	r8, r0
 8007392:	4689      	mov	r9, r1
 8007394:	462b      	mov	r3, r5
 8007396:	4620      	mov	r0, r4
 8007398:	4629      	mov	r1, r5
 800739a:	f7f9 f8f9 	bl	8000590 <__aeabi_dmul>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	4640      	mov	r0, r8
 80073a4:	4649      	mov	r1, r9
 80073a6:	f7f9 f8f3 	bl	8000590 <__aeabi_dmul>
 80073aa:	a341      	add	r3, pc, #260	; (adr r3, 80074b0 <__ieee754_pow+0x3b8>)
 80073ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b0:	f7f9 f8ee 	bl	8000590 <__aeabi_dmul>
 80073b4:	4602      	mov	r2, r0
 80073b6:	460b      	mov	r3, r1
 80073b8:	4650      	mov	r0, sl
 80073ba:	4659      	mov	r1, fp
 80073bc:	f7f8 ff30 	bl	8000220 <__aeabi_dsub>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4680      	mov	r8, r0
 80073c6:	4689      	mov	r9, r1
 80073c8:	4630      	mov	r0, r6
 80073ca:	4639      	mov	r1, r7
 80073cc:	f7f8 ff2a 	bl	8000224 <__adddf3>
 80073d0:	2400      	movs	r4, #0
 80073d2:	4632      	mov	r2, r6
 80073d4:	463b      	mov	r3, r7
 80073d6:	4620      	mov	r0, r4
 80073d8:	460d      	mov	r5, r1
 80073da:	f7f8 ff21 	bl	8000220 <__aeabi_dsub>
 80073de:	4602      	mov	r2, r0
 80073e0:	460b      	mov	r3, r1
 80073e2:	4640      	mov	r0, r8
 80073e4:	4649      	mov	r1, r9
 80073e6:	f7f8 ff1b 	bl	8000220 <__aeabi_dsub>
 80073ea:	9b00      	ldr	r3, [sp, #0]
 80073ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073ee:	3b01      	subs	r3, #1
 80073f0:	4313      	orrs	r3, r2
 80073f2:	4682      	mov	sl, r0
 80073f4:	468b      	mov	fp, r1
 80073f6:	f040 81f1 	bne.w	80077dc <__ieee754_pow+0x6e4>
 80073fa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80074b8 <__ieee754_pow+0x3c0>
 80073fe:	eeb0 8a47 	vmov.f32	s16, s14
 8007402:	eef0 8a67 	vmov.f32	s17, s15
 8007406:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800740a:	2600      	movs	r6, #0
 800740c:	4632      	mov	r2, r6
 800740e:	463b      	mov	r3, r7
 8007410:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007414:	f7f8 ff04 	bl	8000220 <__aeabi_dsub>
 8007418:	4622      	mov	r2, r4
 800741a:	462b      	mov	r3, r5
 800741c:	f7f9 f8b8 	bl	8000590 <__aeabi_dmul>
 8007420:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007424:	4680      	mov	r8, r0
 8007426:	4689      	mov	r9, r1
 8007428:	4650      	mov	r0, sl
 800742a:	4659      	mov	r1, fp
 800742c:	f7f9 f8b0 	bl	8000590 <__aeabi_dmul>
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	4640      	mov	r0, r8
 8007436:	4649      	mov	r1, r9
 8007438:	f7f8 fef4 	bl	8000224 <__adddf3>
 800743c:	4632      	mov	r2, r6
 800743e:	463b      	mov	r3, r7
 8007440:	4680      	mov	r8, r0
 8007442:	4689      	mov	r9, r1
 8007444:	4620      	mov	r0, r4
 8007446:	4629      	mov	r1, r5
 8007448:	f7f9 f8a2 	bl	8000590 <__aeabi_dmul>
 800744c:	460b      	mov	r3, r1
 800744e:	4604      	mov	r4, r0
 8007450:	460d      	mov	r5, r1
 8007452:	4602      	mov	r2, r0
 8007454:	4649      	mov	r1, r9
 8007456:	4640      	mov	r0, r8
 8007458:	f7f8 fee4 	bl	8000224 <__adddf3>
 800745c:	4b1d      	ldr	r3, [pc, #116]	; (80074d4 <__ieee754_pow+0x3dc>)
 800745e:	4299      	cmp	r1, r3
 8007460:	ec45 4b19 	vmov	d9, r4, r5
 8007464:	4606      	mov	r6, r0
 8007466:	460f      	mov	r7, r1
 8007468:	468b      	mov	fp, r1
 800746a:	f340 82fe 	ble.w	8007a6a <__ieee754_pow+0x972>
 800746e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007472:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007476:	4303      	orrs	r3, r0
 8007478:	f000 81f0 	beq.w	800785c <__ieee754_pow+0x764>
 800747c:	a310      	add	r3, pc, #64	; (adr r3, 80074c0 <__ieee754_pow+0x3c8>)
 800747e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007482:	ec51 0b18 	vmov	r0, r1, d8
 8007486:	f7f9 f883 	bl	8000590 <__aeabi_dmul>
 800748a:	a30d      	add	r3, pc, #52	; (adr r3, 80074c0 <__ieee754_pow+0x3c8>)
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	e6cb      	b.n	800722a <__ieee754_pow+0x132>
 8007492:	bf00      	nop
 8007494:	f3af 8000 	nop.w
 8007498:	60000000 	.word	0x60000000
 800749c:	3ff71547 	.word	0x3ff71547
 80074a0:	f85ddf44 	.word	0xf85ddf44
 80074a4:	3e54ae0b 	.word	0x3e54ae0b
 80074a8:	55555555 	.word	0x55555555
 80074ac:	3fd55555 	.word	0x3fd55555
 80074b0:	652b82fe 	.word	0x652b82fe
 80074b4:	3ff71547 	.word	0x3ff71547
 80074b8:	00000000 	.word	0x00000000
 80074bc:	bff00000 	.word	0xbff00000
 80074c0:	8800759c 	.word	0x8800759c
 80074c4:	7e37e43c 	.word	0x7e37e43c
 80074c8:	3ff00000 	.word	0x3ff00000
 80074cc:	3fd00000 	.word	0x3fd00000
 80074d0:	3fe00000 	.word	0x3fe00000
 80074d4:	408fffff 	.word	0x408fffff
 80074d8:	4bd7      	ldr	r3, [pc, #860]	; (8007838 <__ieee754_pow+0x740>)
 80074da:	ea03 0309 	and.w	r3, r3, r9
 80074de:	2200      	movs	r2, #0
 80074e0:	b92b      	cbnz	r3, 80074ee <__ieee754_pow+0x3f6>
 80074e2:	4bd6      	ldr	r3, [pc, #856]	; (800783c <__ieee754_pow+0x744>)
 80074e4:	f7f9 f854 	bl	8000590 <__aeabi_dmul>
 80074e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80074ec:	460c      	mov	r4, r1
 80074ee:	1523      	asrs	r3, r4, #20
 80074f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80074f4:	4413      	add	r3, r2
 80074f6:	9309      	str	r3, [sp, #36]	; 0x24
 80074f8:	4bd1      	ldr	r3, [pc, #836]	; (8007840 <__ieee754_pow+0x748>)
 80074fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80074fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007502:	429c      	cmp	r4, r3
 8007504:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007508:	dd08      	ble.n	800751c <__ieee754_pow+0x424>
 800750a:	4bce      	ldr	r3, [pc, #824]	; (8007844 <__ieee754_pow+0x74c>)
 800750c:	429c      	cmp	r4, r3
 800750e:	f340 8163 	ble.w	80077d8 <__ieee754_pow+0x6e0>
 8007512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007514:	3301      	adds	r3, #1
 8007516:	9309      	str	r3, [sp, #36]	; 0x24
 8007518:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800751c:	2400      	movs	r4, #0
 800751e:	00e3      	lsls	r3, r4, #3
 8007520:	930b      	str	r3, [sp, #44]	; 0x2c
 8007522:	4bc9      	ldr	r3, [pc, #804]	; (8007848 <__ieee754_pow+0x750>)
 8007524:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007528:	ed93 7b00 	vldr	d7, [r3]
 800752c:	4629      	mov	r1, r5
 800752e:	ec53 2b17 	vmov	r2, r3, d7
 8007532:	eeb0 8a47 	vmov.f32	s16, s14
 8007536:	eef0 8a67 	vmov.f32	s17, s15
 800753a:	4682      	mov	sl, r0
 800753c:	f7f8 fe70 	bl	8000220 <__aeabi_dsub>
 8007540:	4652      	mov	r2, sl
 8007542:	4606      	mov	r6, r0
 8007544:	460f      	mov	r7, r1
 8007546:	462b      	mov	r3, r5
 8007548:	ec51 0b18 	vmov	r0, r1, d8
 800754c:	f7f8 fe6a 	bl	8000224 <__adddf3>
 8007550:	4602      	mov	r2, r0
 8007552:	460b      	mov	r3, r1
 8007554:	2000      	movs	r0, #0
 8007556:	49bd      	ldr	r1, [pc, #756]	; (800784c <__ieee754_pow+0x754>)
 8007558:	f7f9 f944 	bl	80007e4 <__aeabi_ddiv>
 800755c:	ec41 0b19 	vmov	d9, r0, r1
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	4630      	mov	r0, r6
 8007566:	4639      	mov	r1, r7
 8007568:	f7f9 f812 	bl	8000590 <__aeabi_dmul>
 800756c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007570:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007574:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007578:	2300      	movs	r3, #0
 800757a:	9304      	str	r3, [sp, #16]
 800757c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007580:	46ab      	mov	fp, r5
 8007582:	106d      	asrs	r5, r5, #1
 8007584:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007588:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800758c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007590:	2200      	movs	r2, #0
 8007592:	4640      	mov	r0, r8
 8007594:	4649      	mov	r1, r9
 8007596:	4614      	mov	r4, r2
 8007598:	461d      	mov	r5, r3
 800759a:	f7f8 fff9 	bl	8000590 <__aeabi_dmul>
 800759e:	4602      	mov	r2, r0
 80075a0:	460b      	mov	r3, r1
 80075a2:	4630      	mov	r0, r6
 80075a4:	4639      	mov	r1, r7
 80075a6:	f7f8 fe3b 	bl	8000220 <__aeabi_dsub>
 80075aa:	ec53 2b18 	vmov	r2, r3, d8
 80075ae:	4606      	mov	r6, r0
 80075b0:	460f      	mov	r7, r1
 80075b2:	4620      	mov	r0, r4
 80075b4:	4629      	mov	r1, r5
 80075b6:	f7f8 fe33 	bl	8000220 <__aeabi_dsub>
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	4650      	mov	r0, sl
 80075c0:	4659      	mov	r1, fp
 80075c2:	f7f8 fe2d 	bl	8000220 <__aeabi_dsub>
 80075c6:	4642      	mov	r2, r8
 80075c8:	464b      	mov	r3, r9
 80075ca:	f7f8 ffe1 	bl	8000590 <__aeabi_dmul>
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	4630      	mov	r0, r6
 80075d4:	4639      	mov	r1, r7
 80075d6:	f7f8 fe23 	bl	8000220 <__aeabi_dsub>
 80075da:	ec53 2b19 	vmov	r2, r3, d9
 80075de:	f7f8 ffd7 	bl	8000590 <__aeabi_dmul>
 80075e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80075e6:	ec41 0b18 	vmov	d8, r0, r1
 80075ea:	4610      	mov	r0, r2
 80075ec:	4619      	mov	r1, r3
 80075ee:	f7f8 ffcf 	bl	8000590 <__aeabi_dmul>
 80075f2:	a37d      	add	r3, pc, #500	; (adr r3, 80077e8 <__ieee754_pow+0x6f0>)
 80075f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f8:	4604      	mov	r4, r0
 80075fa:	460d      	mov	r5, r1
 80075fc:	f7f8 ffc8 	bl	8000590 <__aeabi_dmul>
 8007600:	a37b      	add	r3, pc, #492	; (adr r3, 80077f0 <__ieee754_pow+0x6f8>)
 8007602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007606:	f7f8 fe0d 	bl	8000224 <__adddf3>
 800760a:	4622      	mov	r2, r4
 800760c:	462b      	mov	r3, r5
 800760e:	f7f8 ffbf 	bl	8000590 <__aeabi_dmul>
 8007612:	a379      	add	r3, pc, #484	; (adr r3, 80077f8 <__ieee754_pow+0x700>)
 8007614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007618:	f7f8 fe04 	bl	8000224 <__adddf3>
 800761c:	4622      	mov	r2, r4
 800761e:	462b      	mov	r3, r5
 8007620:	f7f8 ffb6 	bl	8000590 <__aeabi_dmul>
 8007624:	a376      	add	r3, pc, #472	; (adr r3, 8007800 <__ieee754_pow+0x708>)
 8007626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762a:	f7f8 fdfb 	bl	8000224 <__adddf3>
 800762e:	4622      	mov	r2, r4
 8007630:	462b      	mov	r3, r5
 8007632:	f7f8 ffad 	bl	8000590 <__aeabi_dmul>
 8007636:	a374      	add	r3, pc, #464	; (adr r3, 8007808 <__ieee754_pow+0x710>)
 8007638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763c:	f7f8 fdf2 	bl	8000224 <__adddf3>
 8007640:	4622      	mov	r2, r4
 8007642:	462b      	mov	r3, r5
 8007644:	f7f8 ffa4 	bl	8000590 <__aeabi_dmul>
 8007648:	a371      	add	r3, pc, #452	; (adr r3, 8007810 <__ieee754_pow+0x718>)
 800764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764e:	f7f8 fde9 	bl	8000224 <__adddf3>
 8007652:	4622      	mov	r2, r4
 8007654:	4606      	mov	r6, r0
 8007656:	460f      	mov	r7, r1
 8007658:	462b      	mov	r3, r5
 800765a:	4620      	mov	r0, r4
 800765c:	4629      	mov	r1, r5
 800765e:	f7f8 ff97 	bl	8000590 <__aeabi_dmul>
 8007662:	4602      	mov	r2, r0
 8007664:	460b      	mov	r3, r1
 8007666:	4630      	mov	r0, r6
 8007668:	4639      	mov	r1, r7
 800766a:	f7f8 ff91 	bl	8000590 <__aeabi_dmul>
 800766e:	4642      	mov	r2, r8
 8007670:	4604      	mov	r4, r0
 8007672:	460d      	mov	r5, r1
 8007674:	464b      	mov	r3, r9
 8007676:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800767a:	f7f8 fdd3 	bl	8000224 <__adddf3>
 800767e:	ec53 2b18 	vmov	r2, r3, d8
 8007682:	f7f8 ff85 	bl	8000590 <__aeabi_dmul>
 8007686:	4622      	mov	r2, r4
 8007688:	462b      	mov	r3, r5
 800768a:	f7f8 fdcb 	bl	8000224 <__adddf3>
 800768e:	4642      	mov	r2, r8
 8007690:	4682      	mov	sl, r0
 8007692:	468b      	mov	fp, r1
 8007694:	464b      	mov	r3, r9
 8007696:	4640      	mov	r0, r8
 8007698:	4649      	mov	r1, r9
 800769a:	f7f8 ff79 	bl	8000590 <__aeabi_dmul>
 800769e:	4b6c      	ldr	r3, [pc, #432]	; (8007850 <__ieee754_pow+0x758>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	4606      	mov	r6, r0
 80076a4:	460f      	mov	r7, r1
 80076a6:	f7f8 fdbd 	bl	8000224 <__adddf3>
 80076aa:	4652      	mov	r2, sl
 80076ac:	465b      	mov	r3, fp
 80076ae:	f7f8 fdb9 	bl	8000224 <__adddf3>
 80076b2:	9c04      	ldr	r4, [sp, #16]
 80076b4:	460d      	mov	r5, r1
 80076b6:	4622      	mov	r2, r4
 80076b8:	460b      	mov	r3, r1
 80076ba:	4640      	mov	r0, r8
 80076bc:	4649      	mov	r1, r9
 80076be:	f7f8 ff67 	bl	8000590 <__aeabi_dmul>
 80076c2:	4b63      	ldr	r3, [pc, #396]	; (8007850 <__ieee754_pow+0x758>)
 80076c4:	4680      	mov	r8, r0
 80076c6:	4689      	mov	r9, r1
 80076c8:	2200      	movs	r2, #0
 80076ca:	4620      	mov	r0, r4
 80076cc:	4629      	mov	r1, r5
 80076ce:	f7f8 fda7 	bl	8000220 <__aeabi_dsub>
 80076d2:	4632      	mov	r2, r6
 80076d4:	463b      	mov	r3, r7
 80076d6:	f7f8 fda3 	bl	8000220 <__aeabi_dsub>
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	4650      	mov	r0, sl
 80076e0:	4659      	mov	r1, fp
 80076e2:	f7f8 fd9d 	bl	8000220 <__aeabi_dsub>
 80076e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076ea:	f7f8 ff51 	bl	8000590 <__aeabi_dmul>
 80076ee:	4622      	mov	r2, r4
 80076f0:	4606      	mov	r6, r0
 80076f2:	460f      	mov	r7, r1
 80076f4:	462b      	mov	r3, r5
 80076f6:	ec51 0b18 	vmov	r0, r1, d8
 80076fa:	f7f8 ff49 	bl	8000590 <__aeabi_dmul>
 80076fe:	4602      	mov	r2, r0
 8007700:	460b      	mov	r3, r1
 8007702:	4630      	mov	r0, r6
 8007704:	4639      	mov	r1, r7
 8007706:	f7f8 fd8d 	bl	8000224 <__adddf3>
 800770a:	4606      	mov	r6, r0
 800770c:	460f      	mov	r7, r1
 800770e:	4602      	mov	r2, r0
 8007710:	460b      	mov	r3, r1
 8007712:	4640      	mov	r0, r8
 8007714:	4649      	mov	r1, r9
 8007716:	f7f8 fd85 	bl	8000224 <__adddf3>
 800771a:	9c04      	ldr	r4, [sp, #16]
 800771c:	a33e      	add	r3, pc, #248	; (adr r3, 8007818 <__ieee754_pow+0x720>)
 800771e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007722:	4620      	mov	r0, r4
 8007724:	460d      	mov	r5, r1
 8007726:	f7f8 ff33 	bl	8000590 <__aeabi_dmul>
 800772a:	4642      	mov	r2, r8
 800772c:	ec41 0b18 	vmov	d8, r0, r1
 8007730:	464b      	mov	r3, r9
 8007732:	4620      	mov	r0, r4
 8007734:	4629      	mov	r1, r5
 8007736:	f7f8 fd73 	bl	8000220 <__aeabi_dsub>
 800773a:	4602      	mov	r2, r0
 800773c:	460b      	mov	r3, r1
 800773e:	4630      	mov	r0, r6
 8007740:	4639      	mov	r1, r7
 8007742:	f7f8 fd6d 	bl	8000220 <__aeabi_dsub>
 8007746:	a336      	add	r3, pc, #216	; (adr r3, 8007820 <__ieee754_pow+0x728>)
 8007748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774c:	f7f8 ff20 	bl	8000590 <__aeabi_dmul>
 8007750:	a335      	add	r3, pc, #212	; (adr r3, 8007828 <__ieee754_pow+0x730>)
 8007752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007756:	4606      	mov	r6, r0
 8007758:	460f      	mov	r7, r1
 800775a:	4620      	mov	r0, r4
 800775c:	4629      	mov	r1, r5
 800775e:	f7f8 ff17 	bl	8000590 <__aeabi_dmul>
 8007762:	4602      	mov	r2, r0
 8007764:	460b      	mov	r3, r1
 8007766:	4630      	mov	r0, r6
 8007768:	4639      	mov	r1, r7
 800776a:	f7f8 fd5b 	bl	8000224 <__adddf3>
 800776e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007770:	4b38      	ldr	r3, [pc, #224]	; (8007854 <__ieee754_pow+0x75c>)
 8007772:	4413      	add	r3, r2
 8007774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007778:	f7f8 fd54 	bl	8000224 <__adddf3>
 800777c:	4682      	mov	sl, r0
 800777e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007780:	468b      	mov	fp, r1
 8007782:	f7f8 fe9b 	bl	80004bc <__aeabi_i2d>
 8007786:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007788:	4b33      	ldr	r3, [pc, #204]	; (8007858 <__ieee754_pow+0x760>)
 800778a:	4413      	add	r3, r2
 800778c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007790:	4606      	mov	r6, r0
 8007792:	460f      	mov	r7, r1
 8007794:	4652      	mov	r2, sl
 8007796:	465b      	mov	r3, fp
 8007798:	ec51 0b18 	vmov	r0, r1, d8
 800779c:	f7f8 fd42 	bl	8000224 <__adddf3>
 80077a0:	4642      	mov	r2, r8
 80077a2:	464b      	mov	r3, r9
 80077a4:	f7f8 fd3e 	bl	8000224 <__adddf3>
 80077a8:	4632      	mov	r2, r6
 80077aa:	463b      	mov	r3, r7
 80077ac:	f7f8 fd3a 	bl	8000224 <__adddf3>
 80077b0:	9c04      	ldr	r4, [sp, #16]
 80077b2:	4632      	mov	r2, r6
 80077b4:	463b      	mov	r3, r7
 80077b6:	4620      	mov	r0, r4
 80077b8:	460d      	mov	r5, r1
 80077ba:	f7f8 fd31 	bl	8000220 <__aeabi_dsub>
 80077be:	4642      	mov	r2, r8
 80077c0:	464b      	mov	r3, r9
 80077c2:	f7f8 fd2d 	bl	8000220 <__aeabi_dsub>
 80077c6:	ec53 2b18 	vmov	r2, r3, d8
 80077ca:	f7f8 fd29 	bl	8000220 <__aeabi_dsub>
 80077ce:	4602      	mov	r2, r0
 80077d0:	460b      	mov	r3, r1
 80077d2:	4650      	mov	r0, sl
 80077d4:	4659      	mov	r1, fp
 80077d6:	e606      	b.n	80073e6 <__ieee754_pow+0x2ee>
 80077d8:	2401      	movs	r4, #1
 80077da:	e6a0      	b.n	800751e <__ieee754_pow+0x426>
 80077dc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007830 <__ieee754_pow+0x738>
 80077e0:	e60d      	b.n	80073fe <__ieee754_pow+0x306>
 80077e2:	bf00      	nop
 80077e4:	f3af 8000 	nop.w
 80077e8:	4a454eef 	.word	0x4a454eef
 80077ec:	3fca7e28 	.word	0x3fca7e28
 80077f0:	93c9db65 	.word	0x93c9db65
 80077f4:	3fcd864a 	.word	0x3fcd864a
 80077f8:	a91d4101 	.word	0xa91d4101
 80077fc:	3fd17460 	.word	0x3fd17460
 8007800:	518f264d 	.word	0x518f264d
 8007804:	3fd55555 	.word	0x3fd55555
 8007808:	db6fabff 	.word	0xdb6fabff
 800780c:	3fdb6db6 	.word	0x3fdb6db6
 8007810:	33333303 	.word	0x33333303
 8007814:	3fe33333 	.word	0x3fe33333
 8007818:	e0000000 	.word	0xe0000000
 800781c:	3feec709 	.word	0x3feec709
 8007820:	dc3a03fd 	.word	0xdc3a03fd
 8007824:	3feec709 	.word	0x3feec709
 8007828:	145b01f5 	.word	0x145b01f5
 800782c:	be3e2fe0 	.word	0xbe3e2fe0
 8007830:	00000000 	.word	0x00000000
 8007834:	3ff00000 	.word	0x3ff00000
 8007838:	7ff00000 	.word	0x7ff00000
 800783c:	43400000 	.word	0x43400000
 8007840:	0003988e 	.word	0x0003988e
 8007844:	000bb679 	.word	0x000bb679
 8007848:	08007f80 	.word	0x08007f80
 800784c:	3ff00000 	.word	0x3ff00000
 8007850:	40080000 	.word	0x40080000
 8007854:	08007fa0 	.word	0x08007fa0
 8007858:	08007f90 	.word	0x08007f90
 800785c:	a3b5      	add	r3, pc, #724	; (adr r3, 8007b34 <__ieee754_pow+0xa3c>)
 800785e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007862:	4640      	mov	r0, r8
 8007864:	4649      	mov	r1, r9
 8007866:	f7f8 fcdd 	bl	8000224 <__adddf3>
 800786a:	4622      	mov	r2, r4
 800786c:	ec41 0b1a 	vmov	d10, r0, r1
 8007870:	462b      	mov	r3, r5
 8007872:	4630      	mov	r0, r6
 8007874:	4639      	mov	r1, r7
 8007876:	f7f8 fcd3 	bl	8000220 <__aeabi_dsub>
 800787a:	4602      	mov	r2, r0
 800787c:	460b      	mov	r3, r1
 800787e:	ec51 0b1a 	vmov	r0, r1, d10
 8007882:	f7f9 f915 	bl	8000ab0 <__aeabi_dcmpgt>
 8007886:	2800      	cmp	r0, #0
 8007888:	f47f adf8 	bne.w	800747c <__ieee754_pow+0x384>
 800788c:	4aa4      	ldr	r2, [pc, #656]	; (8007b20 <__ieee754_pow+0xa28>)
 800788e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007892:	4293      	cmp	r3, r2
 8007894:	f340 810b 	ble.w	8007aae <__ieee754_pow+0x9b6>
 8007898:	151b      	asrs	r3, r3, #20
 800789a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800789e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80078a2:	fa4a f303 	asr.w	r3, sl, r3
 80078a6:	445b      	add	r3, fp
 80078a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80078ac:	4e9d      	ldr	r6, [pc, #628]	; (8007b24 <__ieee754_pow+0xa2c>)
 80078ae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80078b2:	4116      	asrs	r6, r2
 80078b4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80078b8:	2000      	movs	r0, #0
 80078ba:	ea23 0106 	bic.w	r1, r3, r6
 80078be:	f1c2 0214 	rsb	r2, r2, #20
 80078c2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80078c6:	fa4a fa02 	asr.w	sl, sl, r2
 80078ca:	f1bb 0f00 	cmp.w	fp, #0
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	4620      	mov	r0, r4
 80078d4:	4629      	mov	r1, r5
 80078d6:	bfb8      	it	lt
 80078d8:	f1ca 0a00 	rsblt	sl, sl, #0
 80078dc:	f7f8 fca0 	bl	8000220 <__aeabi_dsub>
 80078e0:	ec41 0b19 	vmov	d9, r0, r1
 80078e4:	4642      	mov	r2, r8
 80078e6:	464b      	mov	r3, r9
 80078e8:	ec51 0b19 	vmov	r0, r1, d9
 80078ec:	f7f8 fc9a 	bl	8000224 <__adddf3>
 80078f0:	2400      	movs	r4, #0
 80078f2:	a379      	add	r3, pc, #484	; (adr r3, 8007ad8 <__ieee754_pow+0x9e0>)
 80078f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f8:	4620      	mov	r0, r4
 80078fa:	460d      	mov	r5, r1
 80078fc:	f7f8 fe48 	bl	8000590 <__aeabi_dmul>
 8007900:	ec53 2b19 	vmov	r2, r3, d9
 8007904:	4606      	mov	r6, r0
 8007906:	460f      	mov	r7, r1
 8007908:	4620      	mov	r0, r4
 800790a:	4629      	mov	r1, r5
 800790c:	f7f8 fc88 	bl	8000220 <__aeabi_dsub>
 8007910:	4602      	mov	r2, r0
 8007912:	460b      	mov	r3, r1
 8007914:	4640      	mov	r0, r8
 8007916:	4649      	mov	r1, r9
 8007918:	f7f8 fc82 	bl	8000220 <__aeabi_dsub>
 800791c:	a370      	add	r3, pc, #448	; (adr r3, 8007ae0 <__ieee754_pow+0x9e8>)
 800791e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007922:	f7f8 fe35 	bl	8000590 <__aeabi_dmul>
 8007926:	a370      	add	r3, pc, #448	; (adr r3, 8007ae8 <__ieee754_pow+0x9f0>)
 8007928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792c:	4680      	mov	r8, r0
 800792e:	4689      	mov	r9, r1
 8007930:	4620      	mov	r0, r4
 8007932:	4629      	mov	r1, r5
 8007934:	f7f8 fe2c 	bl	8000590 <__aeabi_dmul>
 8007938:	4602      	mov	r2, r0
 800793a:	460b      	mov	r3, r1
 800793c:	4640      	mov	r0, r8
 800793e:	4649      	mov	r1, r9
 8007940:	f7f8 fc70 	bl	8000224 <__adddf3>
 8007944:	4604      	mov	r4, r0
 8007946:	460d      	mov	r5, r1
 8007948:	4602      	mov	r2, r0
 800794a:	460b      	mov	r3, r1
 800794c:	4630      	mov	r0, r6
 800794e:	4639      	mov	r1, r7
 8007950:	f7f8 fc68 	bl	8000224 <__adddf3>
 8007954:	4632      	mov	r2, r6
 8007956:	463b      	mov	r3, r7
 8007958:	4680      	mov	r8, r0
 800795a:	4689      	mov	r9, r1
 800795c:	f7f8 fc60 	bl	8000220 <__aeabi_dsub>
 8007960:	4602      	mov	r2, r0
 8007962:	460b      	mov	r3, r1
 8007964:	4620      	mov	r0, r4
 8007966:	4629      	mov	r1, r5
 8007968:	f7f8 fc5a 	bl	8000220 <__aeabi_dsub>
 800796c:	4642      	mov	r2, r8
 800796e:	4606      	mov	r6, r0
 8007970:	460f      	mov	r7, r1
 8007972:	464b      	mov	r3, r9
 8007974:	4640      	mov	r0, r8
 8007976:	4649      	mov	r1, r9
 8007978:	f7f8 fe0a 	bl	8000590 <__aeabi_dmul>
 800797c:	a35c      	add	r3, pc, #368	; (adr r3, 8007af0 <__ieee754_pow+0x9f8>)
 800797e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007982:	4604      	mov	r4, r0
 8007984:	460d      	mov	r5, r1
 8007986:	f7f8 fe03 	bl	8000590 <__aeabi_dmul>
 800798a:	a35b      	add	r3, pc, #364	; (adr r3, 8007af8 <__ieee754_pow+0xa00>)
 800798c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007990:	f7f8 fc46 	bl	8000220 <__aeabi_dsub>
 8007994:	4622      	mov	r2, r4
 8007996:	462b      	mov	r3, r5
 8007998:	f7f8 fdfa 	bl	8000590 <__aeabi_dmul>
 800799c:	a358      	add	r3, pc, #352	; (adr r3, 8007b00 <__ieee754_pow+0xa08>)
 800799e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a2:	f7f8 fc3f 	bl	8000224 <__adddf3>
 80079a6:	4622      	mov	r2, r4
 80079a8:	462b      	mov	r3, r5
 80079aa:	f7f8 fdf1 	bl	8000590 <__aeabi_dmul>
 80079ae:	a356      	add	r3, pc, #344	; (adr r3, 8007b08 <__ieee754_pow+0xa10>)
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	f7f8 fc34 	bl	8000220 <__aeabi_dsub>
 80079b8:	4622      	mov	r2, r4
 80079ba:	462b      	mov	r3, r5
 80079bc:	f7f8 fde8 	bl	8000590 <__aeabi_dmul>
 80079c0:	a353      	add	r3, pc, #332	; (adr r3, 8007b10 <__ieee754_pow+0xa18>)
 80079c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c6:	f7f8 fc2d 	bl	8000224 <__adddf3>
 80079ca:	4622      	mov	r2, r4
 80079cc:	462b      	mov	r3, r5
 80079ce:	f7f8 fddf 	bl	8000590 <__aeabi_dmul>
 80079d2:	4602      	mov	r2, r0
 80079d4:	460b      	mov	r3, r1
 80079d6:	4640      	mov	r0, r8
 80079d8:	4649      	mov	r1, r9
 80079da:	f7f8 fc21 	bl	8000220 <__aeabi_dsub>
 80079de:	4604      	mov	r4, r0
 80079e0:	460d      	mov	r5, r1
 80079e2:	4602      	mov	r2, r0
 80079e4:	460b      	mov	r3, r1
 80079e6:	4640      	mov	r0, r8
 80079e8:	4649      	mov	r1, r9
 80079ea:	f7f8 fdd1 	bl	8000590 <__aeabi_dmul>
 80079ee:	2200      	movs	r2, #0
 80079f0:	ec41 0b19 	vmov	d9, r0, r1
 80079f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80079f8:	4620      	mov	r0, r4
 80079fa:	4629      	mov	r1, r5
 80079fc:	f7f8 fc10 	bl	8000220 <__aeabi_dsub>
 8007a00:	4602      	mov	r2, r0
 8007a02:	460b      	mov	r3, r1
 8007a04:	ec51 0b19 	vmov	r0, r1, d9
 8007a08:	f7f8 feec 	bl	80007e4 <__aeabi_ddiv>
 8007a0c:	4632      	mov	r2, r6
 8007a0e:	4604      	mov	r4, r0
 8007a10:	460d      	mov	r5, r1
 8007a12:	463b      	mov	r3, r7
 8007a14:	4640      	mov	r0, r8
 8007a16:	4649      	mov	r1, r9
 8007a18:	f7f8 fdba 	bl	8000590 <__aeabi_dmul>
 8007a1c:	4632      	mov	r2, r6
 8007a1e:	463b      	mov	r3, r7
 8007a20:	f7f8 fc00 	bl	8000224 <__adddf3>
 8007a24:	4602      	mov	r2, r0
 8007a26:	460b      	mov	r3, r1
 8007a28:	4620      	mov	r0, r4
 8007a2a:	4629      	mov	r1, r5
 8007a2c:	f7f8 fbf8 	bl	8000220 <__aeabi_dsub>
 8007a30:	4642      	mov	r2, r8
 8007a32:	464b      	mov	r3, r9
 8007a34:	f7f8 fbf4 	bl	8000220 <__aeabi_dsub>
 8007a38:	460b      	mov	r3, r1
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	493a      	ldr	r1, [pc, #232]	; (8007b28 <__ieee754_pow+0xa30>)
 8007a3e:	2000      	movs	r0, #0
 8007a40:	f7f8 fbee 	bl	8000220 <__aeabi_dsub>
 8007a44:	e9cd 0100 	strd	r0, r1, [sp]
 8007a48:	9b01      	ldr	r3, [sp, #4]
 8007a4a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007a4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a52:	da2f      	bge.n	8007ab4 <__ieee754_pow+0x9bc>
 8007a54:	4650      	mov	r0, sl
 8007a56:	ed9d 0b00 	vldr	d0, [sp]
 8007a5a:	f000 f9cd 	bl	8007df8 <scalbn>
 8007a5e:	ec51 0b10 	vmov	r0, r1, d0
 8007a62:	ec53 2b18 	vmov	r2, r3, d8
 8007a66:	f7ff bbe0 	b.w	800722a <__ieee754_pow+0x132>
 8007a6a:	4b30      	ldr	r3, [pc, #192]	; (8007b2c <__ieee754_pow+0xa34>)
 8007a6c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007a70:	429e      	cmp	r6, r3
 8007a72:	f77f af0b 	ble.w	800788c <__ieee754_pow+0x794>
 8007a76:	4b2e      	ldr	r3, [pc, #184]	; (8007b30 <__ieee754_pow+0xa38>)
 8007a78:	440b      	add	r3, r1
 8007a7a:	4303      	orrs	r3, r0
 8007a7c:	d00b      	beq.n	8007a96 <__ieee754_pow+0x99e>
 8007a7e:	a326      	add	r3, pc, #152	; (adr r3, 8007b18 <__ieee754_pow+0xa20>)
 8007a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a84:	ec51 0b18 	vmov	r0, r1, d8
 8007a88:	f7f8 fd82 	bl	8000590 <__aeabi_dmul>
 8007a8c:	a322      	add	r3, pc, #136	; (adr r3, 8007b18 <__ieee754_pow+0xa20>)
 8007a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a92:	f7ff bbca 	b.w	800722a <__ieee754_pow+0x132>
 8007a96:	4622      	mov	r2, r4
 8007a98:	462b      	mov	r3, r5
 8007a9a:	f7f8 fbc1 	bl	8000220 <__aeabi_dsub>
 8007a9e:	4642      	mov	r2, r8
 8007aa0:	464b      	mov	r3, r9
 8007aa2:	f7f8 fffb 	bl	8000a9c <__aeabi_dcmpge>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	f43f aef0 	beq.w	800788c <__ieee754_pow+0x794>
 8007aac:	e7e7      	b.n	8007a7e <__ieee754_pow+0x986>
 8007aae:	f04f 0a00 	mov.w	sl, #0
 8007ab2:	e717      	b.n	80078e4 <__ieee754_pow+0x7ec>
 8007ab4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ab8:	4619      	mov	r1, r3
 8007aba:	e7d2      	b.n	8007a62 <__ieee754_pow+0x96a>
 8007abc:	491a      	ldr	r1, [pc, #104]	; (8007b28 <__ieee754_pow+0xa30>)
 8007abe:	2000      	movs	r0, #0
 8007ac0:	f7ff bb9e 	b.w	8007200 <__ieee754_pow+0x108>
 8007ac4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ac8:	f7ff bb9a 	b.w	8007200 <__ieee754_pow+0x108>
 8007acc:	9000      	str	r0, [sp, #0]
 8007ace:	f7ff bb76 	b.w	80071be <__ieee754_pow+0xc6>
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	f7ff bb60 	b.w	8007198 <__ieee754_pow+0xa0>
 8007ad8:	00000000 	.word	0x00000000
 8007adc:	3fe62e43 	.word	0x3fe62e43
 8007ae0:	fefa39ef 	.word	0xfefa39ef
 8007ae4:	3fe62e42 	.word	0x3fe62e42
 8007ae8:	0ca86c39 	.word	0x0ca86c39
 8007aec:	be205c61 	.word	0xbe205c61
 8007af0:	72bea4d0 	.word	0x72bea4d0
 8007af4:	3e663769 	.word	0x3e663769
 8007af8:	c5d26bf1 	.word	0xc5d26bf1
 8007afc:	3ebbbd41 	.word	0x3ebbbd41
 8007b00:	af25de2c 	.word	0xaf25de2c
 8007b04:	3f11566a 	.word	0x3f11566a
 8007b08:	16bebd93 	.word	0x16bebd93
 8007b0c:	3f66c16c 	.word	0x3f66c16c
 8007b10:	5555553e 	.word	0x5555553e
 8007b14:	3fc55555 	.word	0x3fc55555
 8007b18:	c2f8f359 	.word	0xc2f8f359
 8007b1c:	01a56e1f 	.word	0x01a56e1f
 8007b20:	3fe00000 	.word	0x3fe00000
 8007b24:	000fffff 	.word	0x000fffff
 8007b28:	3ff00000 	.word	0x3ff00000
 8007b2c:	4090cbff 	.word	0x4090cbff
 8007b30:	3f6f3400 	.word	0x3f6f3400
 8007b34:	652b82fe 	.word	0x652b82fe
 8007b38:	3c971547 	.word	0x3c971547

08007b3c <__ieee754_sqrt>:
 8007b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b40:	ec55 4b10 	vmov	r4, r5, d0
 8007b44:	4e56      	ldr	r6, [pc, #344]	; (8007ca0 <__ieee754_sqrt+0x164>)
 8007b46:	43ae      	bics	r6, r5
 8007b48:	ee10 0a10 	vmov	r0, s0
 8007b4c:	ee10 3a10 	vmov	r3, s0
 8007b50:	4629      	mov	r1, r5
 8007b52:	462a      	mov	r2, r5
 8007b54:	d110      	bne.n	8007b78 <__ieee754_sqrt+0x3c>
 8007b56:	ee10 2a10 	vmov	r2, s0
 8007b5a:	462b      	mov	r3, r5
 8007b5c:	f7f8 fd18 	bl	8000590 <__aeabi_dmul>
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	4620      	mov	r0, r4
 8007b66:	4629      	mov	r1, r5
 8007b68:	f7f8 fb5c 	bl	8000224 <__adddf3>
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	460d      	mov	r5, r1
 8007b70:	ec45 4b10 	vmov	d0, r4, r5
 8007b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b78:	2d00      	cmp	r5, #0
 8007b7a:	dc10      	bgt.n	8007b9e <__ieee754_sqrt+0x62>
 8007b7c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007b80:	4330      	orrs	r0, r6
 8007b82:	d0f5      	beq.n	8007b70 <__ieee754_sqrt+0x34>
 8007b84:	b15d      	cbz	r5, 8007b9e <__ieee754_sqrt+0x62>
 8007b86:	ee10 2a10 	vmov	r2, s0
 8007b8a:	462b      	mov	r3, r5
 8007b8c:	ee10 0a10 	vmov	r0, s0
 8007b90:	f7f8 fb46 	bl	8000220 <__aeabi_dsub>
 8007b94:	4602      	mov	r2, r0
 8007b96:	460b      	mov	r3, r1
 8007b98:	f7f8 fe24 	bl	80007e4 <__aeabi_ddiv>
 8007b9c:	e7e6      	b.n	8007b6c <__ieee754_sqrt+0x30>
 8007b9e:	1509      	asrs	r1, r1, #20
 8007ba0:	d076      	beq.n	8007c90 <__ieee754_sqrt+0x154>
 8007ba2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007ba6:	07ce      	lsls	r6, r1, #31
 8007ba8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007bac:	bf5e      	ittt	pl
 8007bae:	0fda      	lsrpl	r2, r3, #31
 8007bb0:	005b      	lslpl	r3, r3, #1
 8007bb2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007bb6:	0fda      	lsrs	r2, r3, #31
 8007bb8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007bbc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007bc0:	2000      	movs	r0, #0
 8007bc2:	106d      	asrs	r5, r5, #1
 8007bc4:	005b      	lsls	r3, r3, #1
 8007bc6:	f04f 0e16 	mov.w	lr, #22
 8007bca:	4684      	mov	ip, r0
 8007bcc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007bd0:	eb0c 0401 	add.w	r4, ip, r1
 8007bd4:	4294      	cmp	r4, r2
 8007bd6:	bfde      	ittt	le
 8007bd8:	1b12      	suble	r2, r2, r4
 8007bda:	eb04 0c01 	addle.w	ip, r4, r1
 8007bde:	1840      	addle	r0, r0, r1
 8007be0:	0052      	lsls	r2, r2, #1
 8007be2:	f1be 0e01 	subs.w	lr, lr, #1
 8007be6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007bea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007bee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007bf2:	d1ed      	bne.n	8007bd0 <__ieee754_sqrt+0x94>
 8007bf4:	4671      	mov	r1, lr
 8007bf6:	2720      	movs	r7, #32
 8007bf8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007bfc:	4562      	cmp	r2, ip
 8007bfe:	eb04 060e 	add.w	r6, r4, lr
 8007c02:	dc02      	bgt.n	8007c0a <__ieee754_sqrt+0xce>
 8007c04:	d113      	bne.n	8007c2e <__ieee754_sqrt+0xf2>
 8007c06:	429e      	cmp	r6, r3
 8007c08:	d811      	bhi.n	8007c2e <__ieee754_sqrt+0xf2>
 8007c0a:	2e00      	cmp	r6, #0
 8007c0c:	eb06 0e04 	add.w	lr, r6, r4
 8007c10:	da43      	bge.n	8007c9a <__ieee754_sqrt+0x15e>
 8007c12:	f1be 0f00 	cmp.w	lr, #0
 8007c16:	db40      	blt.n	8007c9a <__ieee754_sqrt+0x15e>
 8007c18:	f10c 0801 	add.w	r8, ip, #1
 8007c1c:	eba2 020c 	sub.w	r2, r2, ip
 8007c20:	429e      	cmp	r6, r3
 8007c22:	bf88      	it	hi
 8007c24:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007c28:	1b9b      	subs	r3, r3, r6
 8007c2a:	4421      	add	r1, r4
 8007c2c:	46c4      	mov	ip, r8
 8007c2e:	0052      	lsls	r2, r2, #1
 8007c30:	3f01      	subs	r7, #1
 8007c32:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007c36:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007c3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007c3e:	d1dd      	bne.n	8007bfc <__ieee754_sqrt+0xc0>
 8007c40:	4313      	orrs	r3, r2
 8007c42:	d006      	beq.n	8007c52 <__ieee754_sqrt+0x116>
 8007c44:	1c4c      	adds	r4, r1, #1
 8007c46:	bf13      	iteet	ne
 8007c48:	3101      	addne	r1, #1
 8007c4a:	3001      	addeq	r0, #1
 8007c4c:	4639      	moveq	r1, r7
 8007c4e:	f021 0101 	bicne.w	r1, r1, #1
 8007c52:	1043      	asrs	r3, r0, #1
 8007c54:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007c58:	0849      	lsrs	r1, r1, #1
 8007c5a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007c5e:	07c2      	lsls	r2, r0, #31
 8007c60:	bf48      	it	mi
 8007c62:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007c66:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007c6a:	460c      	mov	r4, r1
 8007c6c:	463d      	mov	r5, r7
 8007c6e:	e77f      	b.n	8007b70 <__ieee754_sqrt+0x34>
 8007c70:	0ada      	lsrs	r2, r3, #11
 8007c72:	3815      	subs	r0, #21
 8007c74:	055b      	lsls	r3, r3, #21
 8007c76:	2a00      	cmp	r2, #0
 8007c78:	d0fa      	beq.n	8007c70 <__ieee754_sqrt+0x134>
 8007c7a:	02d7      	lsls	r7, r2, #11
 8007c7c:	d50a      	bpl.n	8007c94 <__ieee754_sqrt+0x158>
 8007c7e:	f1c1 0420 	rsb	r4, r1, #32
 8007c82:	fa23 f404 	lsr.w	r4, r3, r4
 8007c86:	1e4d      	subs	r5, r1, #1
 8007c88:	408b      	lsls	r3, r1
 8007c8a:	4322      	orrs	r2, r4
 8007c8c:	1b41      	subs	r1, r0, r5
 8007c8e:	e788      	b.n	8007ba2 <__ieee754_sqrt+0x66>
 8007c90:	4608      	mov	r0, r1
 8007c92:	e7f0      	b.n	8007c76 <__ieee754_sqrt+0x13a>
 8007c94:	0052      	lsls	r2, r2, #1
 8007c96:	3101      	adds	r1, #1
 8007c98:	e7ef      	b.n	8007c7a <__ieee754_sqrt+0x13e>
 8007c9a:	46e0      	mov	r8, ip
 8007c9c:	e7be      	b.n	8007c1c <__ieee754_sqrt+0xe0>
 8007c9e:	bf00      	nop
 8007ca0:	7ff00000 	.word	0x7ff00000

08007ca4 <fabs>:
 8007ca4:	ec51 0b10 	vmov	r0, r1, d0
 8007ca8:	ee10 2a10 	vmov	r2, s0
 8007cac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007cb0:	ec43 2b10 	vmov	d0, r2, r3
 8007cb4:	4770      	bx	lr

08007cb6 <finite>:
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	ed8d 0b00 	vstr	d0, [sp]
 8007cbc:	9801      	ldr	r0, [sp, #4]
 8007cbe:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007cc2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007cc6:	0fc0      	lsrs	r0, r0, #31
 8007cc8:	b002      	add	sp, #8
 8007cca:	4770      	bx	lr
 8007ccc:	0000      	movs	r0, r0
	...

08007cd0 <nan>:
 8007cd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007cd8 <nan+0x8>
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	00000000 	.word	0x00000000
 8007cdc:	7ff80000 	.word	0x7ff80000

08007ce0 <rint>:
 8007ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ce2:	ec51 0b10 	vmov	r0, r1, d0
 8007ce6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007cea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007cee:	2e13      	cmp	r6, #19
 8007cf0:	ee10 4a10 	vmov	r4, s0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007cfa:	dc58      	bgt.n	8007dae <rint+0xce>
 8007cfc:	2e00      	cmp	r6, #0
 8007cfe:	da2b      	bge.n	8007d58 <rint+0x78>
 8007d00:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007d04:	4302      	orrs	r2, r0
 8007d06:	d023      	beq.n	8007d50 <rint+0x70>
 8007d08:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007d0c:	4302      	orrs	r2, r0
 8007d0e:	4254      	negs	r4, r2
 8007d10:	4314      	orrs	r4, r2
 8007d12:	0c4b      	lsrs	r3, r1, #17
 8007d14:	0b24      	lsrs	r4, r4, #12
 8007d16:	045b      	lsls	r3, r3, #17
 8007d18:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007d1c:	ea44 0103 	orr.w	r1, r4, r3
 8007d20:	4b32      	ldr	r3, [pc, #200]	; (8007dec <rint+0x10c>)
 8007d22:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007d26:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4630      	mov	r0, r6
 8007d30:	4639      	mov	r1, r7
 8007d32:	f7f8 fa77 	bl	8000224 <__adddf3>
 8007d36:	e9cd 0100 	strd	r0, r1, [sp]
 8007d3a:	463b      	mov	r3, r7
 8007d3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d40:	4632      	mov	r2, r6
 8007d42:	f7f8 fa6d 	bl	8000220 <__aeabi_dsub>
 8007d46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007d4a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007d4e:	4639      	mov	r1, r7
 8007d50:	ec41 0b10 	vmov	d0, r0, r1
 8007d54:	b003      	add	sp, #12
 8007d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d58:	4a25      	ldr	r2, [pc, #148]	; (8007df0 <rint+0x110>)
 8007d5a:	4132      	asrs	r2, r6
 8007d5c:	ea01 0702 	and.w	r7, r1, r2
 8007d60:	4307      	orrs	r7, r0
 8007d62:	d0f5      	beq.n	8007d50 <rint+0x70>
 8007d64:	0851      	lsrs	r1, r2, #1
 8007d66:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8007d6a:	4314      	orrs	r4, r2
 8007d6c:	d00c      	beq.n	8007d88 <rint+0xa8>
 8007d6e:	ea23 0201 	bic.w	r2, r3, r1
 8007d72:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007d76:	2e13      	cmp	r6, #19
 8007d78:	fa43 f606 	asr.w	r6, r3, r6
 8007d7c:	bf0c      	ite	eq
 8007d7e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007d82:	2400      	movne	r4, #0
 8007d84:	ea42 0306 	orr.w	r3, r2, r6
 8007d88:	4918      	ldr	r1, [pc, #96]	; (8007dec <rint+0x10c>)
 8007d8a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007d8e:	4622      	mov	r2, r4
 8007d90:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007d94:	4620      	mov	r0, r4
 8007d96:	4629      	mov	r1, r5
 8007d98:	f7f8 fa44 	bl	8000224 <__adddf3>
 8007d9c:	e9cd 0100 	strd	r0, r1, [sp]
 8007da0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007da4:	4622      	mov	r2, r4
 8007da6:	462b      	mov	r3, r5
 8007da8:	f7f8 fa3a 	bl	8000220 <__aeabi_dsub>
 8007dac:	e7d0      	b.n	8007d50 <rint+0x70>
 8007dae:	2e33      	cmp	r6, #51	; 0x33
 8007db0:	dd07      	ble.n	8007dc2 <rint+0xe2>
 8007db2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007db6:	d1cb      	bne.n	8007d50 <rint+0x70>
 8007db8:	ee10 2a10 	vmov	r2, s0
 8007dbc:	f7f8 fa32 	bl	8000224 <__adddf3>
 8007dc0:	e7c6      	b.n	8007d50 <rint+0x70>
 8007dc2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8007dc6:	f04f 36ff 	mov.w	r6, #4294967295
 8007dca:	40d6      	lsrs	r6, r2
 8007dcc:	4230      	tst	r0, r6
 8007dce:	d0bf      	beq.n	8007d50 <rint+0x70>
 8007dd0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8007dd4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8007dd8:	bf1f      	itttt	ne
 8007dda:	ea24 0101 	bicne.w	r1, r4, r1
 8007dde:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8007de2:	fa44 f202 	asrne.w	r2, r4, r2
 8007de6:	ea41 0402 	orrne.w	r4, r1, r2
 8007dea:	e7cd      	b.n	8007d88 <rint+0xa8>
 8007dec:	08007fb0 	.word	0x08007fb0
 8007df0:	000fffff 	.word	0x000fffff
 8007df4:	00000000 	.word	0x00000000

08007df8 <scalbn>:
 8007df8:	b570      	push	{r4, r5, r6, lr}
 8007dfa:	ec55 4b10 	vmov	r4, r5, d0
 8007dfe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007e02:	4606      	mov	r6, r0
 8007e04:	462b      	mov	r3, r5
 8007e06:	b99a      	cbnz	r2, 8007e30 <scalbn+0x38>
 8007e08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007e0c:	4323      	orrs	r3, r4
 8007e0e:	d036      	beq.n	8007e7e <scalbn+0x86>
 8007e10:	4b39      	ldr	r3, [pc, #228]	; (8007ef8 <scalbn+0x100>)
 8007e12:	4629      	mov	r1, r5
 8007e14:	ee10 0a10 	vmov	r0, s0
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f7f8 fbb9 	bl	8000590 <__aeabi_dmul>
 8007e1e:	4b37      	ldr	r3, [pc, #220]	; (8007efc <scalbn+0x104>)
 8007e20:	429e      	cmp	r6, r3
 8007e22:	4604      	mov	r4, r0
 8007e24:	460d      	mov	r5, r1
 8007e26:	da10      	bge.n	8007e4a <scalbn+0x52>
 8007e28:	a32b      	add	r3, pc, #172	; (adr r3, 8007ed8 <scalbn+0xe0>)
 8007e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2e:	e03a      	b.n	8007ea6 <scalbn+0xae>
 8007e30:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007e34:	428a      	cmp	r2, r1
 8007e36:	d10c      	bne.n	8007e52 <scalbn+0x5a>
 8007e38:	ee10 2a10 	vmov	r2, s0
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	4629      	mov	r1, r5
 8007e40:	f7f8 f9f0 	bl	8000224 <__adddf3>
 8007e44:	4604      	mov	r4, r0
 8007e46:	460d      	mov	r5, r1
 8007e48:	e019      	b.n	8007e7e <scalbn+0x86>
 8007e4a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007e4e:	460b      	mov	r3, r1
 8007e50:	3a36      	subs	r2, #54	; 0x36
 8007e52:	4432      	add	r2, r6
 8007e54:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007e58:	428a      	cmp	r2, r1
 8007e5a:	dd08      	ble.n	8007e6e <scalbn+0x76>
 8007e5c:	2d00      	cmp	r5, #0
 8007e5e:	a120      	add	r1, pc, #128	; (adr r1, 8007ee0 <scalbn+0xe8>)
 8007e60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e64:	da1c      	bge.n	8007ea0 <scalbn+0xa8>
 8007e66:	a120      	add	r1, pc, #128	; (adr r1, 8007ee8 <scalbn+0xf0>)
 8007e68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e6c:	e018      	b.n	8007ea0 <scalbn+0xa8>
 8007e6e:	2a00      	cmp	r2, #0
 8007e70:	dd08      	ble.n	8007e84 <scalbn+0x8c>
 8007e72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007e76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007e7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007e7e:	ec45 4b10 	vmov	d0, r4, r5
 8007e82:	bd70      	pop	{r4, r5, r6, pc}
 8007e84:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007e88:	da19      	bge.n	8007ebe <scalbn+0xc6>
 8007e8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007e8e:	429e      	cmp	r6, r3
 8007e90:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007e94:	dd0a      	ble.n	8007eac <scalbn+0xb4>
 8007e96:	a112      	add	r1, pc, #72	; (adr r1, 8007ee0 <scalbn+0xe8>)
 8007e98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1e2      	bne.n	8007e66 <scalbn+0x6e>
 8007ea0:	a30f      	add	r3, pc, #60	; (adr r3, 8007ee0 <scalbn+0xe8>)
 8007ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea6:	f7f8 fb73 	bl	8000590 <__aeabi_dmul>
 8007eaa:	e7cb      	b.n	8007e44 <scalbn+0x4c>
 8007eac:	a10a      	add	r1, pc, #40	; (adr r1, 8007ed8 <scalbn+0xe0>)
 8007eae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0b8      	beq.n	8007e28 <scalbn+0x30>
 8007eb6:	a10e      	add	r1, pc, #56	; (adr r1, 8007ef0 <scalbn+0xf8>)
 8007eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ebc:	e7b4      	b.n	8007e28 <scalbn+0x30>
 8007ebe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007ec2:	3236      	adds	r2, #54	; 0x36
 8007ec4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007ec8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007ecc:	4620      	mov	r0, r4
 8007ece:	4b0c      	ldr	r3, [pc, #48]	; (8007f00 <scalbn+0x108>)
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	e7e8      	b.n	8007ea6 <scalbn+0xae>
 8007ed4:	f3af 8000 	nop.w
 8007ed8:	c2f8f359 	.word	0xc2f8f359
 8007edc:	01a56e1f 	.word	0x01a56e1f
 8007ee0:	8800759c 	.word	0x8800759c
 8007ee4:	7e37e43c 	.word	0x7e37e43c
 8007ee8:	8800759c 	.word	0x8800759c
 8007eec:	fe37e43c 	.word	0xfe37e43c
 8007ef0:	c2f8f359 	.word	0xc2f8f359
 8007ef4:	81a56e1f 	.word	0x81a56e1f
 8007ef8:	43500000 	.word	0x43500000
 8007efc:	ffff3cb0 	.word	0xffff3cb0
 8007f00:	3c900000 	.word	0x3c900000

08007f04 <_init>:
 8007f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f06:	bf00      	nop
 8007f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f0a:	bc08      	pop	{r3}
 8007f0c:	469e      	mov	lr, r3
 8007f0e:	4770      	bx	lr

08007f10 <_fini>:
 8007f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f12:	bf00      	nop
 8007f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f16:	bc08      	pop	{r3}
 8007f18:	469e      	mov	lr, r3
 8007f1a:	4770      	bx	lr
